[{"identifier": "eqeq-is-bad", "message": "$X == $X is a useless equality check", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "laravel-cookie-long-timeout", "message": "Found a configuration file where the lifetime attribute is over 30 minutes.", "parent_source": "community", "severity": "`ERROR`", "languages": "PHP"}, {"identifier": "laravel-dangerous-model-construction", "message": "Setting `$guarded` to an empty array allows mass assignment to every property in a Laravel model. This explicitly overrides Eloquent's safe-by-default mass assignment protections.", "parent_source": "community", "severity": "`ERROR`", "languages": "PHP"}, {"identifier": "laravel-sql-injection", "message": "Detected a SQL query based on user input. This could lead to SQL injection, which could potentially result in sensitive data being exfiltrated by attackers. Instead, use parameterized queries and prepared statements.", "parent_source": "community", "severity": "`WARNING`", "languages": "PHP"}, {"identifier": "laravel-blade-form-missing-csrf", "message": "Detected a form executing a state-changing HTTP method `$METHOD` to route definition `$...ROUTE` without a Laravel CSRF decorator or explicit CSRF token implementation. If this form modifies sensitive state this will open your application to Cross-Site Request Forgery (CSRF) attacks.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "laravel-api-route-sql-injection", "message": "HTTP method [$METHOD] to Laravel route $ROUTE_NAME is vulnerable to SQL injection via string concatenation or unsafe interpolation.", "parent_source": "community", "severity": "`WARNING`", "languages": "PHP"}, {"identifier": "laravel-cookie-null-domain", "message": "Found a configuration file where the domain attribute is not set to null. It is recommended (unless you are using sub-domain route registrations) to set this attribute to null so that only the same origin can set the cookie, thus protecting your cookies. ", "parent_source": "community", "severity": "`ERROR`", "languages": "PHP"}, {"identifier": "laravel-cookie-same-site", "message": "Found a configuration file where the same_site attribute is not set to 'lax' or 'strict'. Setting 'same_site' to 'lax' or 'strict' restricts cookies to a first-party or same-site context, which will protect your cookies and prevent CSRF.", "parent_source": "community", "severity": "`ERROR`", "languages": "PHP"}, {"identifier": "laravel-unsafe-validator", "message": "Found a request argument passed to an `ignore()` definition in a Rule constraint. This can lead to SQL injection.", "parent_source": "community", "severity": "`ERROR`", "languages": "PHP"}, {"identifier": "laravel-cookie-secure-set", "message": "Found a configuration file where the secure attribute is not set to 'true'. Setting 'secure' to 'true' prevents the client from transmitting the cookie over unencrypted channels and therefore prevents cookies from being stolen through man in the middle attacks. ", "parent_source": "community", "severity": "`ERROR`", "languages": "PHP"}, {"identifier": "laravel-cookie-http-only", "message": "Found a configuration file where the HttpOnly attribute is not set to true. Setting `http_only` to true makes sure that your cookies are inaccessible from Javascript, which mitigates XSS attacks. Instead, set the 'http_only' like so: `http_only` => true ", "parent_source": "community", "severity": "`ERROR`", "languages": "PHP"}, {"identifier": "laravel-active-debug-code", "message": "Found an instance setting the APP_DEBUG environment variable to true. In your production environment, this should always be false. Otherwise, you risk exposing sensitive configuration values to potential attackers. Instead, set this to false.", "parent_source": "community", "severity": "`ERROR`", "languages": "PHP"}, {"identifier": "symfony-csrf-protection-disabled", "message": "CSRF protection is disabled for this configuration. This is a security risk. Make sure that it is safe or consider setting `csrf_protection` property to `true`.", "parent_source": "community", "severity": "`WARNING`", "languages": "PHP"}, {"identifier": "symfony-non-literal-redirect", "message": "The `redirect()` method does not check its destination in any way. If you redirect to a URL provided by end-users, your application may be open to the unvalidated redirects security vulnerability. Consider using literal values or an allowlist to validate URLs.", "parent_source": "community", "severity": "`WARNING`", "languages": "PHP"}, {"identifier": "symfony-permissive-cors", "message": "Access-Control-Allow-Origin response header is set to \"*\". This will disable CORS Same Origin Policy restrictions.", "parent_source": "community", "severity": "`WARNING`", "languages": "PHP"}, {"identifier": "wp-php-object-injection-audit", "message": "If the data used inside the patterns are directly used without proper sanitization, then this could lead to PHP Object Injection. Do not use these function with user-supplied input, use JSON functions instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "PHP"}, {"identifier": "wp-ajax-no-auth-and-auth-hooks-audit", "message": "These hooks allow the developer to handle the custom AJAX endpoints.\"wp_ajax_$action\" hook get fires for any authenticated user and \"wp_ajax_nopriv_$action\" hook get fires for non-authenticated users.", "parent_source": "community", "severity": "`WARNING`", "languages": "PHP"}, {"identifier": "wp-csrf-audit", "message": "Passing false or 0 as the third argument to this function will not cause the script to die, making the check useless.", "parent_source": "community", "severity": "`WARNING`", "languages": "PHP"}, {"identifier": "wp-command-execution-audit", "message": "These functions can lead to command execution if the data inside them is user-controlled. Don't use the input directly or validate the data properly before passing it to these functions.", "parent_source": "community", "severity": "`WARNING`", "languages": "PHP"}, {"identifier": "wp-open-redirect-audit", "message": "This function can be used to redirect to user supplied URLs. If user input is not sanitised or validated, this could lead to Open Redirect vulnerabilities. Use \"wp_safe_redirect()\" to prevent this kind of attack.", "parent_source": "community", "severity": "`WARNING`", "languages": "PHP"}, {"identifier": "wp-code-execution-audit", "message": "These functions can lead to code injection if the data inside them is user-controlled. Don't use the input directly or validate the data properly before passing it to these functions.", "parent_source": "community", "severity": "`WARNING`", "languages": "PHP"}, {"identifier": "wp-sql-injection-audit", "message": "Detected unsafe API methods. This could lead to SQL Injection if the used variable in the functions are user controlled and not properly escaped or sanitized. In order to prevent SQL Injection, use safe api methods like \"$wpdb->prepare\" properly or escape/sanitize the data properly.", "parent_source": "community", "severity": "`WARNING`", "languages": "PHP"}, {"identifier": "wp-file-download-audit", "message": "These functions can be used to read to content of the files if the data inside is user-controlled. Don't use the input directly or validate the data properly before passing it to these functions.", "parent_source": "community", "severity": "`WARNING`", "languages": "PHP"}, {"identifier": "wp-file-inclusion-audit", "message": "These functions can lead to Local File Inclusion (LFI) or Remote File Inclusion (RFI) if the data inside is user-controlled. Validate the data properly before passing it to these functions.", "parent_source": "community", "severity": "`WARNING`", "languages": "PHP"}, {"identifier": "wp-file-manipulation-audit", "message": "These functions can be used to delete the files if the data inside the functions are user controlled. Use these functions carefully.", "parent_source": "community", "severity": "`WARNING`", "languages": "PHP"}, {"identifier": "wp-authorisation-checks-audit", "message": "These are some of the patterns used for authorisation. Look properly if the authorisation is proper or not.", "parent_source": "community", "severity": "`WARNING`", "languages": "PHP"}, {"identifier": "ldap-bind-without-password", "message": "Detected anonymous LDAP bind. This permits anonymous users to execute LDAP statements. Consider enforcing authentication for LDAP.", "parent_source": "community", "severity": "`WARNING`", "languages": "PHP"}, {"identifier": "ftp-use", "message": "FTP allows for unencrypted file transfers. Consider using an encrypted alternative.", "parent_source": "community", "severity": "`ERROR`", "languages": "PHP"}, {"identifier": "extract-user-data", "message": "Do not call 'extract()' on user-controllable data. If you must, then you must also provide the EXTR_SKIP flag to prevent overwriting existing variables.", "parent_source": "community", "severity": "`ERROR`", "languages": "PHP"}, {"identifier": "curl-ssl-verifypeer-off", "message": "SSL verification is disabled but should not be (currently CURLOPT_SSL_VERIFYPEER= $IS_VERIFIED)", "parent_source": "community", "severity": "`ERROR`", "languages": "PHP"}, {"identifier": "php-permissive-cors", "message": "Access-Control-Allow-Origin response header is set to \"*\". This will disable CORS Same Origin Policy restrictions.", "parent_source": "community", "severity": "`WARNING`", "languages": "PHP"}, {"identifier": "openssl-cbc-static-iv", "message": "Static IV used with AES in CBC mode. Static IVs enable chosen-plaintext attacks against encrypted data.", "parent_source": "community", "severity": "`ERROR`", "languages": "PHP"}, {"identifier": "md5-loose-equality", "message": "Make sure comparisons involving md5 values are strict (use `===` not `==`) to avoid type juggling issues", "parent_source": "community", "severity": "`ERROR`", "languages": "PHP"}, {"identifier": "non-literal-header", "message": "Using user input when setting headers with `header()` is potentially dangerous. This could allow an attacker to inject a new line and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace inside `header()`: '[^\\s]+'.", "parent_source": "community", "severity": "`WARNING`", "languages": "PHP"}, {"identifier": "eval-use", "message": "Evaluating non-constant commands. This can lead to command injection.", "parent_source": "community", "severity": "`ERROR`", "languages": "PHP"}, {"identifier": "assert-use", "message": "Calling assert with user input is equivalent to eval'ing.", "parent_source": "community", "severity": "`ERROR`", "languages": "PHP"}, {"identifier": "unlink-use", "message": "Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.", "parent_source": "community", "severity": "`WARNING`", "languages": "PHP"}, {"identifier": "unserialize-use", "message": "Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution. Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).", "parent_source": "community", "severity": "`WARNING`", "languages": "PHP"}, {"identifier": "mb-ereg-replace-eval", "message": "Calling mb_ereg_replace with user input in the options can lead to arbitrary code execution. The eval modifier (`e`) evaluates the replacement argument as code.", "parent_source": "community", "severity": "`ERROR`", "languages": "PHP"}, {"identifier": "php-ssrf", "message": "The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination. Dangerous function $FUNCS with payload $DATA", "parent_source": "community", "severity": "`ERROR`", "languages": "PHP"}, {"identifier": "phpinfo-use", "message": "The 'phpinfo' function may reveal sensitive information about your environment.", "parent_source": "community", "severity": "`ERROR`", "languages": "PHP"}, {"identifier": "redirect-to-request-uri", "message": "Redirecting to the current request URL may redirect to another domain, if the current path starts with two slashes.  E.g. in https://www.example.com//attacker.com, the value of REQUEST_URI is //attacker.com, and redirecting to it will redirect to that domain.", "parent_source": "community", "severity": "`WARNING`", "languages": "PHP"}, {"identifier": "file-inclusion", "message": "Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to sensitive files being obtained by attackers. Instead, explicitly specify what to include. If that is not a viable solution, validate user input thoroughly.", "parent_source": "community", "severity": "`ERROR`", "languages": "PHP"}, {"identifier": "md5-used-as-password", "message": "It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as bcrypt. You can use `password_hash($PASSWORD, PASSWORD_BCRYPT, $OPTIONS);`.", "parent_source": "community", "severity": "`WARNING`", "languages": "PHP"}, {"identifier": "backticks-use", "message": "Backticks use may lead to command injection vulnerabilities.", "parent_source": "community", "severity": "`ERROR`", "languages": "PHP"}, {"identifier": "weak-crypto", "message": "Detected usage of weak crypto function. Consider using stronger alternatives.", "parent_source": "community", "severity": "`ERROR`", "languages": "PHP"}, {"identifier": "mcrypt-use", "message": "Mcrypt functionality has been deprecated and/or removed in recent PHP versions. Consider using Sodium or OpenSSL.", "parent_source": "community", "severity": "`ERROR`", "languages": "PHP"}, {"identifier": "exec-use", "message": "Executing non-constant commands. This can lead to command injection.", "parent_source": "community", "severity": "`ERROR`", "languages": "PHP"}, {"identifier": "preg-replace-eval", "message": "This rule has been deprecated, see https://github.com/returntocorp/semgrep-rules/issues/2506.", "parent_source": "community", "severity": "`ERROR`", "languages": "PHP"}, {"identifier": "tainted-exec", "message": "Executing non-constant commands. This can lead to command injection. You should use `escapeshellarg()` when using command.", "parent_source": "community", "severity": "`ERROR`", "languages": "PHP"}, {"identifier": "openssl-decrypt-validate", "message": "The function `openssl_decrypt` returns either a string of the decrypted data on success or `false` on failure. If the failure case is not handled, this could lead to undefined behavior in your application. Please handle the case where `openssl_decrypt` returns `false`.", "parent_source": "community", "severity": "`WARNING`", "languages": "PHP"}, {"identifier": "assert-use-audit", "message": "Calling assert with user input is equivalent to eval'ing.", "parent_source": "community", "severity": "`ERROR`", "languages": "PHP"}, {"identifier": "tainted-session", "message": "Session key based on user input risks session poisoning. The user can determine the key used for the session, and thus write any session variable. Session variables are typically trusted to be set only by the application, and manipulating the session can result in access control issues.", "parent_source": "community", "severity": "`WARNING`", "languages": "PHP"}, {"identifier": "tainted-sql-string", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label) VALUES (?, ?)\");`) or a safe library.", "parent_source": "community", "severity": "`ERROR`", "languages": "PHP"}, {"identifier": "tainted-filename", "message": "File name based on user input risks server-side request forgery.", "parent_source": "community", "severity": "`WARNING`", "languages": "PHP"}, {"identifier": "tainted-url-host", "message": "User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server runnig this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode the correct host.", "parent_source": "community", "severity": "`WARNING`", "languages": "PHP"}, {"identifier": "echoed-request", "message": "`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.", "parent_source": "community", "severity": "`ERROR`", "languages": "PHP"}, {"identifier": "tainted-object-instantiation", "message": "<- A new object is created where the class name is based on user input. This could lead to remote code execution, as it allows to instantiate any class in the application.", "parent_source": "community", "severity": "`WARNING`", "languages": "PHP"}, {"identifier": "doctrine-orm-dangerous-query", "message": "`$QUERY` Detected string concatenation with a non-literal variable in a Doctrine QueryBuilder method. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "PHP"}, {"identifier": "doctrine-dbal-dangerous-query", "message": "Detected string concatenation with a non-literal variable in a Doctrine DBAL query method. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "PHP"}, {"identifier": "bad-hexa-conversion", "message": "'Integer.toHexString()' strips leading zeroes from each byte if read byte-by-byte. This mistake weakens the hash value computed since it introduces more collisions. Use 'String.format(\"%02X\", ...)' instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Kotlin"}, {"identifier": "unencrypted-socket", "message": "This socket is not encrypted. The traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead", "parent_source": "community", "severity": "`WARNING`", "languages": "Kotlin"}, {"identifier": "use-of-md5", "message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Kotlin"}, {"identifier": "ecb-cipher", "message": "Cipher in ECB mode is detected. ECB mode produces the same output for the same input each time which allows an attacker to intercept and replay the data. Further, ECB mode does not provide any integrity checking. See https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY.", "parent_source": "community", "severity": "`WARNING`", "languages": "Kotlin"}, {"identifier": "command-injection-formatted-runtime-call", "message": "A formatted or concatenated string was detected as input to a java.lang.Runtime call. This is dangerous if a variable is controlled by user input and could result in a command injection. Ensure your variables are not controlled by users or sufficiently sanitized.", "parent_source": "community", "severity": "`ERROR`", "languages": "Kotlin"}, {"identifier": "anonymous-ldap-bind", "message": "Detected anonymous LDAP bind. This permits anonymous users to execute LDAP statements. Consider enforcing authentication for LDAP. See https://docs.oracle.com/javase/tutorial/jndi/ldap/auth_mechs.html for more information.", "parent_source": "community", "severity": "`WARNING`", "languages": "Kotlin"}, {"identifier": "no-null-cipher", "message": "NullCipher was detected. This will not encrypt anything; the cipher text will be the same as the plain text. Use a valid, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.", "parent_source": "community", "severity": "`WARNING`", "languages": "Kotlin, Scala"}, {"identifier": "cookie-missing-httponly", "message": "A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'", "parent_source": "community", "severity": "`WARNING`", "languages": "Kotlin"}, {"identifier": "use-of-weak-rsa-key", "message": "RSA keys should be at least 2048 bits based on NIST recommendation.", "parent_source": "community", "severity": "`WARNING`", "languages": "Kotlin"}, {"identifier": "defaulthttpclient-is-deprecated", "message": "DefaultHttpClient is deprecated. Further, it does not support connections using TLS1.2, which makes using DefaultHttpClient a security hazard. Use SystemDefaultHttpClient instead, which supports TLS1.2.", "parent_source": "community", "severity": "`WARNING`", "languages": "Kotlin"}, {"identifier": "cookie-missing-secure-flag", "message": "A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling '$COOKIE.setSecure(true);'", "parent_source": "community", "severity": "`WARNING`", "languages": "Kotlin"}, {"identifier": "use-of-sha1", "message": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Kotlin"}, {"identifier": "gcm-detection", "message": "GCM detected, please check that IV/nonce is not reused, an Initialization Vector (IV) is a nonce used to randomize the encryption, so that even if multiple messages with identical plaintext are encrypted, the generated corresponding ciphertexts are different.Unlike the Key, the IV usually does not need to be secret, rather it is important that it is random and unique. Certain encryption schemes the IV is exchanged in public as part of the ciphertext. Reusing same Initialization Vector with the same Key to encrypt multiple plaintext blocks allows an attacker to compare the ciphertexts and then, with some assumptions on the content of the messages, to gain important information about the data being encrypted.", "parent_source": "community", "severity": "`INFO`", "languages": "Kotlin"}, {"identifier": "robots-denied", "message": "This page denies crawlers from indexing the page. Remove the robots 'meta' tag.", "parent_source": "community", "severity": "`INFO`", "languages": "Generic"}, {"identifier": "plaintext-http-link", "message": "This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.", "parent_source": "community", "severity": "`WARNING`", "languages": "HTML"}, {"identifier": "missing-noopener", "message": "This rule has been deprecated.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "missing-noopener-or-noreferrer", "message": "This rule has been deprecated.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "missing-noreferrer", "message": "This rule has been deprecated.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "eval-detected", "message": "Detected the use of eval(...). This can introduce  a Cross-Site-Scripting (XSS) vulnerability if this  comes from user-provided input. Follow OWASP best  practices to ensure you handle XSS within a JavaScript context correct, and consider using safer APIs to evaluate  user-input such as JSON.parse(...). ", "parent_source": "community", "severity": "`WARNING`", "languages": "HTML"}, {"identifier": "insecure-document-method", "message": "Detected the use of an inner/outerHTML assignment.  This can introduce a Cross-Site-Scripting (XSS) vulnerability if this  comes from user-provided input. If you have to use a dangerous web API,  consider using a sanitization library such as DOMPurify to sanitize  the HTML before it is assigned.", "parent_source": "community", "severity": "`WARNING`", "languages": "HTML"}, {"identifier": "missing-integrity", "message": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you\u2019re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "args-os", "message": "args_os should not be used for security operations. From the docs: \"The first element is traditionally the path of the executable, but it can be set to arbitrary text, and might not even exist. This means this property should not be relied upon for security purposes.\"", "parent_source": "community", "severity": "`INFO`", "languages": "Rust"}, {"identifier": "temp-dir", "message": "temp_dir should not be used for security operations. From the docs: 'The temporary directory may be shared among users, or between processes with different privileges; thus, the creation of any files or directories in the temporary directory must use a secure method to create a uniquely named file. Creating a file or directory with a fixed or predictable name may result in \u201cinsecure temporary file\u201d security vulnerabilities.'", "parent_source": "community", "severity": "`INFO`", "languages": "Rust"}, {"identifier": "reqwest-accept-invalid", "message": "Dangerously accepting invalid TLS information", "parent_source": "community", "severity": "`WARNING`", "languages": "Rust"}, {"identifier": "current-exe", "message": "current_exe should not be used for security operations. From the docs: \"The output of this function should not be trusted for anything that might have security implications. Basically, if users can run the executable, they can change the output arbitrarily.\"", "parent_source": "community", "severity": "`INFO`", "languages": "Rust"}, {"identifier": "unsafe-usage", "message": "Detected 'unsafe' usage, please audit for secure usage", "parent_source": "community", "severity": "`INFO`", "languages": "Rust"}, {"identifier": "insecure-hashes", "message": "Detected cryptographically insecure hashing function", "parent_source": "community", "severity": "`WARNING`", "languages": "Rust"}, {"identifier": "reqwest-set-sensitive", "message": "Set sensitive flag on security headers with 'set_sensitive' to treat data with special care", "parent_source": "community", "severity": "`INFO`", "languages": "Rust"}, {"identifier": "ssl-verify-none", "message": "SSL verification disabled, this allows for MitM attacks", "parent_source": "community", "severity": "`WARNING`", "languages": "Rust"}, {"identifier": "args", "message": "args should not be used for security operations. From the docs: \"The first element is traditionally the path of the executable, but it can be set to arbitrary text, and might not even exist. This means this property should not be relied upon for security purposes.\"", "parent_source": "community", "severity": "`INFO`", "languages": "Rust"}, {"identifier": "rustls-dangerous", "message": "Dangerous client config used, ensure SSL verification", "parent_source": "community", "severity": "`WARNING`", "languages": "Rust"}, {"identifier": "nestjs-header-cors-any", "message": "Access-Control-Allow-Origin response header is set to \"*\". This will disable CORS Same Origin Policy restrictions.", "parent_source": "community", "severity": "`WARNING`", "languages": "TypeScript"}, {"identifier": "nestjs-open-redirect", "message": "Untrusted user input in {url: ...} can result in Open Redirect vulnerability.", "parent_source": "community", "severity": "`WARNING`", "languages": "TypeScript"}, {"identifier": "nestjs-header-xss-disabled", "message": "X-XSS-Protection header is set to 0. This will disable the browser's XSS Filter.", "parent_source": "community", "severity": "`WARNING`", "languages": "TypeScript"}, {"identifier": "awscdk-codebuild-project-public", "message": "CodeBuild Project $X is set to have a public URL. This will make the build results, logs, artifacts publically accessible, including builds prior to the project being public. Ensure this is acceptable for the project.", "parent_source": "community", "severity": "`WARNING`", "languages": "TypeScript"}, {"identifier": "awscdk-bucket-grantpublicaccessmethod", "message": "Using the GrantPublicAccess method on bucket contruct $X will make the objects in the bucket world accessible. Verify if this is intentional.", "parent_source": "community", "severity": "`WARNING`", "languages": "TypeScript"}, {"identifier": "awscdk-sqs-unencryptedqueue", "message": "Queue $X is missing encryption at rest. Add \"encryption: $Y.QueueEncryption.KMS\" or \"encryption: $Y.QueueEncryption.KMS_MANAGED\" to the queue props to enable encryption at rest for the queue.", "parent_source": "community", "severity": "`WARNING`", "languages": "TypeScript"}, {"identifier": "awscdk-bucket-encryption", "message": "Add \"encryption: $Y.BucketEncryption.KMS_MANAGED\" or \"encryption: $Y.BucketEncryption.S3_MANAGED\" to the bucket props for Bucket construct $X", "parent_source": "community", "severity": "`ERROR`", "languages": "TypeScript"}, {"identifier": "aws-cdk-bucket-enforcessl", "message": "Bucket $X is not set to enforce encryption-in-transit, if not explictly setting this on the bucket policy - the property \"enforceSSL\" should be set to true", "parent_source": "community", "severity": "`ERROR`", "languages": "TypeScript"}, {"identifier": "moment-deprecated", "message": "Moment is a legacy project in maintenance mode. Consider using libraries that are actively supported, e.g. `dayjs`.", "parent_source": "community", "severity": "`INFO`", "languages": "TypeScript, JavaScript"}, {"identifier": "useless-ternary", "message": "It looks like no matter how $CONDITION is evaluated, this expression returns $ANS. This is probably a copy-paste error.", "parent_source": "community", "severity": "`ERROR`", "languages": "TypeScript, JavaScript"}, {"identifier": "cors-regex-wildcard", "message": "Unescaped '.' character in CORS domain regex $CORS: $PATTERN", "parent_source": "community", "severity": "`WARNING`", "languages": "TypeScript"}, {"identifier": "angular-bypasssecuritytrust", "message": "Detected the use of `$TRUST`. This can introduce a Cross-Site-Scripting (XSS) vulnerability if this comes from user-provided input. If you have to use `$TRUST`, ensure it does not come from user-input or use the appropriate prevention mechanism e.g. input validation or sanitization depending on the context.", "parent_source": "community", "severity": "`WARNING`", "languages": "TypeScript"}, {"identifier": "define-styled-components-on-module-level", "message": "By declaring a styled component inside the render method of a react component, you are dynamically creating a new component on every render. This means that React will have to discard and re-calculate that part of the DOM subtree on each subsequent render, instead of just calculating the difference of what changed between them. This leads to performance bottlenecks and unpredictable behavior.", "parent_source": "community", "severity": "`WARNING`", "languages": "TypeScript, JavaScript"}, {"identifier": "react-props-in-state", "message": "Copying a prop into state in React -- this is bad practice as all updates to it are ignored. Instead, read props directly in your component and avoid copying props into state.", "parent_source": "community", "severity": "`WARNING`", "languages": "TypeScript, JavaScript"}, {"identifier": "react-legacy-component", "message": "Legacy component lifecycle was detected - $METHOD.", "parent_source": "community", "severity": "`WARNING`", "languages": "TypeScript, JavaScript"}, {"identifier": "react-props-spreading", "message": "It's best practice to explicitly pass props to an HTML component rather than use the spread operator. The spread operator risks passing invalid HTML props to an HTML element, which can cause console warnings or worse, give malicious actors a way to inject unexpected attributes.", "parent_source": "community", "severity": "`WARNING`", "languages": "TypeScript, JavaScript"}, {"identifier": "react-find-dom", "message": "findDOMNode is an escape hatch used to access the underlying DOM node. In most cases, use of this escape hatch is discouraged because it pierces the component abstraction.", "parent_source": "community", "severity": "`WARNING`", "languages": "TypeScript, JavaScript"}, {"identifier": "react-markdown-insecure-html", "message": "Overwriting `transformLinkUri` or `transformImageUri` to something insecure, or turning `allowDangerousHtml` on, or turning `escapeHtml` off, will open the code up to XSS vectors.", "parent_source": "community", "severity": "`WARNING`", "languages": "TypeScript, JavaScript"}, {"identifier": "react-insecure-request", "message": "Unencrypted request over HTTP detected.", "parent_source": "community", "severity": "`ERROR`", "languages": "TypeScript, JavaScript"}, {"identifier": "react-controlled-component-password", "message": "this rule has been deprecated.", "parent_source": "community", "severity": "`INFO`", "languages": "TypeScript, JavaScript"}, {"identifier": "react-no-refs", "message": "this rule has been deprecated.", "parent_source": "community", "severity": "`INFO`", "languages": "TypeScript, JavaScript"}, {"identifier": "react-jwt-in-localstorage", "message": "Storing JWT tokens in localStorage known to be a bad practice, consider moving your tokens from localStorage to a HTTP cookie.", "parent_source": "community", "severity": "`INFO`", "languages": "TypeScript, JavaScript"}, {"identifier": "react-missing-noopener", "message": "This rule has been deprecated", "parent_source": "community", "severity": "`INFO`", "languages": "TypeScript, JavaScript"}, {"identifier": "react-http-leak", "message": "this rule has been deprecated.", "parent_source": "community", "severity": "`INFO`", "languages": "TypeScript, JavaScript"}, {"identifier": "react-html-element-spreading", "message": "this rule has been deprecated.", "parent_source": "community", "severity": "`INFO`", "languages": "TypeScript, JavaScript"}, {"identifier": "react-router-redirect", "message": "this rule has been deprecated.", "parent_source": "community", "severity": "`INFO`", "languages": "TypeScript, JavaScript"}, {"identifier": "react-href-var", "message": "Detected a variable used in an anchor tag with the 'href' attribute. A malicious actor may be able to input the 'javascript:' URI, which could cause cross-site scripting (XSS). It is recommended to disallow 'javascript:' URIs within your application.", "parent_source": "community", "severity": "`WARNING`", "languages": "TypeScript, JavaScript"}, {"identifier": "react-unsanitized-property", "message": "Detection of $HTML from non-constant definition. This can inadvertently expose users to cross-site scripting (XSS) attacks if this comes from user-provided input. If you have to use $HTML, consider using a sanitization library such as DOMPurify to sanitize your HTML.", "parent_source": "community", "severity": "`WARNING`", "languages": "TypeScript, JavaScript"}, {"identifier": "react-unsanitized-method", "message": "Detection of $HTML from non-constant definition. This can inadvertently expose users to cross-site scripting (XSS) attacks if this comes from user-provided input. If you have to use $HTML, consider using a sanitization library such as DOMPurify to sanitize your HTML.", "parent_source": "community", "severity": "`WARNING`", "languages": "TypeScript, JavaScript"}, {"identifier": "react-styled-components-injection", "message": "this rule has been deprecated.", "parent_source": "community", "severity": "`INFO`", "languages": "TypeScript, JavaScript"}, {"identifier": "react-missing-noreferrer", "message": "This rule has been deprecated.", "parent_source": "community", "severity": "`INFO`", "languages": "TypeScript, JavaScript"}, {"identifier": "react-css-injection", "message": "this rule has been deprecated.", "parent_source": "community", "severity": "`INFO`", "languages": "TypeScript, JavaScript"}, {"identifier": "react-props-injection", "message": "this rule has been deprecated.", "parent_source": "community", "severity": "`INFO`", "languages": "TypeScript, JavaScript"}, {"identifier": "react-dangerouslysetinnerhtml", "message": "Detection of dangerouslySetInnerHTML from non-constant definition. This can inadvertently expose users to cross-site scripting (XSS) attacks if this comes from user-provided input. If you have to use dangerouslySetInnerHTML, consider using a sanitization library such as DOMPurify to sanitize your HTML.", "parent_source": "community", "severity": "`WARNING`", "languages": "TypeScript, JavaScript"}, {"identifier": "react-jwt-decoded-property", "message": "Property decoded from JWT token without verifying and cannot be trustworthy.", "parent_source": "community", "severity": "`INFO`", "languages": "TypeScript, JavaScript"}, {"identifier": "useselect-label-not-i18n", "message": "React useSelect() label is not internationalized - '$LABEL'. You should support different langauges in your website or app with internationalization. Instead, use packages such as `i18next` to internationalize your elements.", "parent_source": "community", "severity": "`WARNING`", "languages": "TypeScript, JavaScript"}, {"identifier": "jsx-label-not-i18n", "message": "JSX Component label not internationalized: '$MESSAGE'", "parent_source": "community", "severity": "`WARNING`", "languages": "TypeScript, JavaScript"}, {"identifier": "mui-snackbar-message", "message": "React MUI enqueueSnackbar() title is not internationalized: '$MESSAGE'", "parent_source": "community", "severity": "`WARNING`", "languages": "TypeScript, JavaScript"}, {"identifier": "jsx-not-internationalized", "message": "JSX element not internationalized: '$MESSAGE'.  You should support different languages in your website or app with internationalization. Instead, use packages such as `i18next` in order to internationalize your elements.", "parent_source": "community", "severity": "`WARNING`", "languages": "TypeScript, JavaScript"}, {"identifier": "i18next-key-format", "message": "Translation key '$KEY' should match format 'MODULE.FEATURE.*'", "parent_source": "community", "severity": "`WARNING`", "languages": "TypeScript, JavaScript"}, {"identifier": "header_xss_lusca", "message": "X-XSS-Protection header is set to 0. This will disable the browser's XSS Filter.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "header_xss_generic", "message": "X-XSS-Protection header is set to 0. This will disable the browser's XSS Filter.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "xxe_sax", "message": "Use of 'ondoctype' in 'sax' library detected. By default, 'sax' won't do anything with custom DTD entity definitions. If you're implementing a custom DTD entity definition, be sure not to introduce XML External Entity (XXE) vulnerabilities, or be absolutely sure that external entities received from a trusted source while processing XML.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript"}, {"identifier": "node_logic_bypass", "message": "User controlled data is used for application business logic decision making. This expose protected data or functionality.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "node_tls_reject", "message": "Setting 'NODE_TLS_REJECT_UNAUTHORIZED' to 0 will allow node server to accept self signed certificates and is not a secure behaviour.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "node_curl_ssl_verify_disable", "message": "SSL Certificate verification for node-curl is disabled.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "node_nosqli_injection", "message": "Untrusted user input in findOne() function can result in NoSQL Injection.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "zip_path_overwrite", "message": "Insecure ZIP archive extraction can result in arbitrary path over write and can result in code injection.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "zip_path_overwrite2", "message": "Insecure ZIP archive extraction can result in arbitrary path over write and can result in code injection.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "admzip_path_overwrite", "message": "Insecure ZIP archive extraction using adm-zip can result in arbitrary path over write and can result in code injection.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "tar_path_overwrite", "message": "Insecure TAR archive extraction can result in arbitrary path over write and can result in code injection.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "generic_cors", "message": "Access-Control-Allow-Origin response header is set to \"*\". This will disable CORS Same Origin Policy restrictions.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript"}, {"identifier": "express_cors", "message": "Access-Control-Allow-Origin response header is set to \"*\". This will disable CORS Same Origin Policy restrictions.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript"}, {"identifier": "xxe_expat", "message": "Make sure that unverified user data can not reach the XML Parser, as it can result in XML External or Internal Entity (XXE) Processing vulnerabilities.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "server_side_template_injection", "message": "Untrusted user input in templating engine's compile() function can result in Remote Code Execution via server side template injection.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "grpc_insecure_connection", "message": "Found an insecure gRPC connection. This creates a connection without encryption to a gRPC client/server. A malicious attacker could tamper with the gRPC message, which could compromise the machine.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "sandbox_code_injection", "message": "Unrusted data in `sandbox` can result in code injection.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "node_ssrf", "message": "User controlled URL in http client libraries can result in Server Side Request Forgery (SSRF).", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "hardcoded_passport_secret", "message": "Hardcoded plain text secret used for Passport Strategy. Store it properly in an environment variable.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "xss_disable_mustache_escape", "message": "Markup escaping disabled. This can be used with some template engines to escape disabling of HTML entities, which can lead to XSS attacks.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript"}, {"identifier": "wkhtmltopdf_ssrf", "message": "User controlled URL reached to `wkhtmltopdf` can result in Server Side Request Forgery (SSRF).", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "node_md5", "message": "The MD5 hashing algorithm is considered to be weak. If this is used in any sensitive operation such as password hashing, or is used to ensure data integrity (collision sensitive) then you should use a stronger hashing algorithm. For passwords, consider using `Argon2id`, `scrypt`, or `bcrypt`. For data integrity, consider using `SHA-256`", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript"}, {"identifier": "node_sha1", "message": "The SHA1 hashing algorithm is considered to be weak. If this is used in any sensitive operation such as password hashing, or is used to ensure data integrity (collision sensitive) then you should use a stronger hashing algorithm. For passwords, consider using `Argon2id`, `scrypt`, or `bcrypt`. For data integrity, consider using `SHA-256`", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript"}, {"identifier": "node_aes_ecb", "message": "AES with ECB mode is deterministic in nature and not suitable for encrypting large amount of repetitive data.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "node_weak_crypto", "message": "A weak or broken cryptographic algorithm was identified. Using these functions will introduce vulnerabilities or downgrade the security of your application.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "node_insecure_random_generator", "message": "crypto.pseudoRandomBytes()/Math.random() is a cryptographically weak random number generator.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript"}, {"identifier": "cookie_session_default", "message": "Consider changing the default session cookie name. An attacker can use it to fingerprint the server and target attacks accordingly.", "parent_source": "community", "severity": "`INFO`", "languages": "JavaScript"}, {"identifier": "cookie_session_no_secure", "message": "Default session middleware settings: `secure` not set. It ensures the browser only sends the cookie over HTTPS.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript"}, {"identifier": "cookie_session_no_samesite", "message": "Default session middleware settings: `sameSite` attribute is not configured to strict or lax. These configurations provides protection against Cross Site Request Forgery attacks.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript"}, {"identifier": "cookie_session_no_httponly", "message": "Default session middleware settings: `httpOnly` not set. It ensures the sensitive cookies cannot be accessed by client side JavaScript and helps to protect against cross-site scripting attacks.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript"}, {"identifier": "cookie_session_no_domain", "message": "Default session middleware settings: `domain` not set. It indicates the domain of the cookie; use it to compare against the domain of the server in which the URL is being requested. If they match, then check the path attribute next.", "parent_source": "community", "severity": "`INFO`", "languages": "JavaScript"}, {"identifier": "cookie_session_no_path", "message": "Default session middleware settings: `path` not set. It indicates the path of the cookie; use it to compare against the request path. If this and domain match, then send the cookie in the request.", "parent_source": "community", "severity": "`INFO`", "languages": "JavaScript"}, {"identifier": "cookie_session_no_expires", "message": "Default session middleware settings: `expires` not set. Use it to set expiration date for persistent cookies.", "parent_source": "community", "severity": "`INFO`", "languages": "JavaScript"}, {"identifier": "node_jwt_none_algorithm", "message": "Algorithm is set to none for JWT token. This can nullify the integrity of JWT signature.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "eval_nodejs", "message": "User controlled data was found to enter a dynamic execution of JavaScript. This can lead to Remote Code Injection. Where possible do not dynamically execute user-input in functions such as eval(...).", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "hardcoded_jwt_secret", "message": "Hardcoded JWT secret was found. Store it properly in an environment variable.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "jwt_express_hardcoded", "message": "Hardcoded JWT secret or private key was found. Store it properly in an environment variable.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "shelljs_os_command_exec", "message": "User controlled data in 'shelljs.exec()' can result in Remote OS Command Execution.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "node_timing_attack", "message": "String comparisons using '===', '!==', '!=' and '==' is vulnerable to timing attacks. More info: https://snyk.io/blog/node-js-timing-attack-ccc-ctf/", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript"}, {"identifier": "generic_header_injection", "message": "Untrusted user input in response header will result in HTTP Header Injection or Response Splitting Attacks.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "express_open_redirect", "message": "Untrusted user input in redirect() can result in Open Redirect vulnerability.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "express_open_redirect2", "message": "Untrusted user input in response header('Location') can result in Open Redirect vulnerability.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "node_error_disclosure", "message": "Error messages with stack traces can expose sensitive information about the application.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "generic_error_disclosure", "message": "Error messages with stack traces may expose sensitive information about the application.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript"}, {"identifier": "rate_limit_control", "message": "This application has API rate limiting controls.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript"}, {"identifier": "wkhtmltoimage_ssrf", "message": "User controlled URL reached to `wkhtmltoimage` can result in Server Side Request Forgery (SSRF).", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "node_nosqli_js_injection", "message": "Untrusted user input in MongoDB $where operator can result in NoSQL JavaScript Injection.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "express_xss", "message": "Untrusted User Input in Response will result in Reflected Cross Site Scripting Vulnerability.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "vm_runincontext_injection", "message": "Untrusted user input in `vm.runInContext()` can result in code injection.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "vm_runinnewcontext_injection", "message": "Untrusted user input in `vm.runInNewContext()` can result in code injection.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "vm_compilefunction_injection", "message": "Untrusted user input in `vm.compileFunction()` can result in code injection.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "vm_code_injection", "message": "Untrusted user input reaching `vm` can result in code injection.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "node_xxe", "message": "User controlled data in XML parsers can result in XML External or Internal Entity (XXE) Processing vulnerabilities", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "serializetojs_deserialize", "message": "User controlled data in 'unserialize()' or 'deserialize()' function can result in Object Injection or Remote Code Injection.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "node_deserialize", "message": "User controlled data in 'unserialize()' or 'deserialize()' function can result in Object Injection or Remote Code Injection.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "yaml_deserialize", "message": "User controlled data in 'yaml.load()' function can result in Remote Code Injection.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "buffer_noassert", "message": "Detected usage of noassert in Buffer API, which allows the offset the be beyond the end of the buffer. This could result in writing or reading beyond the end of the buffer.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript"}, {"identifier": "puppeteer_ssrf", "message": "If unverified user data can reach the `puppeteer` methods it can result in Server-Side Request Forgery vulnerabilities.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "jwt_not_revoked", "message": "No token revoking configured for `express-jwt`. A leaked token could still be used and unable to be revoked. Consider using function as the `isRevoked` option.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript"}, {"identifier": "anti_csrf_control", "message": "This application has anti CSRF protection which prevents cross site request forgery attacks.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript"}, {"identifier": "xss_serialize_javascript", "message": "Untrusted user input reaching `serialize-javascript` with `unsafe` attribute can cause Cross Site Scripting (XSS).", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript"}, {"identifier": "vm2_code_injection", "message": "Untrusted user input reaching `vm2` can result in code injection.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript"}, {"identifier": "vm2_context_injection", "message": "Untrusted user input reaching `vm2` sandbox can result in context injection.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "eval_require", "message": "Untrusted user input in `require()` function allows an attacker to load arbitrary code.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "host_header_injection", "message": "Using untrusted Host header for generating dynamic URLs can result in web cache and or password reset poisoning.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "generic_path_traversal", "message": "Untrusted user input in readFile()/readFileSync() can endup in Directory Traversal Attacks.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "electron_disable_websecurity", "message": "Disabling webSecurity will disable the same-origin policy and allows the execution of insecure code from any domain.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "electron_allow_http", "message": "Application can load content over HTTP and that makes the app vulnerable to Man in the middle attacks.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "electron_blink_integration", "message": "Blink's experimental features are enabled in this application. Some of the features may affect the security of the application.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript"}, {"identifier": "electron_nodejs_integration", "message": "Node integration exposes node.js APIs to the electron app and this can introduce remote code execution vulnerabilities to the application if the app is vulnerable to Cross Site Scripting (XSS).", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript"}, {"identifier": "electron_context_isolation", "message": "Disabling context isolation can introduce Prototype Pollution vulnerabilities.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript"}, {"identifier": "electron_experimental_features", "message": "Experimental features are not expected to be in production ready applications.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript"}, {"identifier": "regex_injection_dos", "message": "User controlled data in RegExp() can make the application vulnerable to layer 7 DoS.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "xxe_xml2json", "message": "Make sure that unverified user data can not reach the XML Parser, as it can result in XML External or Internal Entity (XXE) Processing vulnerabilities.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "regex_dos", "message": "Ensure that the regex used to compare with user supplied input is safe from regular expression denial of service.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript"}, {"identifier": "phantom_ssrf", "message": "If unverified user data can reach the `phantom` methods it can result in Server-Side Request Forgery vulnerabilities.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "helmet_header_check_csp", "message": "Content Security Policy header is present. More Information: https://helmetjs.github.io/docs/csp/", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript"}, {"identifier": "helmet_header_check_crossdomain", "message": "X-Permitted-Cross-Domain-Policies header set to off. More information: https://helmetjs.github.io/docs/crossdomain/", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript"}, {"identifier": "helmet_header_check_expect_ct", "message": "Expect-CT header is present. More information: https://helmetjs.github.io/docs/expect-ct/", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript"}, {"identifier": "helmet_header_feature_policy", "message": "Feature-Policy header is present. More information: https://helmetjs.github.io/docs/feature-policy/", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript"}, {"identifier": "helmet_header_frame_guard", "message": "X-Frame-Options header is present. More information: https://helmetjs.github.io/docs/frameguard/", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript"}, {"identifier": "helmet_header_dns_prefetch", "message": "X-DNS-Prefetch-Control header is present and DNS Prefetch Control is enabled. More information: https://helmetjs.github.io/docs/dns-prefetch-control/", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript"}, {"identifier": "helmet_header_x_powered_by", "message": "Default X-Powered-By is removed or modified. More information: https://helmetjs.github.io/docs/hide-powered-by/", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript"}, {"identifier": "helmet_header_hsts", "message": "HSTS header is present. More information: https://helmetjs.github.io/docs/hsts/", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript"}, {"identifier": "helmet_header_ienoopen", "message": "X-Download-Options header is present. More information: https://helmetjs.github.io/docs/ienoopen/", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript"}, {"identifier": "helmet_header_nosniff", "message": "Content-Type-Options header is present. More information: https://helmetjs.github.io/docs/dont-sniff-mimetype/", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript"}, {"identifier": "helmet_header_referrer_policy", "message": "Referrer-Policy header is present. More information: https://helmetjs.github.io/docs/referrer-policy/", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript"}, {"identifier": "helmet_header_xss_filter", "message": "X-XSS-Protection header is present. More information: https://helmetjs.github.io/docs/xss-filter/", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript"}, {"identifier": "jwt_exposed_credentials", "message": "Password is exposed through JWT token payload. This is not encrypted and the password could be compromised. Do not store passwords in JWT tokens.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "jwt_exposed_data", "message": "The object is passed strictly to jose.JWT.sign(...). Make sure that sensitive information is not exposed through JWT token payload.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript"}, {"identifier": "express_bodyparser", "message": "POST Request to Express Body Parser 'bodyParser()' can create Temporary files and consume space.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "node_sqli_injection", "message": "Untrusted input concatenated with raw SQL query can result in SQL Injection.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "helmet_feature_disabled", "message": "One or more Security Response header is explicitly disabled in Helmet.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript"}, {"identifier": "node_entity_expansion", "message": "User controlled data in XML Parsers can result in XML Internal Entity Processing vulnerabilities like in DoS.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "layer7_object_dos", "message": "Layer7 Denial of Service. Looping over user controlled objects can result in DoS.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "playwright_ssrf", "message": "If unverified user data can reach the `puppeteer` methods it can result in Server-Side Request Forgery vulnerabilities.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "join_resolve_path_traversal", "message": "Path constructed with user input can result in Path Traversal. Ensure that user input does not reach `join()` or `resolve()`.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript"}, {"identifier": "handlebars_safestring", "message": "Handlebars SafeString will not escape the data passed through it. Untrusted user input passing through SafeString can cause XSS.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "handlebars_noescape", "message": "Disabling Escaping in Handlebars is not a secure behaviour. This can introduce XSS vulnerabilities.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "squirrelly_autoescape", "message": "Handlebars SafeString will not escape the data passed through it. Untrusted user input passing through SafeString can cause XSS.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "node_xpath_injection", "message": "User controlled data in xpath.parse() can result in XPATH injection vulnerability.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "generic_os_command_exec", "message": "User controlled data in 'child_process.exec()' can result in Remote OS Command Execution.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "node_password", "message": "A hardcoded password in plain text is identified. Store it properly in an environment variable.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "node_secret", "message": "A hardcoded secret is identified. Store it properly in an environment variable.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "node_username", "message": "A hardcoded username in plain text is identified. Store it properly in an environment variable.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "node_api_key", "message": "A hardcoded API Key is identified. Store it properly in an environment variable.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "viewstate-crypt", "message": "Web Forms controls use hidden base64 encoded fields to store state information. If sensitive information is stored there it may be leaked to the client side.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "viewstate-mac", "message": "The enableViewStateMac is disabled in configuration file.", "parent_source": "community", "severity": "`ERROR`", "languages": "Generic"}, {"identifier": "react_html_parser", "message": "Untrusted user input in rendering reactHTMLParser can lead to an XSS", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript, TypeScript"}, {"identifier": "owasp.java.xxe.javax.xml.parsers.SAXParserFactory", "message": "SAXParserFactory being instantiated without calling the setFeature functions that are generally used for disabling entity processing", "parent_source": "community", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "owasp.java.xxe.possible.import.statements", "message": "Non-exhaustive list of Libraries that provide functionality to accept XML as an input", "parent_source": "community", "severity": "`INFO`", "languages": "Java"}, {"identifier": "owasp.java.xxe.javax.xml.stream.XMLInputFactory", "message": "XMLInputFactory being instantiated without calling the setProperty functions that are generally used for disabling entity processing", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "owasp.java.xxe.org.dom4j.io.SAXReader", "message": "SAXReader being instantiated without calling the setFeature functions that are generally used for disabling entity processing", "parent_source": "community", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "owasp.java.xxe.org.xml.sax.XMLReader", "message": "XMLReader being instantiated without calling the setFeature functions that are generally used for disabling entity processing", "parent_source": "community", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "owasp.java.xxe.org.apache.commons.digester3.Digester", "message": "Digester being instantiated without calling the setFeature functions that are generally used for disabling entity processing", "parent_source": "community", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "owasp.java.xxe.org.jdom2.input.SAXBuilder", "message": "SAXBuilder being instantiated without calling the setFeature functions that are generally used for disabling entity processing", "parent_source": "community", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "owasp.java.xxe.javax.xml.parsers.DocumentBuilderFactory", "message": "DocumentBuilderFactory being instantiated without calling the setFeature functions that are generally used for disabling entity processing, which can allow for XXE vulnerabilities", "parent_source": "community", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "owasp.java.ssrf.java.net.url", "message": "A parameter being passed directly into java.net.URL function most likely lead to SSRF.", "parent_source": "community", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "owasp.java.ssrf.org.apache.commons.httpclient", "message": "A parameter being passed directly into HttpClient functions most likely lead to SSRF.", "parent_source": "community", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "owasp.java.ssrf.org.apache.http.impl.client.CloseableHttpClient", "message": "A parameter being passed directly into CloseableHttpClient functions most likely lead to SSRF.", "parent_source": "community", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "owasp.java.ssrf.possible.import.statements", "message": "Non-exhaustive list of Libraries that provide functionality to accept URL as a parameter", "parent_source": "community", "severity": "`INFO`", "languages": "Java"}, {"identifier": "insecure-pickle-use", "message": "The Python 'pickle' module is not secure against maliciously constructed input", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-eval-use", "message": "The Python 'eval' function is not secure against maliciously constructed input", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-exec-use", "message": "The Python 'exec' function is not secure against maliciously constructed input", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-os-exec-use", "message": "The Python 'os' execution functions are not secure against maliciously constructed input", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-os-temp-use", "message": "The Python 'os' tempnam|tmpnam functions are vulnerable to symlink attacks", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-xml-use", "message": "Insecure XML parsing functionality, prefer 'defusedxml'", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-yaml-use", "message": "The Python 'yaml' module's `load`, `load_all`, `dump`, and `dump_all` functions are not secure against maliciously constructed input", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-compile-use", "message": "The Python 'compile' function is not secure against maliciously constructed input", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-zipfile-use", "message": "The Python 'zipfile' extract|extractall functions are vulnerable to arbitrary file overwrites", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-tarfile-use", "message": "The Python 'tarfile' extract|extractall functions are vulnerable to arbitrary file overwrites", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-subprocess-use", "message": "The Python 'subprocess' module called with 'shell=True' may allow for shell injection", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-dl-use", "message": "The Python 'dl' module may cause segmentation faults or other incorrect behavior", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-gl-use", "message": "The Python 'gl' module may cause core dumps or other unsafe behavior", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-shelve-use", "message": "The Python 'shelve' module is not secure against maliciously constructed input", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-marshal-use", "message": "The Python 'marshal' module is not secure against maliciously constructed input", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-tempfile-use", "message": "The Python 'tempfile.mktemp' function allows for race conditions", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-ssl-use", "message": "Weak or insecure 'ssl' module usage", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-requests-use", "message": "The Python third-party 'requests' module used with SSL verification disabled", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-simplexmlrpcserver-use", "message": "The Python 'xmlrpc' module used with 'allow_dotted_names' is not secure against maliciously constructed input", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-commands-use", "message": "The Python 'commands' module is not secure against maliciously constructed input", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-popen2-use", "message": "The Python 'popen2' module is not secure against maliciously constructed input", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-duo-client-use", "message": "The Python third-party 'duo_client' module used with SSL verfication disabled", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-onelogin-attribute-use", "message": "Weak or insecure 'onelogin' module attribute usage", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-hashlib-use", "message": "Weak or insecure 'hashlib' module usage", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-urllib3-warnings-use", "message": "Warnings disabled on insecure network requests with Python 'urllib3' module", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-urllib3-connections-use", "message": "The Python 'urllib3' module used with SSL verfication disabled", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-pycrypto-use", "message": "The Python third-party 'Crypto' module is unmaintained and has known vulnerabilities and exploits", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-cryptography-attribute-use", "message": "Weak or insecure 'cryptography' module attribute usage", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-xmlsec-attribute-use", "message": "Weak or insecure 'xmlsec' module attribute usage", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-itsdangerous-use", "message": "The Python third-party 'itsdangerous' module used with 'none' signing algorithm", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "pg-sqli", "message": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `conn.exec_params('SELECT $1 AS a, $2 AS b, $3 AS c', [1, 2, nil])`", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "tainted-deserialization", "message": "Deserialization of a string tainted by `event` object found. Objects in Ruby can be serialized into strings, then later loaded from strings. However, uses of `load` can cause remote code execution. Loading user input with MARSHAL, YAML or CSV can potentially be dangerous. If you need to deserialize untrusted data, you should use JSON as it is only capable of returning 'primitive' types such as strings, arrays, hashes, numbers and nil.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "tainted-sql-string", "message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.", "parent_source": "community", "severity": "`ERROR`", "languages": "Ruby"}, {"identifier": "mysql2-sqli", "message": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use sanitize statements like so: `escaped = client.escape(user_input)`", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "activerecord-sqli", "message": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `Example.find_by_sql [\"SELECT title FROM posts WHERE author = ? AND created > ?\", author_id, start_date]`", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "sequel-sqli", "message": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `DB['select * from items where name = ?', name]`", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "ruby-rails-performance-indexes-are-beneficial", "message": "The $COLUMN column appears to be a foreign key. Would it benefit from an index? Having an index can improve performance.", "parent_source": "community", "severity": "`INFO`", "languages": "Ruby"}, {"identifier": "rails-no-render-after-save", "message": "Found a call to `render $T` after calling `$T.save`. Do not call `render` after calling `save` on an ActiveRecord object. Reloading the page will cause the state-changing operation to be repeated which may cause undesirable side effects. Use `redirect_to` instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "check-regex-dos", "message": "Found a potentially user-controllable argument in the construction of a regular expressions. This may result in excessive resource consumption when applied to certain inputs, or when the user is allowed to control the match target. Avoid allowing users to specify regular expressions processed by the server. If you must support user-controllable input in a regular expression, use an allow-list to restrict the expressions users may supply to limit catastrophic backtracking.", "parent_source": "community", "severity": "`ERROR`", "languages": "Ruby"}, {"identifier": "check-rails-session-secret-handling", "message": "Found a string literal assignment to a Rails session secret `$KEY`. Do not commit secret values to source control! Any user in possession of this value may falsify arbitrary session data in your application. Read this value from an environment variable, KMS, or file on disk outside of source control.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "check-render-local-file-include", "message": "Found request parameters in a call to `render`. This can allow end users to request arbitrary local files which may result in leaking sensitive information persisted on disk. Where possible, avoid letting users specify template paths for `render`. If you must allow user input, use an allow-list of known templates or normalize the user-supplied value with `File.basename(...)`.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "check-cookie-store-session-security-attributes", "message": "Found a Rails `cookie_store` session configuration setting the `$KEY` attribute to `false`. If using a cookie-based session store, the HttpOnly and Secure flags should be set.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "check-before-filter", "message": "Disabled-by-default Rails controller checks make it much easier to introduce access control mistakes. Prefer an allowlist approach with `:only => [...]` rather than `except: => [...]`", "parent_source": "community", "severity": "`ERROR`", "languages": "Ruby"}, {"identifier": "check-http-verb-confusion", "message": "Found an improperly constructed control flow block with `request.get?`. Rails will route HEAD requests as GET requests but they will fail the `request.get?` check, potentially causing unexpected behavior unless an `elif` condition is used.", "parent_source": "community", "severity": "`ERROR`", "languages": "Ruby"}, {"identifier": "check-sql", "message": "Found potential SQL injection due to unsafe SQL query construction via $X. Where possible, prefer parameterized queries.", "parent_source": "community", "severity": "`ERROR`", "languages": "Ruby"}, {"identifier": "check-rails-secret-yaml", "message": "$VALUE Found a string literal assignment to a production Rails session secret in `secrets.yaml`. Do not commit secret values to source control! Any user in possession of this value may falsify arbitrary session data in your application. Read this value from an environment variable, KMS, or file on disk outside of source control.", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "check-unsafe-reflection-methods", "message": "Found user-controllable input to a reflection method. This may allow a user to alter program behavior and potentially execute arbitrary instructions in the context of the process. Do not provide arbitrary user input to `tap`, `method`, or `to_proc`", "parent_source": "community", "severity": "`ERROR`", "languages": "Ruby"}, {"identifier": "check-redirect-to", "message": "Found potentially unsafe handling of redirect behavior $X. Do not pass `params` to `redirect_to` without the `:only_path => true` hash value.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "check-permit-attributes-high", "message": "Calling `permit` on security-critical properties like `$ATTRIBUTE` may leave your application vulnerable to mass assignment.", "parent_source": "community", "severity": "`ERROR`", "languages": "Ruby"}, {"identifier": "check-unscoped-find", "message": "Found an unscoped `find(...)` with user-controllable input. If the ActiveRecord model being searched against is sensitive, this may lead to Insecure Direct Object Reference (IDOR) behavior and allow users to read arbitrary records. Scope the find to the current user, e.g. `current_user.accounts.find(params[:id])`.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "check-unsafe-reflection", "message": "Found user-controllable input to Ruby reflection functionality. This allows a remote user to influence runtime behavior, up to and including arbitrary remote code execution. Do not provide user-controllable input to reflection functionality. Do not call symbol conversion on user-controllable input.", "parent_source": "community", "severity": "`ERROR`", "languages": "Ruby"}, {"identifier": "check-dynamic-render-local-file-include", "message": "Found request parameters in a call to `render` in a dynamic context. This can allow end users to request arbitrary local files which may result in leaking sensitive information persisted on disk.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "check-send-file", "message": "Allowing user input to `send_file` allows a malicious user to potentially read arbitrary files from the server. Avoid accepting user input in `send_file` or normalize with `File.basename(...)`", "parent_source": "community", "severity": "`ERROR`", "languages": "Ruby"}, {"identifier": "check-permit-attributes-medium", "message": "Calling `permit` on security-critical properties like `$ATTRIBUTE` may leave your application vulnerable to mass assignment.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "check-reverse-tabnabbing", "message": "Setting an anchor target of `_blank` without the `noopener` or `noreferrer` attribute allows reverse tabnabbing on Internet Explorer, Opera, and Android Webview.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "check-secrets", "message": "Found a Brakeman-style secret - a variable with the name password/secret/api_key/rest_auth_site_key and a non-empty string literal value.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "check-validation-regex", "message": "$V Found an incorrectly-bounded regex passed to `validates_format_of` or `validate ... format => ...`. Ruby regex behavior is multiline by default and lines should be terminated by `\\A` for beginning of line and `\\Z` for end of line, respectively.", "parent_source": "community", "severity": "`ERROR`", "languages": "Ruby"}, {"identifier": "quote-table-name", "message": "This rule is deprecated.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "number-to-currency-erb", "message": "This rule is deprecated.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "avoid-tainted-file-access", "message": "Using user input when accessing files is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "rails-check-header-dos", "message": "This rule is deprecated.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "mail-to", "message": "This rule is deprecated.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "avoid-tainted-shell-call", "message": "Using user input when accessing files is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.", "parent_source": "community", "severity": "`ERROR`", "languages": "Ruby"}, {"identifier": "rails-skip-forgery-protection", "message": "This call turns off CSRF protection allowing CSRF attacks against the application", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "avoid-session-manipulation", "message": "This gets data from session using user inputs. A malicious user may be able to retrieve information from your session that you didn't intend them to. Do not use user input as a session key.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "detailed-exceptions", "message": "Found that the setting for providing detailed exception reports in Rails is set to true. This can lead to information exposure, where sensitive system or internal information is displayed to the end user. Instead, turn this setting off.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "dynamic-finders", "message": "This rule is deprecated.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "mail-to-erb", "message": "This rule is deprecated.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "number-to-currency", "message": "This rule is deprecated.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "rails-check-render-dos", "message": "This rule is deprecated.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "mime-type-dos", "message": "This rule is deprecated.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "rails-check-page-caching-cve", "message": "This rule is deprecated.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "rails-check-page-caching-gem", "message": "This rule is deprecated.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "avoid-tainted-ftp-call", "message": "Using user input when accessing files is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "rails-check-render-dos", "message": "This rule is deprecated.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "rails-check-response-splitting", "message": "This rule is deprecated.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "avoid-tainted-http-request", "message": "Using user input when accessing files is potentially dangerous. A malicious actor could use this to modify or access files they have no right to.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "xml-external-entities-enabled", "message": "This application is explicitly enabling external entities enabling an attacker to inject malicious XML to exploit an XML External Entities (XXE) vulnerability. This could let the attacker cause a denial-of-service by forcing the parser to parse large files, or at worst, let the attacker download sensitive files or user data. Use the built-in Rails XML parser, REXML, instead.", "parent_source": "community", "severity": "`ERROR`", "languages": "Ruby"}, {"identifier": "libxml-backend", "message": "This application is using LibXML as the XML backend. LibXML can be vulnerable to XML External Entities (XXE) vulnerabilities. Use the built-in Rails XML parser, REXML, instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "ruby-pg-sqli", "message": "Detected string concatenation with a non-literal variable in a pg Ruby SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized queries like so: `conn.exec_params('SELECT $1 AS a, $2 AS b, $3 AS c', [1, 2, nil])` And you can use prepared statements with `exec_prepared`.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "avoid-render-dynamic-path", "message": "Avoid rendering user input. It may be possible for a malicious user to input a path that lets them access a template they shouldn't. To prevent this, check dynamic template paths against a predefined allowlist to make sure it's an allowed template.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "avoid-link-to", "message": "This code includes user input in `link_to`. In Rails 2.x, the body of `link_to` is not escaped. This means that user input which reaches the body will be executed when the HTML is rendered. Even in other versions, values starting with `javascript:` or `data:` are not escaped. It is better to create and use a safer function which checks the body argument.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "avoid-raw", "message": "'raw()' bypasses HTML escaping. If external data can reach here, this exposes your application to cross-site scripting (XSS) attacks. If you must do this, construct individual strings and mark them as safe for HTML rendering with `html_safe()`.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "avoid-redirect", "message": "When a redirect uses user input, a malicious user can spoof a website under a trusted URL or access restricted parts of a site. When using user-supplied values, sanitize the value before using it for the redirect.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "avoid-html-safe", "message": "'html_safe()' does not make the supplied string safe. 'html_safe()' bypasses HTML escaping. If external data can reach here, this exposes your application to cross-site scripting (XSS) attacks. Ensure no external data reaches here.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "avoid-render-inline", "message": "'render inline: ...' renders an entire ERB template inline and is dangerous. If external data can reach here, this exposes your application to server-side template injection (SSTI) or cross-site scripting (XSS) attacks. Instead, consider using a partial or another safe rendering method.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "avoid-render-text", "message": "'render text: ...' actually sets the content-type to 'text/html'. If external data can reach here, this exposes your application to cross-site scripting (XSS) attacks. Instead, use 'render plain: ...' to render non-HTML text.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "avoid-content-tag", "message": "'content_tag()' bypasses HTML escaping for some portion of the content. If external data can reach here, this exposes your application to cross-site scripting (XSS) attacks. Ensure no external data reaches here. If you must do this, create your HTML manually and use 'html_safe'. Ensure no external data enters the HTML-safe string!", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "avoid-default-routes", "message": "Default routes are enabled in this routes file. This means any public method on a controller can be called as an action. It is very easy to accidentally expose a method you didn't mean to. Instead, remove this line and explicitly include all routes you intend external users to follow.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "manual-template-creation", "message": "Detected manual creation of an ERB template. Manual creation of templates may expose your application to server-side template injection (SSTI) or cross-site scripting (XSS) attacks if user input is used to create the template. Instead, create a '.erb' template file and use 'render'.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "unquoted-attribute", "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"<%= expr %>\".", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "avoid-raw", "message": "'raw' renders raw HTML, as the name implies. This means that normal HTML escaping is bypassed. If user data can be controlled here, this exposes your application to cross-site scripting (XSS). If you need to do this, be sure to correctly sanitize the data using a library such as DOMPurify.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "avoid-html-safe", "message": "'html_safe' renders raw HTML. This means that normal HTML escaping is bypassed. If user data can be controlled here, this exposes your application to cross-site scripting (XSS). If you need to do this, be sure to correctly sanitize the data using a library such as DOMPurify.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "alias-for-html-safe", "message": "The syntax `<%== ... %>` is an alias for `html_safe`. This means the content inside these tags will be rendered as raw HTML. This may expose your application to cross-site scripting. If you need raw HTML, prefer using the more explicit `html_safe` and be sure to correctly sanitize variables using a library such as DOMPurify.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "dangerous-link-to", "message": "Detected a template variable used in 'link_to'. This will generate dynamic data in the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: 'link_to \"Here\", \"/\"+@link'. You may also consider setting the Content Security Policy (CSP) header.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "var-in-script-tag", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need to do this, use `escape_javascript` or its alias, `j`. However, this will not protect from XSS in all circumstances; see the references for more information. Consider placing this value in the HTML portion (outside of a script tag).", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "avoid-content-tag", "message": "'content_tag' exhibits unintuitive escaping behavior and may accidentally expose your application to cross-site scripting. If using Rails 2, only attribute values are escaped. If using Rails 3, content and attribute values are escaped. Tag and attribute names are never escaped. Because of this, it is recommended to use 'html_safe' if you must render raw HTML data.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "var-in-href", "message": "Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: href='/<%= link =>'. You may also consider setting the Content Security Policy (CSP) header.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "raw-html-format", "message": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. Use the `render template` and make template files which will safely render HTML instead, or inspect that the HTML is absolutely rendered safely with a function like `sanitize`.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "tainted-sql-string", "message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as ActiveRecord which will protect your queries.", "parent_source": "community", "severity": "`ERROR`", "languages": "Ruby"}, {"identifier": "tainted-url-host", "message": "User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server runnig this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Use the `ssrf_filter` gem and guard the url construction with `SsrfFilter(...)`, or create an allowlist for approved hosts.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "rails-check-json-parsing-rce", "message": "This rule is deprecated.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "divide-by-zero", "message": "Detected a possible ZeroDivisionError.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "bad-deserialization-yaml", "message": "Unsafe deserialization from YAML. Objects in Ruby can be serialized into strings, then later loaded from strings. However, uses of load and object_load can cause remote code execution. Loading user input with YAML can potentially be dangerous. Use JSON in a secure fashion instead. However, loading YAML from a static file is not dangerous and should not be flagged.", "parent_source": "community", "severity": "`ERROR`", "languages": "Ruby"}, {"identifier": "json-entity-escape", "message": "Checks if HTML escaping is globally disabled for JSON output. This could lead to XSS.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "json-encoding", "message": "This rule is deprecated.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "hardcoded-secret-rsa-passphrase", "message": "Found the use of an hardcoded passphrase for RSA. The passphrase can be easily discovered, and therefore should not be stored in source-code. It is recommended to remove the passphrase from source-code, and use system environment variables or a restricted configuration file.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "dangerous-syscall", "message": "'syscall' is essentially unsafe and unportable. The DL (https://apidock.com/ruby/Fiddle) library is preferred for safer and a bit more portable programming.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "missing-csrf-protection", "message": "Detected controller which does not enable cross-site request forgery protections using 'protect_from_forgery'. Add 'protect_from_forgery :with => :exception' to your controller class.", "parent_source": "community", "severity": "`ERROR`", "languages": "Ruby"}, {"identifier": "ruby-eval", "message": "Use of eval with user-controllable input detected. This can lead  to attackers running arbitrary code. Ensure external data does not  reach here, otherwise this is a security vulnerability. Consider  other ways to do this without eval.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "model-attr-accessible", "message": "Checks for dangerous permitted attributes that can lead to mass assignment vulnerabilities. Query parameters allowed using permit and attr_accessible are checked for allowance of dangerous attributes admin, banned, role, and account_id. Also checks for usages of params.permit!, which allows everything. Fix: don't allow admin, banned, role, and account_id using permit or attr_accessible.", "parent_source": "community", "severity": "`ERROR`", "languages": "Ruby"}, {"identifier": "weak-hashes-sha1", "message": "Should not use SHA1 to generate hashes. There is a proven SHA1 hash collision by Google, which could lead to vulnerabilities. Use SHA256, SHA3 or other hashing functions instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "cookie-serialization", "message": "Checks if code allows cookies to be deserialized using Marshal. If the attacker can craft a valid cookie, this could lead to remote code execution. The hybrid check is just to warn users to migrate to :json for best practice.", "parent_source": "community", "severity": "`ERROR`", "languages": "Ruby"}, {"identifier": "insufficient-rsa-key-size", "message": "The RSA key size $SIZE is insufficent by NIST standards. It is recommended to use a key length of 2048 or higher.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "filter-skipping", "message": "Checks for use of action in Ruby routes. This can cause Rails to render an arbitrary view if an attacker creates an URL accurately. Affects 3.0 applications. Can avoid the vulnerability by providing additional constraints.", "parent_source": "community", "severity": "`ERROR`", "languages": "Ruby"}, {"identifier": "ssl-mode-no-verify", "message": "Detected SSL that will accept an unverified connection. This makes the connections susceptible to man-in-the-middle attacks. Use 'OpenSSL::SSL::VERIFY_PEER' instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "mass-assignment-vuln", "message": "Checks for calls to without_protection during mass assignment (which allows record creation from hash values). This can lead to users bypassing permissions protections. For Rails 4 and higher, mass protection is on by default. Fix: Don't use :without_protection => true. Instead, configure attr_accessible to control attribute access.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "weak-hashes-md5", "message": "Should not use md5 to generate hashes. md5 is proven to be vulnerable through the use of brute-force attacks. Could also result in collisions, leading to potential collision attacks. Use SHA256 or other hashing functions instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "yaml-parsing", "message": "This rule is deprecated.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "dangerous-open", "message": "Detected non-static command inside 'open'. Audit the input to 'open'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "dangerous-open3-pipeline", "message": "Detected non-static command inside $PIPE. Audit the input to '$PIPE'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "mass-assignment-protection-disabled", "message": "Mass assignment protection disabled for '$MODEL'. This could permit assignment to sensitive model fields without intention. Instead, use 'attr_accessible' for the model or disable mass assigment using 'config.active_record.whitelist_attributes = true'. ':without_protection => true' must be removed for this to take effect.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "timing-attack", "message": "This rule is deprecated.", "parent_source": "community", "severity": "`ERROR`", "languages": "Ruby"}, {"identifier": "hardcoded-http-auth-in-controller", "message": "Detected hardcoded password used in basic authentication in a controller class. Including this password in version control could expose this credential. Consider refactoring to use environment variables or configuration files.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "jruby-xml", "message": "This rule is deprecated.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "dangerous-exec", "message": "Detected non-static command inside $EXEC. Audit the input to '$EXEC'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "create-with", "message": "Checks for strong parameter bypass through usage of create_with. Create_with bypasses strong parameter protection, which could allow attackers to set arbitrary attributes on models. To fix this vulnerability, either remove all create_with calls or use the permit function to specify tags that are allowed to be set.", "parent_source": "community", "severity": "`ERROR`", "languages": "Ruby"}, {"identifier": "bad-deserialization", "message": "Checks for unsafe deserialization. Objects in Ruby can be serialized into strings, then later loaded from strings. However, uses of load and object_load can cause remote code execution. Loading user input with MARSHAL or CSV can potentially be dangerous. Use JSON in a secure fashion instead.", "parent_source": "community", "severity": "`ERROR`", "languages": "Ruby"}, {"identifier": "model-attributes-attr-protected", "message": "This rule is deprecated.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "force-ssl-false", "message": "Checks for configuration setting of force_ssl to false. Force_ssl forces usage of HTTPS, which could lead to network interception of unencrypted application traffic. To fix, set config.force_ssl = true.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "dangerous-subshell", "message": "Detected non-static command inside `...`. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "md5-used-as-password", "message": "It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Instead, use a suitable password hashing function such as bcrypt. You can use the `bcrypt` gem.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "model-attributes-attr-accessible", "message": "Checks for models that do not use attr_accessible. This means there is no limiting of which variables can be manipulated through mass assignment. For newer Rails applications, parameters should be allowlisted using strong parameters. For older Rails versions, they should be allowlisted using strong_attributes.", "parent_source": "community", "severity": "`ERROR`", "languages": "Ruby"}, {"identifier": "bad-deserialization-env", "message": "Checks for unsafe deserialization. Objects in Ruby can be serialized into strings, then later loaded from strings. However, uses of load and object_load can cause remote code execution. Loading user input with MARSHAL or CSV can potentially be dangerous. Use JSON in a secure fashion instead.", "parent_source": "community", "severity": "`ERROR`", "languages": "Ruby"}, {"identifier": "nested-attributes", "message": "This rule is deprecated.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "file-disclosure", "message": "Special requests can determine whether a file exists on a filesystem that's outside the Rails app's root directory. To fix this, set config.serve_static_assets = false.", "parent_source": "community", "severity": "`ERROR`", "languages": "Ruby"}, {"identifier": "nested-attributes-bypass", "message": "This rule is deprecated.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "bad-send", "message": "Checks for unsafe use of Object#send, try, __send__, and public_send. These only account for unsafe use of a method, not target. This can lead to arbitrary calling of exit, along with arbitrary code execution. Please be sure to sanitize input in order to avoid this.", "parent_source": "community", "severity": "`ERROR`", "languages": "Ruby"}, {"identifier": "ruby-jwt-exposed-credentials", "message": "Password is exposed through JWT token payload. This is not encrypted and the password could be compromised. Do not store passwords in JWT tokens.", "parent_source": "community", "severity": "`ERROR`", "languages": "Ruby"}, {"identifier": "ruby-jwt-hardcoded-secret", "message": "Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)", "parent_source": "community", "severity": "`ERROR`", "languages": "Ruby"}, {"identifier": "ruby-jwt-none-alg", "message": "Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.", "parent_source": "community", "severity": "`ERROR`", "languages": "Ruby"}, {"identifier": "ruby-jwt-decode-without-verify", "message": "Detected the decoding of a JWT token without a verify step. JWT tokens must be verified before use, otherwise the token's integrity is unknown. This means a malicious actor could forge a JWT token with any claims.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "ruby-jwt-exposed-data", "message": "The object is passed strictly to jsonwebtoken.sign(...) Make sure that sensitive information is not exposed through JWT token payload.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "half-written-crypto-example", "message": "A lav crypto hun", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript"}, {"identifier": "metadata-subcategory", "message": "This Semgrep rule is missing a valid 'subcategory' field in the 'metadata'. which should be either audit, vuln, or guardrail. For more information visit  https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "message-whitespace-check", "message": "It looks like you have an additional space in your rule message, this can look awkward in the finding output, please remove the additional whitespace!", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "libxml2-xxe-taint", "message": "The application is using an XML parser that has not been safely configured. This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled input. An attacker can include document type definitions (DTDs) which can interact with internal or external hosts. XXE can lead to other vulnerabilities, such as Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request forgery (SSRF), depending on the application configuration. An attacker can also use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also known as a `Billion Laughs Attack`. The best defense against XXE is to have an XML parser that supports disabling DTDs. Limiting the use of external entities from the start can prevent the parser from being used to process untrusted XML files. Reducing dependencies on external resources is also a good practice for performance reasons. It is difficult to guarantee that even a trusted XML file on your server or during transmission has not been tampered with by a malicious third-party. ", "parent_source": "community", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "other-rule", "message": "", "parent_source": "community", "severity": "`INFO`", "languages": "Generic"}, {"identifier": "missing-message-field", "message": "This rule does not have a message. Semgrep requires that rules have a message. Include a message to explain what the rule does. Consider writing a message that explains why this is an issue and how to fix it.", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "yaml-key-indentation-check-example", "message": "There should be a finding here, because the YAML fuses the hyphen and the key together! ", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript"}, {"identifier": "metadata-cwe", "message": "$...CWE The cwe tag in rule metadata should always be in the format \"CWE-000: Title\".", "parent_source": "community", "severity": "`ERROR`", "languages": "YAML"}, {"identifier": "metadata-incorrect-option", "message": "It looks like $KEY is not in the default list of expected options, if this is a new key update this rule", "parent_source": "community", "severity": "`INFO`", "languages": "YAML"}, {"identifier": "metadata-owasp", "message": "The `owasp` tag in Semgrep rule metadata should start with the format \"A00:YYYY\", where A00 is the OWASP top ten number and YYYY is the OWASP top ten year.", "parent_source": "community", "severity": "`ERROR`", "languages": "JSON, YAML"}, {"identifier": "express-sandbox-code-injection", "message": "Make sure that unverified user data can not reach `sandbox`.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "metadata-impact-incorrect-value", "message": "Semgrep rule impact: $VALUE detected, but the value must be LOW, MEDIUM, or HIGH. For more information visit:  https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "example-1", "message": "Example", "parent_source": "community", "severity": "`ERROR`", "languages": "JSON, YAML"}, {"identifier": "example-2", "message": "Example", "parent_source": "community", "severity": "`ERROR`", "languages": "JSON, YAML"}, {"identifier": "metadata-likelihood-incorrect-value", "message": "Semgrep rule likelihood: $VALUE detected, but the value must be LOW, MEDIUM, or HIGH. For more information visit:  https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "metadata-category", "message": "This Semgrep rule is missing a valid 'category' field in the 'metadata'. 'category' must be one of 'security', 'correctness', 'best-practice', 'performance', 'maintainability', or 'portability'.", "parent_source": "community", "severity": "`INFO`", "languages": "YAML"}, {"identifier": "example-1", "message": "Example", "parent_source": "community", "severity": "`ERROR`", "languages": "JSON, YAML"}, {"identifier": "example-2", "message": "Example", "parent_source": "community", "severity": "`ERROR`", "languages": "JSON, YAML"}, {"identifier": "example-3", "message": "Example", "parent_source": "community", "severity": "`ERROR`", "languages": "JSON, YAML"}, {"identifier": "example-4", "message": "Example", "parent_source": "community", "severity": "`ERROR`", "languages": "JSON, YAML"}, {"identifier": "example-4", "message": "Example", "parent_source": "community", "severity": "`ERROR`", "languages": "JSON, YAML"}, {"identifier": "metadata-impact", "message": "This Semgrep rule is missing a valid 'impact' field in the 'metadata'. which should be either LOW, MEDIUM, or HIGH. For more information visit  https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "express-sandbox-code-injection", "message": "Make sure that unverified user data can not reach `sandbox`.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "libxml2-xxe-taint", "message": "The application is using an XML parser that has not been safely configured. This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled input. An attacker can include document type definitions (DTDs) which can interact with internal or external hosts. XXE can lead to other vulnerabilities, such as Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request forgery (SSRF), depending on the application configuration. An attacker can also use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also known as a `Billion Laughs Attack`. The best defense against XXE is to have an XML parser that supports disabling DTDs. Limiting the use of external entities from the start can prevent the parser from being used to process untrusted XML files. Reducing dependencies on external resources is also a good practice for performance reasons. It is difficult to guarantee that even a trusted XML file on your server or during transmission has not been tampered with by a malicious third-party. ", "parent_source": "community", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "slow-pattern-general-property", "message": "Using patterns like `$X.$Y` may be too general and may slow down the rule performance.", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "metadata-deepsemgrep", "message": "We no longer support `deepsemgrep: true`, please use `interfile:true`", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "missing-deconstructed-value", "message": "Looks like this value is deconstructing a const/var/let you need to use all three `const {...} =` `var {...} =` and `let {...} =` to provide accurate coverage consider adding the missing patterns in a `pattern-inside` for better coverage.", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "other-rule", "message": "", "parent_source": "community", "severity": "`INFO`", "languages": "Generic"}, {"identifier": "other-rule-2", "message": "", "parent_source": "community", "severity": "`INFO`", "languages": "Generic"}, {"identifier": "unsatisfiable-rule", "message": "You can not use 'pattern' $A and 'pattern-not' $A together; this will always be empty.", "parent_source": "community", "severity": "`ERROR`", "languages": "YAML"}, {"identifier": "slow-pattern-single-metavariable", "message": "Using a single metavariable as a pattern drastically slows down the rule performance because it will match every expression in a file. Instead, try to match something specific such as a function name, or anchor on a statement that may occur above or below the pattern. The more specific you can be, the faster the pattern will run.", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "duplicate-pattern", "message": "Two identical pattern clauses were detected. This will cause Semgrep to run the same pattern twice. Remove one of the duplicate pattern clauses.", "parent_source": "community", "severity": "`ERROR`", "languages": "YAML"}, {"identifier": "duplicate-id", "message": "The 'id' field $X was used multiple times. The 'id' field needs to be unique.", "parent_source": "community", "severity": "`ERROR`", "languages": "YAML"}, {"identifier": "empty-message", "message": "This rule has an empty message field. Consider adding a message field that communicates why this rule is an issue and how to fix it. This will increase the chance that the finding gets addressed.", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "interfile-true-under-metadata-and-no-options", "message": "`interfile: true` should be under the `options` field, not the `metadata` field.", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "javascript.phantom.security.audit.phantom-injection.phantom-injection", "message": "If unverified user data can reach the `phantom` page methods it can result in Server-Side Request Forgery vulnerabilities", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript"}, {"identifier": "javascript.playwright.security.audit.playwright-evaluate-arg-injection.playwright-evaluate-arg-injection", "message": "If unverified user data can reach the `evaluate` method it can result in Server-Side Request Forgery vulnerabilities", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript"}, {"identifier": "typescript.react.best-practice.react-props-in-state.react-props-in-state", "message": "It is a bad practice to stop the data flow in rendering by copying props into state.", "parent_source": "community", "severity": "`WARNING`", "languages": "TypeScript, JavaScript"}, {"identifier": "half-written-crypto-example", "message": "# ruleid: message-whitespace-check Semgrep found  a match # ruleid: message-whitespace-check I like    big space", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript"}, {"identifier": "slow-pattern-general-func", "message": "Using patterns like `function (...) {...}` is too general it will probably slow down the rule performance.", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "unnecessary-parent-operator", "message": "Unnecessary parent operator. Remove one to fix.", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "swift-user-defaults", "message": "Potentially sensitive data was observed to be stored in UserDefaults, which is not adequate protection of sensitive information. For data of a sensitive nature, applications should leverage the Keychain.", "parent_source": "community", "severity": "`WARNING`", "languages": "Swift"}, {"identifier": "libxml2-xxe-taint", "message": "The application is using an XML parser that has not been safely configured. This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled input. An attacker can include document type definitions (DTDs) which can interact with internal or external hosts. XXE can lead to other vulnerabilities, such as Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request forgery (SSRF), depending on the application configuration. An attacker can also use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also known as a `Billion Laughs Attack`. The best defense against XXE is to have an XML parser that supports disabling DTDs. Limiting the use of external entities from the start can prevent the parser from being used to process untrusted XML files. Reducing dependencies on external resources is also a good practice for performance reasons. It is difficult to guarantee that even a trusted XML file on your server or during transmission has not been tampered with by a malicious third-party. ", "parent_source": "community", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "metadata-confidence", "message": "This Semgrep rule is missing a valid 'confidence' field in the 'metadata'. which should be either LOW, MEDIUM, or HIGH. For more information visit  https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "metadata-likelihood", "message": "This Semgrep rule is missing a valid 'likelihood' field in the 'metadata'. which should be either LOW, MEDIUM, or HIGH. For more information visit  https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "yaml-key-indentation-check", "message": "It looks like you have an YAML indentation issue -- instead of writing `$KEY`,  put a space between the hyphen and what comes after! Otherwise, it reads  as a single string. ", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "interfile-true-under-metadata-and-options-already-present", "message": "`interfile: true` should be under the `options` field, not the `metadata` field.", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "metadata-technology", "message": "This Semgrep rule is missing a 'technology' field in the 'metadata'. Consider adding a list of technologies based on the rule's associated library or framework, or another piece of relevant information.", "parent_source": "community", "severity": "`INFO`", "languages": "YAML"}, {"identifier": "slow-pattern-top-ellipsis", "message": "Using the ellipsis operator `...` at the top of the pattern drastically slows down the rule performance.", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "example-1", "message": "Example", "parent_source": "community", "severity": "`ERROR`", "languages": "JSON, YAML"}, {"identifier": "example-1b", "message": "Example", "parent_source": "community", "severity": "`ERROR`", "languages": "JSON, YAML"}, {"identifier": "example-bad-zero", "message": "Example", "parent_source": "community", "severity": "`ERROR`", "languages": "JSON, YAML"}, {"identifier": "example-bad-double-zero-year", "message": "Example", "parent_source": "community", "severity": "`ERROR`", "languages": "JSON, YAML"}, {"identifier": "example-bad-missing-leading-zero", "message": "Example", "parent_source": "community", "severity": "`ERROR`", "languages": "JSON, YAML"}, {"identifier": "example-bad-greater-than-10", "message": "Example", "parent_source": "community", "severity": "`ERROR`", "languages": "JSON, YAML"}, {"identifier": "example-bad-missing-details", "message": "Example", "parent_source": "community", "severity": "`ERROR`", "languages": "JSON, YAML"}, {"identifier": "example-bad-missing-colon", "message": "Example", "parent_source": "community", "severity": "`ERROR`", "languages": "JSON, YAML"}, {"identifier": "example-good-list", "message": "Example", "parent_source": "community", "severity": "`ERROR`", "languages": "JSON, YAML"}, {"identifier": "example-bad-list", "message": "Example", "parent_source": "community", "severity": "`ERROR`", "languages": "JSON, YAML"}, {"identifier": "metadata-subcategory-incorrect-value", "message": "Semgrep rule likelihood: $VALUE detected, but the value must be vuln, audit, or guardrail. For more information visit: https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "libxml2-xxe-taint", "message": "The application is using an XML parser that has not been safely configured. This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled input. An attacker can include document type definitions (DTDs) which can interact with internal or external hosts. XXE can lead to other vulnerabilities, such as Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request forgery (SSRF), depending on the application configuration. An attacker can also use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also known as a `Billion Laughs Attack`. The best defense against XXE is to have an XML parser that supports disabling DTDs. Limiting the use of external entities from the start can prevent the parser from being used to process untrusted XML files. Reducing dependencies on external resources is also a good practice for performance reasons. It is difficult to guarantee that even a trusted XML file on your server or during transmission has not been tampered with by a malicious third-party. ", "parent_source": "community", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "metadata-confidence-incorrect-value", "message": "Semgrep rule confidence: $VALUE detected, but the value must be LOW, MEDIUM, or HIGH. For more information visit:  https://semgrep.dev/docs/contributing/contributing-to-semgrep-rules-repository/", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "multi-line-message", "message": "This rule has a multi-line message field, which may display poorly in a terminal. Consider ensuring it is on one line. For example, use `message: >-`, not `message: |`.", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "missing-language-field", "message": "Please include a 'languages' field for your rule $RULEID!", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "metadata-references", "message": "The references in rule metadata should always be a list, even if there's only one.", "parent_source": "community", "severity": "`ERROR`", "languages": "JSON, YAML"}, {"identifier": "lang-consistency-js", "message": "Found '$X' in language config which diverges from semgrep.dev normalization. Please use 'js' instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "lang-consistency-elixir", "message": "Found '$X' in language config which diverges from semgrep.dev normalization. Please use 'elixir' instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "lang-consistency-go", "message": "Found '$X' in language config which diverges from semgrep.dev normalization. Please use 'go' instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "lang-consistency-bash", "message": "Found '$X' in language config which diverges from semgrep.dev normalization. Please use 'bash' instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "lang-consistency-hcl", "message": "Found '$X' in language config which diverges from semgrep.dev normalization. Please use 'hcl' instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "lang-consistency-dockerfile", "message": "Found '$X' in language config which diverges from semgrep.dev normalization. Please use 'dockerfile' instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "lang-consistency-kotlin", "message": "Found '$X' in language config which diverges from semgrep.dev normalization. Please use 'kotlin' instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "lang-consistency-csharp", "message": "Found '$X' in language config which diverges from semgrep.dev normalization. Please use 'csharp' instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "lang-consistency-regex", "message": "Found '$X' in language config which diverges from semgrep.dev normalization. Please use 'regex' instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "lang-consistency-cpp", "message": "Found '$X' in language config which diverges from semgrep.dev normalization. Please use 'cpp' instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "lang-consistency-solidity", "message": "Found '$X' in language config which diverges from semgrep.dev normalization. Please use 'solidity' instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "lang-consistency-ts", "message": "Found '$X' in language config which diverges from semgrep.dev normalization. Please use 'ts' instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "lang-consistency-python", "message": "Found '$X' in language config which diverges from semgrep.dev normalization. Please use 'python' instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "writable-filesystem-service", "message": "Service '$SERVICE' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "seccomp-confinement-disabled", "message": "Service '$SERVICE' is explicitly disabling seccomp confinement. This runs the service in an unrestricted state. Remove 'seccomp:unconfined' to prevent this.", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "privileged-service", "message": "Service '$SERVICE' is running in privileged mode. This grants the container the equivalent of root capabilities on the host machine. This can lead to container escapes, privilege escalation, and other security concerns. Remove the 'privileged' key to disable this capability.", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "selinux-separation-disabled", "message": "Service '$SERVICE' is explicitly disabling SELinux separation. This runs the service as an unconfined type. Remove 'label:disable' to prevent this.", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "no-new-privileges", "message": "Service '$SERVICE' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "exposing-docker-socket-volume", "message": "Exposing host's Docker socket to containers via a volume. The owner of this socket is root. Giving someone access to it is equivalent to giving unrestricted root access to your host. Remove 'docker.sock' from volumes to prevent this.", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "semgrep-github-action-push-without-branches", "message": "The 'branches' field (in the push event configuration) contains no branches. This causes all branches to be scanned and may result in unneccessary duplicate findings across the entire codebase.", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "run-shell-injection", "message": "Using variable interpolation `${{...}}` with `github` context data in a `run:` step could allow an attacker to inject their own code into the runner. This would allow them to steal secrets and code. `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use an intermediate environment variable with `env:` to store the data and use the environment variable in the `run:` script. Be sure to use double-quotes the environment variable, like this: \"$ENVVAR\".", "parent_source": "community", "severity": "`ERROR`", "languages": "YAML"}, {"identifier": "allowed-unsecure-commands", "message": "The environment variable `ACTIONS_ALLOW_UNSECURE_COMMANDS` grants this workflow permissions to use the `set-env` and `add-path` commands. There is a vulnerability in these commands that could result in environment variables being modified by an attacker. Depending on the use of the environment variable, this could enable an attacker to, at worst, modify the system path to run a different command than intended, resulting in arbitrary code execution. This could result in stolen code or secrets. Don't use `ACTIONS_ALLOW_UNSECURE_COMMANDS`. Instead, use Environment Files. See https://github.com/actions/toolkit/blob/main/docs/commands.md#environment-files for more information.", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "third-party-action-not-pinned-to-commit-sha", "message": "An action sourced from a third-party repository on GitHub is not pinned to a full length commit SHA. Pinning an action to a full length commit SHA is currently the only way to use an action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a bad actor adding a backdoor to the action's repository, as they would need to generate a SHA-1 collision for a valid Git object payload.", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "pull-request-target-code-checkout", "message": "This GitHub Actions workflow file uses `pull_request_target` and checks out code from the incoming pull request. When using `pull_request_target`, the Action runs in the context of the target repository, which includes access to all repository secrets. Normally, this is safe because the Action only runs code from the target repository, not the incoming PR. However, by checking out the incoming PR code, you're now using the incoming code for the rest of the action. You may be inadvertently executing arbitrary code from the incoming PR with access to repository secrets, which would let an attacker steal repository secrets. This normally happens by running build scripts (e.g., `npm build` and `make`) or dependency installation scripts (e.g., `python setup.py install`). Audit your workflow file to make sure no code from the incoming PR is executed. Please see https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ for additional mitigations.", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "curl-eval", "message": "Data is being eval'd from a `curl` command. An attacker with control of the server in the `curl` command could inject malicious code into the `eval`, resulting in a system comrpomise. Avoid eval'ing untrusted data if you can. If you must do this, consider checking the SHA sum of the content returned by the server to verify its integrity.", "parent_source": "community", "severity": "`ERROR`", "languages": "YAML"}, {"identifier": "github-script-injection", "message": "Using variable interpolation `${{...}}` with `github` context data in a `actions/github-script`'s `script:` step could allow an attacker to inject their own code into the runner. This would allow them to steal secrets and code. `github` context data can have arbitrary user input and should be treated as untrusted. Instead, use an intermediate environment variable with `env:` to store the data and use the environment variable in the `run:` script. Be sure to use double-quotes the environment variable, like this: \"$ENVVAR\".", "parent_source": "community", "severity": "`ERROR`", "languages": "YAML"}, {"identifier": "workflow-run-target-code-checkout", "message": "This GitHub Actions workflow file uses `workflow_run` and checks out code from the incoming pull request. When using `workflow_run`, the Action runs in the context of the target repository, which includes access to all repository secrets. Normally, this is safe because the Action only runs code from the target repository, not the incoming PR. However, by checking out the incoming PR code, you're now using the incoming code for the rest of the action. You may be inadvertently executing arbitrary code from the incoming PR with access to repository secrets, which would let an attacker steal repository secrets. This normally happens by running build scripts (e.g., `npm build` and `make`) or dependency installation scripts (e.g., `python setup.py install`). Audit your workflow file to make sure no code from the incoming PR is executed. Please see https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ for additional mitigations.", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "event-binding-payload-with-hyphen", "message": "The parameter `$VALUE` to this WorkflowEventBinding includes hyphens, which will, very confusingly, throw an error when Argo Workflows tries to invoke the workflow. Set the payload value to use underscores instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "argo-workflow-parameter-command-injection", "message": "Using input or workflow parameters in here-scripts can lead to command injection or code injection. Convert the parameters to env variables instead.", "parent_source": "community", "severity": "`ERROR`", "languages": "YAML"}, {"identifier": "no-fractional-cpu-limits", "message": "When you set a fractional CPU limit on a container, the CPU cycles available will be throttled, even though most nodes can handle processes alternating between using 100% of the CPU.", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "secrets-in-config-file", "message": "Secrets ($VALUE) should not be stored in infrastructure as code files. Use an alternative such as Bitnami Sealed Secrets or KSOPS to encrypt Kubernetes Secrets. ", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "writable-filesystem-container", "message": "Container $CONTAINER is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'readOnlyRootFilesystem: true' to this container to prevent this.", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "run-as-non-root", "message": "When running containers in Kubernetes, it's important to ensure that they  are properly secured to prevent privilege escalation attacks.  One potential vulnerability is when a container is allowed to run  applications as the root user, which could allow an attacker to gain  access to sensitive resources. To mitigate this risk, it's recommended to  add a `securityContext` to the container, with the parameter `runAsNonRoot`  set to `true`. This will ensure that the container runs as a non-root user,  limiting the damage that could be caused by any potential attacks. By  adding a `securityContext` to the container in your Kubernetes pod, you can  help to ensure that your containerized applications are more secure and  less vulnerable to privilege escalation attacks.", "parent_source": "community", "severity": "`INFO`", "languages": "YAML"}, {"identifier": "skip-tls-verify-cluster", "message": "Cluster is disabling TLS certificate verification when communicating with the server. This makes your HTTPS connections insecure. Remove the 'insecure-skip-tls-verify: true' key to secure communication.", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "run-as-non-root-unsafe-value", "message": "When running containers in Kubernetes, it's important to ensure that they  are properly secured to prevent privilege escalation attacks.  One potential vulnerability is when a container is allowed to run  applications as the root user, which could allow an attacker to gain  access to sensitive resources. To mitigate this risk, it's recommended to  add a `securityContext` to the container, with the parameter `runAsNonRoot`  set to `true`. This will ensure that the container runs as a non-root user,  limiting the damage that could be caused by any potential attacks. By  adding a `securityContext` to the container in your Kubernetes pod, you can  help to ensure that your containerized applications are more secure and  less vulnerable to privilege escalation attacks.", "parent_source": "community", "severity": "`INFO`", "languages": "YAML"}, {"identifier": "hostipc-pod", "message": "Pod is sharing the host IPC namespace. This allows container processes to communicate with processes on the host which reduces isolation and bypasses container protection models. Remove the 'hostIPC' key to disable this functionality.", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "skip-tls-verify-service", "message": "Service is disabling TLS certificate verification when communicating with the server. This makes your HTTPS connections insecure. Remove the 'insecureSkipTLSVerify: true' key to secure communication.", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "run-as-non-root-security-context-pod-level", "message": "When running containers in Kubernetes, it's important to ensure that they  are properly secured to prevent privilege escalation attacks.  One potential vulnerability is when a container is allowed to run  applications as the root user, which could allow an attacker to gain  access to sensitive resources. To mitigate this risk, it's recommended to  add a `securityContext` to the container, with the parameter `runAsNonRoot`  set to `true`. This will ensure that the container runs as a non-root user,  limiting the damage that could be caused by any potential attacks. By  adding a `securityContext` to the container in your Kubernetes pod, you can  help to ensure that your containerized applications are more secure and  less vulnerable to privilege escalation attacks.", "parent_source": "community", "severity": "`INFO`", "languages": "YAML"}, {"identifier": "seccomp-confinement-disabled", "message": "Container is explicitly disabling seccomp confinement. This runs the service in an unrestricted state. Remove 'seccompProfile: unconfined' to prevent this.", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "allow-privilege-escalation", "message": "In Kubernetes, each pod runs in its own isolated environment with its own  set of security policies. However, certain container images may contain  `setuid` or `setgid` binaries that could allow an attacker to perform  privilege escalation and gain access to sensitive resources. To mitigate  this risk, it's recommended to add a `securityContext` to the container in  the pod, with the parameter `allowPrivilegeEscalation` set to `false`.  This will prevent the container from running any privileged processes and  limit the impact of any potential attacks.  By adding the `allowPrivilegeEscalation` parameter to your the  `securityContext`, you can help to  ensure that your containerized applications are more secure and less  vulnerable to privilege escalation attacks.", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "exposing-docker-socket-hostpath", "message": "Exposing host's Docker socket to containers via a volume. The owner of this socket is root. Giving someone access to it is equivalent to giving unrestricted root access to your host. Remove 'docker.sock' from hostpath to prevent this.", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "run-as-non-root-container-level-missing-security-context", "message": "When running containers in Kubernetes, it's important to ensure that they  are properly secured to prevent privilege escalation attacks.  One potential vulnerability is when a container is allowed to run  applications as the root user, which could allow an attacker to gain  access to sensitive resources. To mitigate this risk, it's recommended to  add a `securityContext` to the container, with the parameter `runAsNonRoot`  set to `true`. This will ensure that the container runs as a non-root user,  limiting the damage that could be caused by any potential attacks. By  adding a `securityContext` to the container in your Kubernetes pod, you can  help to ensure that your containerized applications are more secure and  less vulnerable to privilege escalation attacks.", "parent_source": "community", "severity": "`INFO`", "languages": "YAML"}, {"identifier": "allow-privilege-escalation-no-securitycontext", "message": "In Kubernetes, each pod runs in its own isolated environment with its own  set of security policies. However, certain container images may contain  `setuid` or `setgid` binaries that could allow an attacker to perform  privilege escalation and gain access to sensitive resources. To mitigate  this risk, it's recommended to add a `securityContext` to the container in  the pod, with the parameter `allowPrivilegeEscalation` set to `false`.  This will prevent the container from running any privileged processes and  limit the impact of any potential attacks.  By adding a `securityContext` to your Kubernetes pod, you can help to  ensure that your containerized applications are more secure and less  vulnerable to privilege escalation attacks.", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "hostpid-pod", "message": "Pod is sharing the host process ID namespace. When paired with ptrace this can be used to escalate privileges outside of the container. Remove the 'hostPID' key to disable this functionality.", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "privileged-container", "message": "Container or pod is running in privileged mode. This grants the container the equivalent of root capabilities on the host machine. This can lead to container escapes, privilege escalation, and other security concerns. Remove the 'privileged' key to disable this capability.", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "hostnetwork-pod", "message": "Pod may use the node network namespace. This gives the pod access to the loopback device, services listening on localhost, and could be used to snoop on network activity of other pods on the same node. Remove the 'hostNetwork' key to disable this functionality.", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "run-as-non-root-container-level", "message": "When running containers in Kubernetes, it's important to ensure that they  are properly secured to prevent privilege escalation attacks.  One potential vulnerability is when a container is allowed to run  applications as the root user, which could allow an attacker to gain  access to sensitive resources. To mitigate this risk, it's recommended to  add a `securityContext` to the container, with the parameter `runAsNonRoot`  set to `true`. This will ensure that the container runs as a non-root user,  limiting the damage that could be caused by any potential attacks. By  adding a `securityContext` to the container in your Kubernetes pod, you can  help to ensure that your containerized applications are more secure and  less vulnerable to privilege escalation attacks.", "parent_source": "community", "severity": "`INFO`", "languages": "YAML"}, {"identifier": "legacy-api-clusterrole-excessive-permissions", "message": "Semgrep detected a Kubernetes core API ClusterRole with excessive permissions. Attaching excessive permissions to a ClusterRole associated with the core namespace allows the V1 API to perform arbitrary actions on arbitrary resources attached to the cluster. Prefer explicit allowlists of verbs/resources when configuring the core API namespace. ", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "allow-privilege-escalation-true", "message": "In Kubernetes, each pod runs in its own isolated environment with its own  set of security policies. However, certain container images may contain  `setuid` or `setgid` binaries that could allow an attacker to perform  privilege escalation and gain access to sensitive resources. To mitigate  this risk, it's recommended to add a `securityContext` to the container in  the pod, with the parameter `allowPrivilegeEscalation` set to `false`.  This will prevent the container from running any privileged processes and  limit the impact of any potential attacks.  In the container `$CONTAINER` this parameter is set to `true` which makes this container much more vulnerable to privelege escalation attacks.", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "flask-debugging-enabled", "message": "Do not set FLASK_ENV to \"development\" since that sets `debug=True` in Flask. Use \"dev\" or a similar term instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "changes-with-when-never", "message": "This Gitlab CI YAML will never run on default branches due to a `changes` rule with `when:never`. To fix this, make sure the triggering event is a push event. You can do this with `if: '$CI_PIPELINE_SOURCE == \"push\"'`. See https://docs.gitlab.com/ee/ci/yaml/index.html#ruleschanges", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "deprecated_bnot_operator", "message": "The bitwise operator (`^^^`) is already deprecated. Please use `Bitwise.bnot($VAL)` instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Elixir"}, {"identifier": "enum_map_into", "message": "Using `Enum.into/3` is more efficient than using `Enum.map/2 |> Enum.into/2`.", "parent_source": "community", "severity": "`WARNING`", "languages": "Elixir"}, {"identifier": "deprecated_calendar_iso_day_of_week_3", "message": "`Calendar.ISO.day_of_week/3` is already deprecated. Please use `Calendar.ISO.day_of_week/4` instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Elixir"}, {"identifier": "enum_map_join", "message": "Using `Enum.map_join/3` is more efficient than using `Enum.map/2 |> Enum.join/2`.", "parent_source": "community", "severity": "`WARNING`", "languages": "Elixir"}, {"identifier": "deprecated_bxor_operator", "message": "The bitwise operator (`^^^`) is already deprecated. Please use `Bitwise.bxor($LEFT, $RIGHT)` instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Elixir"}, {"identifier": "deprecated_use_bitwise", "message": "The syntax `use Bitwise` is already deprecated. Please use `import Bitwise` instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Elixir"}, {"identifier": "atom_exhaustion", "message": "Atom values are appended to a global table but never removed. If input is user-controlled, dynamic instantiations such as `String.to_atom` or `List.to_atom` can lead to possible memory leaks. Instead, use `String.to_existing_atom` or `List.to_existing_atom`.", "parent_source": "community", "severity": "`ERROR`", "languages": "Elixir"}, {"identifier": "useless-cat", "message": "Useless call to 'cat' in a pipeline. Use '<' and '>' for any command to read from a file or write to a file.", "parent_source": "community", "severity": "`WARNING`", "languages": "Bash"}, {"identifier": "iteration-over-ls-output", "message": "Iterating over ls output is fragile. Use globs, e.g. 'dir/*' instead of '$(ls dir)'.", "parent_source": "community", "severity": "`WARNING`", "languages": "Bash"}, {"identifier": "unquoted-variable-expansion-in-command", "message": "Variable expansions must be double-quoted so as to prevent being split into multiple pieces according to whitespace or whichever separator is specified by the IFS variable. If you really wish to split the variable's contents, you may use a variable that starts with an underscore e.g. $_X instead of $X, and semgrep will ignore it. If what you need is an array, consider using a proper bash array.", "parent_source": "community", "severity": "`INFO`", "languages": "Bash"}, {"identifier": "unquoted-command-substitution-in-command", "message": "The result of command substitution $(...) or `...`, if unquoted, is split on whitespace or other separators specified by the IFS variable. You should surround it with double quotes to avoid splitting the result.", "parent_source": "community", "severity": "`INFO`", "languages": "Bash"}, {"identifier": "ifs-tampering", "message": "The special variable IFS affects how splitting takes place when expanding unquoted variables. Don't set it globally. Prefer a dedicated utility such as 'cut' or 'awk' if you need to split input data. If you must use 'read', set IFS locally using e.g. 'IFS=\",\" read -a my_array'.", "parent_source": "community", "severity": "`WARNING`", "languages": "Bash"}, {"identifier": "curl-pipe-bash", "message": "Data is being piped into `bash` from a `curl` command. An attacker with control of the server in the `curl` command could inject malicious code into the pipe, resulting in a system compromise. Avoid piping untrusted data into `bash` or any other shell if you can. If you must do this, consider checking the SHA sum of the content returned by the server to verify its integrity.", "parent_source": "community", "severity": "`WARNING`", "languages": "Bash"}, {"identifier": "curl-eval", "message": "Data is being eval'd from a `curl` command. An attacker with control of the server in the `curl` command could inject malicious code into the `eval`, resulting in a system comrpomise. Avoid eval'ing untrusted data if you can. If you must do this, consider checking the SHA sum of the content returned by the server to verify its integrity.", "parent_source": "community", "severity": "`WARNING`", "languages": "Bash"}, {"identifier": "use-ownable2step", "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it.", "parent_source": "community", "severity": "`INFO`", "languages": "Solidity"}, {"identifier": "use-abi-encodecall-instead-of-encodewithselector", "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`.", "parent_source": "community", "severity": "`INFO`", "languages": "Solidity"}, {"identifier": "non-optimal-variables-swap", "message": "Consider swapping variables using `($VAR1, $VAR2) = ($VAR2, $VAR1)` to save gas", "parent_source": "community", "severity": "`INFO`", "languages": "Solidity"}, {"identifier": "non-payable-constructor", "message": "Consider making costructor payable to save gas.", "parent_source": "community", "severity": "`INFO`", "languages": "Solidity"}, {"identifier": "use-short-revert-string", "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met.", "parent_source": "community", "severity": "`INFO`", "languages": "Solidity"}, {"identifier": "use-prefix-decrement-not-postfix", "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas.", "parent_source": "community", "severity": "`INFO`", "languages": "Solidity"}, {"identifier": "use-prefix-increment-not-postfix", "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas.", "parent_source": "community", "severity": "`INFO`", "languages": "Solidity"}, {"identifier": "unnecessary-checked-arithmetic-in-loop", "message": "A lot of times there is no risk that the loop counter can overflow.  Using Solidity's unchecked block saves the overflow checks.", "parent_source": "community", "severity": "`INFO`", "languages": "Solidity"}, {"identifier": "use-custom-error-not-require", "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec.", "parent_source": "community", "severity": "`INFO`", "languages": "Solidity"}, {"identifier": "init-variables-with-default-value", "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas.", "parent_source": "community", "severity": "`INFO`", "languages": "Solidity"}, {"identifier": "use-multiple-require", "message": "Using multiple require statements is cheaper than using && multiple check combinations.  There are more advantages, such as easier to read code and better coverage reports.", "parent_source": "community", "severity": "`INFO`", "languages": "Solidity"}, {"identifier": "use-nested-if", "message": "Using nested is cheaper than using && multiple check combinations.  There are more advantages, such as easier to read code and better coverage reports.", "parent_source": "community", "severity": "`INFO`", "languages": "Solidity"}, {"identifier": "state-variable-read-in-a-loop", "message": "Replace state variable reads and writes within loops with local variable reads and writes.", "parent_source": "community", "severity": "`INFO`", "languages": "Solidity"}, {"identifier": "array-length-outside-loop", "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop.", "parent_source": "community", "severity": "`INFO`", "languages": "Solidity"}, {"identifier": "inefficient-state-variable-increment", "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables.", "parent_source": "community", "severity": "`INFO`", "languages": "Solidity"}, {"identifier": "sense-missing-oracle-access-control", "message": "Oracle update is not restricted in $F()", "parent_source": "community", "severity": "`ERROR`", "languages": "Solidity"}, {"identifier": "msg-value-multicall", "message": "$F with constant msg.value can be called multiple times", "parent_source": "community", "severity": "`ERROR`", "languages": "Solidity"}, {"identifier": "superfluid-ctx-injection", "message": "A specially crafted calldata may be used to impersonate other accounts", "parent_source": "community", "severity": "`ERROR`", "languages": "Solidity"}, {"identifier": "curve-readonly-reentrancy", "message": "$POOL.get_virtual_price() call on a Curve pool is not protected from the read-only reentrancy.", "parent_source": "community", "severity": "`ERROR`", "languages": "Solidity"}, {"identifier": "keeper-network-oracle-manipulation", "message": "Keep3rV2.current() call has high data freshness, but it has low security,  an exploiter simply needs to manipulate 2 data points to be able to impact the feed.", "parent_source": "community", "severity": "`WARNING`", "languages": "Solidity"}, {"identifier": "proxy-storage-collision", "message": "Proxy declares a state var that may override a storage slot of the implementation", "parent_source": "community", "severity": "`WARNING`", "languages": "Solidity"}, {"identifier": "arbitrary-send-erc20", "message": "msg.sender is not being used when calling erc20.transferFrom. Example - Alice approves this contract to spend her ERC20 tokens. Bob can call function 'a' and specify Alice's address as the from parameter in transferFrom, allowing him to transfer Alice's tokens to himself.", "parent_source": "community", "severity": "`WARNING`", "languages": "Solidity"}, {"identifier": "encode-packed-collision", "message": "abi.encodePacked hash collision with variable length arguments in $F()", "parent_source": "community", "severity": "`ERROR`", "languages": "Solidity"}, {"identifier": "no-bidi-characters", "message": "The code must not contain any of Unicode Direction Control Characters", "parent_source": "community", "severity": "`WARNING`", "languages": "Solidity"}, {"identifier": "redacted-cartel-custom-approval-bug", "message": "transferFrom() can steal allowance of other accounts", "parent_source": "community", "severity": "`ERROR`", "languages": "Solidity"}, {"identifier": "no-slippage-check", "message": "No slippage check in a Uniswap v2/v3 trade", "parent_source": "community", "severity": "`ERROR`", "languages": "Solidity"}, {"identifier": "erc20-public-burn", "message": "Anyone can burn tokens of other accounts", "parent_source": "community", "severity": "`ERROR`", "languages": "Solidity"}, {"identifier": "oracle-price-update-not-restricted", "message": "Oracle price data can be submitted by anyone", "parent_source": "community", "severity": "`ERROR`", "languages": "Solidity"}, {"identifier": "balancer-readonly-reentrancy-getpooltokens", "message": "$VAULT.getPoolTokens() call on a Balancer pool is not protected from the read-only reentrancy.", "parent_source": "community", "severity": "`ERROR`", "languages": "Solidity"}, {"identifier": "uniswap-callback-not-protected", "message": "Uniswap callback is not protected", "parent_source": "community", "severity": "`WARNING`", "languages": "Solidity"}, {"identifier": "incorrect-use-of-blockhash", "message": "blockhash(block.number) and blockhash(block.number + N) always returns 0.", "parent_source": "community", "severity": "`ERROR`", "languages": "Solidity"}, {"identifier": "basic-oracle-manipulation", "message": "Price oracle can be manipulated via flashloan", "parent_source": "community", "severity": "`INFO`", "languages": "Solidity"}, {"identifier": "rigoblock-missing-access-control", "message": "setMultipleAllowances() is missing onlyOwner modifier", "parent_source": "community", "severity": "`ERROR`", "languages": "Solidity"}, {"identifier": "compound-borrowfresh-reentrancy", "message": "Function borrowFresh() in Compound performs state update after doTransferOut()", "parent_source": "community", "severity": "`WARNING`", "languages": "Solidity"}, {"identifier": "erc721-reentrancy", "message": "ERC721 onERC721Received() reentrancy", "parent_source": "community", "severity": "`WARNING`", "languages": "Solidity"}, {"identifier": "erc20-public-transfer", "message": "Custom ERC20 implementation exposes _transfer() as public", "parent_source": "community", "severity": "`WARNING`", "languages": "Solidity"}, {"identifier": "erc721-arbitrary-transferfrom", "message": "Custom ERC721 implementation lacks access control checks in _transfer()", "parent_source": "community", "severity": "`WARNING`", "languages": "Solidity"}, {"identifier": "delegatecall-to-arbitrary-address", "message": "An attacker may perform delegatecall() to an arbitrary address.", "parent_source": "community", "severity": "`ERROR`", "languages": "Solidity"}, {"identifier": "balancer-readonly-reentrancy-getrate", "message": "$VAR.getRate() call on a Balancer pool is not protected from the read-only reentrancy.", "parent_source": "community", "severity": "`ERROR`", "languages": "Solidity"}, {"identifier": "accessible-selfdestruct", "message": "Contract can be destructed by anyone in $FUNC", "parent_source": "community", "severity": "`ERROR`", "languages": "Solidity"}, {"identifier": "gearbox-tokens-path-confusion", "message": "UniswapV3 adapter implemented incorrect extraction of path parameters", "parent_source": "community", "severity": "`WARNING`", "languages": "Solidity"}, {"identifier": "arbitrary-low-level-call", "message": "An attacker may perform call() to an arbitrary address with controlled calldata", "parent_source": "community", "severity": "`ERROR`", "languages": "Solidity"}, {"identifier": "tecra-coin-burnfrom-bug", "message": "Parameter \"from\" is checked at incorrect position in \"_allowances\" mapping", "parent_source": "community", "severity": "`ERROR`", "languages": "Solidity"}, {"identifier": "compound-sweeptoken-not-restricted", "message": "Function sweepToken is allowed to be called by anyone", "parent_source": "community", "severity": "`WARNING`", "languages": "Solidity"}, {"identifier": "openzeppelin-ecdsa-recover-malleable", "message": "Potential signature malleability in $F", "parent_source": "community", "severity": "`WARNING`", "languages": "Solidity"}, {"identifier": "unrestricted-transferownership", "message": "Unrestricted transferOwnership", "parent_source": "community", "severity": "`ERROR`", "languages": "Solidity"}, {"identifier": "basic-arithmetic-underflow", "message": "Possible arithmetic underflow", "parent_source": "community", "severity": "`INFO`", "languages": "Solidity"}, {"identifier": "erc777-reentrancy", "message": "ERC777 tokensReceived() reentrancy", "parent_source": "community", "severity": "`WARNING`", "languages": "Solidity"}, {"identifier": "erc677-reentrancy", "message": "ERC677 callAfterTransfer() reentrancy", "parent_source": "community", "severity": "`WARNING`", "languages": "Solidity"}, {"identifier": "command-injection-shell-call", "message": "A call to clojure.java.shell has been found, this could lead to an RCE if the inputs are user-controllable. Please ensure their origin is validated and sanitized.", "parent_source": "community", "severity": "`ERROR`", "languages": "Clojure"}, {"identifier": "use-of-md5", "message": "MD5 hash algorithm detected. This is not collision resistant and leads to easily-cracked password hashes. Replace with current recommended hashing algorithms.", "parent_source": "community", "severity": "`WARNING`", "languages": "Clojure"}, {"identifier": "documentbuilderfactory-xxe", "message": "DOCTYPE declarations are enabled for javax.xml.parsers.SAXParserFactory. Without prohibiting external entity declarations, this is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://apache.org/xml/features/disallow-doctype-decl\" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features \"http://xml.org/sax/features/external-general-entities\" and \"http://xml.org/sax/features/external-parameter-entities\" to false.", "parent_source": "community", "severity": "`ERROR`", "languages": "Clojure"}, {"identifier": "use-of-sha1", "message": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications.", "parent_source": "community", "severity": "`WARNING`", "languages": "Clojure"}, {"identifier": "read-string-unsafe", "message": "The default core Clojure read-string method is dangerous and can lead to deserialization vulnerabilities. Use the edn/read-string instead.", "parent_source": "community", "severity": "`ERROR`", "languages": "Clojure"}, {"identifier": "httpurlconnection-http-request", "message": "Detected an HTTP request sent via HttpURLConnection. This could lead to sensitive information being sent over an insecure channel. Instead, it is recommended to send requests over HTTPS.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "httpget-http-request", "message": "Detected an HTTP request sent via HttpGet. This could lead to sensitive information being sent  over an insecure channel. Instead, it is recommended to send requests over HTTPS.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "unirest-http-request", "message": "Checks for requests sent via Unirest to http:// URLS. This is dangerous because the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, send requests only to https:// URLS.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "tls-renegotiation", "message": "Checks for cases where java applications are allowing unsafe renegotiation. This leaves the application vulnerable to a man-in-the-middle attack where chosen plain text is injected as prefix to a TLS connection.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "bypass-tls-verification", "message": "Checks for redefinitions of the checkServerTrusted function in the X509TrustManager class that disables TLS/SSL certificate verification. This should only be used for debugging purposes because it leads to vulnerability to MTM attacks.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "disallow-old-tls-versions1", "message": "Detects direct creations of SSLConnectionSocketFactories that don't disallow SSL v2, SSL v3, and TLS v1. SSLSocketFactory can be used to validate the identity of the HTTPS server against a list of trusted certificates. These protocols are deprecated due to POODLE, man in the middle attacks, and other vulnerabilities.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "telnet-request", "message": "Checks for attempts to connect through telnet. This is insecure as the telnet protocol supports no encryption, and data passes through unencrypted.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "httpclient-http-request", "message": "Checks for requests sent via HttpClient to http:// URLS. This is dangerous because the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, send requests only to https:// URLS.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "disallow-old-tls-versions2", "message": "Detects setting client protocols to insecure versions of TLS and SSL. These protocols are deprecated due to POODLE, man in the middle attacks, and other vulnerabilities.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "ftp-request", "message": "Checks for outgoing connections to ftp servers. FTP does not encrypt traffic, possibly leading to PII being sent plaintext over the network.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "socket-request", "message": "Insecure transport rules to catch socket connections to http, telnet, and ftp servers. This is dangerous because these are protocols that do not encrypt traffic.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "http-components-request", "message": "Checks for requests sent via Apache HTTP Components to http:// URLS. This is dangerous because the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, send requests only to https:// URLS.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "bypass-tls-verification", "message": "Checks for redefinitions of functions that check TLS/SSL certificate verification. This can lead to vulnerabilities, as simple errors in the code can result in lack of proper certificate validation. This should only be used for debugging purposes because it leads to vulnerability to MTM attacks.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "spring-ftp-request", "message": "Checks for outgoing connections to ftp servers via Spring plugin ftpSessionFactory. FTP does not encrypt traffic, possibly leading to PII being sent plaintext over the network.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "spring-http-request", "message": "Checks for requests sent via Java Spring RestTemplate API to http:// URLS. This is dangerous because the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, send requests only to https:// URLS.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "net-ftp-request", "message": "Checks for outgoing connections to ftp servers with the 'net/ftp' package. FTP does not encrypt traffic, possibly leading to PII being sent plaintext over the network. Instead, connect via the SFTP protocol.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "net-telnet-request", "message": "Checks for creation of telnet servers or attempts to connect through telnet. This is insecure as the telnet protocol supports no encryption, and data passes through unencrypted.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "openuri-request", "message": "Checks for requests to http and ftp (unencrypted) sites using OpenURI.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "http-client-requests", "message": "Checks for requests to http (unencrypted) sites using some of ruby's most popular REST/HTTP libraries, including httparty and restclient.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "net-http-request", "message": "Checks for requests sent to http:// URLs. This is dangerous as the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, only send requests to https:// URLs.", "parent_source": "community", "severity": "`WARNING`", "languages": "Ruby"}, {"identifier": "rest-http-client-support", "message": "Checks for requests to http (unencrypted) sites using some of node js's most popular REST/HTTP libraries, including node-rest-client, axios, and got.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript"}, {"identifier": "bypass-tls-verification", "message": "Checks for setting the environment variable NODE_TLS_REJECT_UNAUTHORIZED to 0, which disables TLS verification. This should only be used for debugging purposes. Setting the option rejectUnauthorized to false bypasses verification against the list of trusted CAs, which also leads to insecure transport. These options lead to vulnerability to MTM attacks, and should not be used.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "disallow-old-tls-versions1", "message": "Detects direct creations of $HTTPS servers that don't disallow SSL v2, SSL v3, and TLS v1. These protocols are deprecated due to POODLE, man in the middle attacks, and other vulnerabilities.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "telnet-request", "message": "Checks for creation of telnet servers or attempts to connect through telnet. This is insecure as the telnet protocol supports no encryption, and data passes through unencrypted.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript"}, {"identifier": "http-request", "message": "Checks for requests sent to http:// URLs. This is dangerous as the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, only send requests to https:// URLs.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript"}, {"identifier": "disallow-old-tls-versions2", "message": "Detects creations of $HTTPS servers from option objects that don't disallow SSL v2, SSL v3, and TLS v1. These protocols are deprecated due to POODLE, man in the middle attacks, and other vulnerabilities.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "ftp-request", "message": "Checks for lack of usage of the \"secure: true\" option when sending ftp requests through the nodejs ftp module. This leads to unencrypted traffic being sent to the ftp server. There are other options such as \"implicit\" that still does not encrypt all traffic. ftp is the most utilized npm ftp module.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "using-http-server", "message": "Checks for any usage of http servers instead of https servers. Encourages the usage of https protocol instead of http, which does not have TLS and is therefore unencrypted. Using http can lead to man-in-the-middle attacks in which the attacker is able to read sensitive information.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript"}, {"identifier": "disallow-old-tls-versions", "message": "Detects creations of tls configuration objects with an insecure MinVersion of TLS. These protocols are deprecated due to POODLE, man in the middle attacks, and other vulnerabilities.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "grequests-http-request", "message": "Checks for requests to http (unencrypted) sites using grequests, a popular HTTP client library. This is dangerous because it could result in plaintext PII being passed around the network.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "http-customized-request", "message": "Checks for requests sent via http.NewRequest to http:// URLS. This is dangerous because the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, send requests only to https:// URLS.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "gorequest-http-request", "message": "Checks for requests to http (unencrypted) sites using gorequest, a popular HTTP client library. This is dangerous because it could result in plaintext PII being passed around the network.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "bypass-tls-verification", "message": "Checks for disabling of TLS/SSL certificate verification. This should only be used for debugging purposes because it leads to vulnerability to MTM attacks.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "telnet-request", "message": "Checks for attempts to connect to an insecure telnet server using the package telnet. This is bad because it can lead to man in the middle attacks.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "http-request", "message": "Checks for requests sent via http.$FUNC to http:// URLS. This is dangerous because the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, send requests only to https:// URLS.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "ftp-request", "message": "Checks for outgoing connections to ftp servers with the ftp package. FTP does not encrypt traffic, possibly leading to PII being sent plaintext over the network. Instead, connect via the SFTP protocol.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "sling-http-request", "message": "Checks for requests to http (unencrypted) sites using gorequest, a popular HTTP client library. This is dangerous because it could result in plaintext PII being passed around the network.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "gcp-postgresql-log-connection", "message": "Ensure PostgreSQL database 'log_connections' flag is set to 'on'", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-gke-has-labels", "message": "Ensure Kubernetes Clusters are configured with Labels", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-gke-use-cos-image", "message": "Ensure Container-Optimized OS (cos) is used for Kubernetes Engine Clusters Node image", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-compute-template-shielded-vm", "message": "Ensure Compute instances are launched with Shielded VM enabled", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-gke-nodepool-metadata-server-enabled", "message": "Ensure the GKE Metadata Server is Enabled\t", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-postgresql-log-min-message", "message": "Ensure PostgreSQL database 'log_min_messages' flag is set to a valid value", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-gke-nodepool-secure-boot-for-shielded-nodes", "message": "Ensure Secure Boot for Shielded GKE Nodes is Enabled\t", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-gke-metadata-server-enabled", "message": "Ensure the GKE Metadata Server is Enabled\t", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-ipv6-private-google-enabled", "message": "Ensure that Private google access is enabled for IPV6", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-postgresql-log-checkpoints", "message": "Ensure PostgreSQL database 'log_checkpoints' flag is set to 'on'", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-storage-versioning-enabled", "message": "Ensure Cloud storage has versioning enabled", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-gke-enable-shielded-nodes", "message": "Ensure Shielded GKE Nodes are Enabled", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-gke-alias-ip-enabled", "message": "Ensure Kubernetes Cluster is created with Alias IP ranges enabled", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-dnssec-enabled", "message": "Ensure that RSASHA1 is not used for the zone-signing and key-signing keys in Cloud DNS DNSSEC\t", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-mysql-local-in-file-off", "message": "Ensure MySQL database 'local_infile' flag is set to 'off'", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-gke-binary-authorization", "message": "Ensure use of Binary Authorization\t", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-compute-shielded-vm", "message": "Ensure Compute instances are launched with Shielded VM enabled", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-postgresql-log-min-duration", "message": "Ensure PostgreSQL database 'log_min_duration_statement' flag is set to '-1'", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-postgresql-log-disconnection", "message": "Ensure PostgreSQL database 'log_disconnections' flag is set to 'on'", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-postgresql-log-temp", "message": "Ensure PostgreSQL database 'log_temp_files' flag is set to '0'", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-postgresql-log-lock-waits", "message": "Ensure PostgreSQL database 'log_lock_waits' flag is set to 'on'", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-gke-nodepool-auto-repair-enabled", "message": "Ensure 'Automatic node repair' is enabled for Kubernetes Clusters", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-gke-sql-backup-configuration-enabled", "message": "Ensure all Cloud SQL database instance have backup configuration enabled", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-gke-nodepool-auto-upgrade-enabled", "message": "Ensure 'Automatic node upgrade' is enabled for Kubernetes Clusters", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-storage-bucket-not-public-iam-member", "message": "Ensure that Container Registry repositories are not anonymously or publicly accessible", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-gke-master-authz-networks-enabled", "message": "Ensure master authorized networks is set to enabled in GKE clusters", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-project-service-account-user-iam-member", "message": "Ensure that IAM users are not assigned the Service Account User or Service Account Token Creator roles at project level", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-sql-public-database", "message": "Ensure that Cloud SQL database Instances are not open to the world", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-storage-bucket-not-public-iam-binding", "message": "Ensure that Container Registry repositories are not anonymously or publicly accessible", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-sub-network-private-google-enabled", "message": "Ensure that private_ip_google_access is enabled for Subnet", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-compute-template-public-ip", "message": "Ensure that Compute instances do not have public IP addresses\t", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-datafusion-stack-driver-monitoring", "message": "Ensure Datafusion has stack driver monitoring enabled.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-gke-cluster-logging", "message": "Ensure logging is set to Enabled on Kubernetes Engine Clusters", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-project-member-default-service-account-iam-binding", "message": "Ensure Default Service account is not used at a project level", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-compute-project-os-login", "message": "Ensure oslogin is enabled for a Project\t", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-memory-store-for-redis-auth-enabled", "message": "Ensure Memorystore for Redis has AUTH enabled", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-dns-key-specs-rsasha1", "message": "Ensure that RSASHA1 is not used for the zone-signing and key-signing keys in Cloud DNS DNSSEC\t", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-gke-legacy-auth-enabled", "message": "Ensure Legacy Authorization is set to Disabled on Kubernetes Engine Clusters", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-build-workers-private", "message": "Ensure Cloud build workers are private\t", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-artifact-registry-private-repo-iam-binding", "message": "Ensure that Artifact Registry repositories are not anonymously or publicly accessible\t", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-gke-ensure-integrity-monitoring", "message": "Ensure Integrity Monitoring for Shielded GKE Nodes is Enabled", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-compute-disk-encryption", "message": "Ensure VM disks for critical VMs are encrypted with Customer Supplied Encryption Keys (CSEK)", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-dataproc-private-cluster-iam-member", "message": "Ensure that Dataproc clusters are not anonymously or publicly accessible", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-org-member-default-service-account-iam-member", "message": "Ensure default service account is not used at an organization level", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-compute-serial-ports", "message": "Ensure 'Enable connecting to serial ports' is not enabled for VM Instance\t", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-compute-firewall-unrestricted-ingress-3306", "message": "Ensure Google compute firewall ingress does not allow unrestricted MySQL access", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-folder-impersonation-roles-iam-binding", "message": "Ensure no roles that enable to impersonate and manage all service accounts are used at a folder level\t", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-compute-template-ip-forward", "message": "Ensure that IP forwarding is not enabled on Instances. This lets the instance act as a traffic router and receive traffic not intended for it, which may route traffic through unintended passages.", "parent_source": "community", "severity": "`INFO`", "languages": "Terraform"}, {"identifier": "gcp-bigquery-private-table-iam-binding", "message": "Ensure that BigQuery Tables are not anonymously or publicly accessible\t\t", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-gke-private-cluster-config", "message": "Ensure Kubernetes Cluster is created with Private cluster enabled", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-folder-impersonation-roles-iam-member", "message": "Ensure no roles that enable to impersonate and manage all service accounts are used at a folder level\t", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-compute-firewall-unrestricted-ingress-20", "message": "Ensure Google compute firewall ingress does not allow unrestricted FTP access", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-project-member-default-service-account-iam-member", "message": "Ensure Default Service account is not used at a project level", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-sub-network-logging-enabled", "message": "Ensure that VPC Flow Logs is enabled for every subnet in a VPC Network", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-dataflow-job-encrypted-with-cmk", "message": "Ensure data flow jobs are encrypted with Customer Supplied Encryption Keys (CSEK)", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-compute-public-ip", "message": "Ensure that Compute instances do not have public IP addresses\t", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-folder-member-default-service-account-iam-binding", "message": "Ensure Default Service account is not used at a folder level", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-gke-enabled-vpc-flow-logs", "message": "Enable VPC Flow Logs and Intranode Visibility", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-pubsub-encrypted-with-cmk", "message": "Ensure PubSub Topics are encrypted with Customer Supplied Encryption Keys (CSEK)", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-bigquery-dataset-encrypted-with-cmk", "message": "Ensure that BigQuery datasets are not anonymously or publicly accessible\t", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-vertexai-private-instance", "message": "Ensure Vertex AI instances are private", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-kms-prevent-destroy", "message": "Ensure KMS keys are protected from deletion", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-storage-bucket-uniform-access", "message": "Ensure that Cloud Storage buckets have uniform bucket-level access enabled", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-dataproc-cluster-public-ip", "message": "Ensure Dataproc Clusters do not have public IPs", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-pubsub-private-topic-iam-member", "message": "Ensure that Pub/Sub Topics are not anonymously or publicly accessible", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-sqlserver-no-public-ip", "message": "Ensure Cloud SQL database does not have public IP", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-gke-public-control-plane", "message": "Ensure GKE Control Plane is not public", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-sql-database-require-ssl", "message": "Ensure all Cloud SQL database instance requires all incoming connections to use SSL", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-vertexai-metadata-store-encrypted-with-cmk", "message": "Ensure Vertex AI Metadata Store uses a CMK (Customer Manager Key)", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-dataflow-private-job", "message": "Ensure Dataflow jobs are private", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-dataproc-private-cluster-iam-binding", "message": "Ensure that Dataproc clusters are not anonymously or publicly accessible", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-gke-legacy-instance-metadata-disabled", "message": "Ensure legacy Compute Engine instance metadata APIs are Disabled", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-spanner-database-encrypted-with-cmk", "message": "Ensure Spanner Database is encrypted with Customer Supplied Encryption Keys (CSEK)", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-insecure-load-balancer-tls-version", "message": "Detected GCP Load Balancer to be using an insecure version of TLS. To fix this set your \"min_tls_version\" to \"TLS_1_2\"", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-compute-os-login", "message": "Ensure that no instance in the project overrides the project setting for enabling OSLogin (OSLogin needs to be enabled in project metadata for all instances)\t", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-compute-boot-disk-encryption", "message": "Ensure VM disks for critical VMs are encrypted with Customer Supplied Encryption Keys (CSEK)", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-project-default-network", "message": "Ensure that the default network does not exist in a project. Set auto_create_network to `false`.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-gke-kubernetes-rbac-google-groups", "message": "Manage Kubernetes RBAC users with Google Groups for GKE", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-dataproc-cluster-encrypted-with-cmk", "message": "Ensure Dataproc cluster is encrypted with Customer Supplied Encryption Keys (CSEK)\t", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-gke-pod-security-policy-enabled", "message": "Ensure PodSecurityPolicy controller is enabled on the Kubernetes Engine Clusters", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-gke-secure-boot-for-shielded-nodes", "message": "Ensure Secure Boot for Shielded GKE Nodes is Enabled\t", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-memory-store-for-redis-intransit-encryption", "message": "Ensure Memorystore for Redis uses intransit encryption", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-bigquery-table-encrypted-with-cmk", "message": "Ensure Big Query Tables are encrypted with Customer Supplied Encryption Keys (CSEK)\t", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-compute-ip-forward", "message": "Ensure that IP forwarding is not enabled on Instances. This lets the instance act as a traffic router and receive traffic not intended for it, which may route traffic through unintended passages.\t", "parent_source": "community", "severity": "`INFO`", "languages": "Terraform"}, {"identifier": "gcp-compute-ssl-policy", "message": "Ensure no HTTPS or SSL proxy load balancers permit SSL policies with weak cipher suites", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-bigtable-instance-encrypted-with-cmk", "message": "Ensure Big Table Instances are encrypted with Customer Supplied Encryption Keys (CSEK)\t", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-vertexai-dataset-encrypted-with-cmk", "message": "Ensure Vertex AI datasets uses a CMK (Customer Manager Key)", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-pubsub-private-topic-iam-binding", "message": "Ensure that Pub/Sub Topics are not anonymously or publicly accessible", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-artifact-registry-private-repo-iam-member", "message": "Ensure that Artifact Registry repositories are not anonymously or publicly accessible\t", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-project-service-account-user-iam-binding", "message": "Ensure that IAM users are not assigned the Service Account User or Service Account Token Creator roles at project level", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-run-private-service-iam-binding", "message": "Ensure that GCP Cloud Run services are not anonymously or publicly accessible", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-org-impersonation-roles-iam-binding", "message": "Ensure no roles that enable to impersonate and manage all service accounts are used at an organization level\t", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-org-member-default-service-account-iam-binding", "message": "Ensure default service account is not used at an organization level", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-artifact-registry-encrypted-with-cmk", "message": "Ensure Artifact Registry Repositories are encrypted with Customer Supplied Encryption Keys (CSEK)", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-compute-firewall-unrestricted-ingress-21", "message": "Ensure Google compute firewall ingress does not allow unrestricted FTP access", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-compute-firewall-unrestricted-ingress-22", "message": "Ensure Google compute firewall ingress does not allow unrestricted SSH access", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-gke-monitoring-enabled", "message": "Ensure monitoring is set to Enabled on Kubernetes Engine Clusters", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-compute-firewall-unrestricted-ingress-3389", "message": "Ensure Google compute firewall ingress does not allow unrestricted RDP access", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-datafusion-stack-driver-logging", "message": "Ensure Datafusion has stack driver logging enabled.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-org-impersonation-roles-iam-member", "message": "Ensure no roles that enable to impersonate and manage all service accounts are used at an organization level\t", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-gke-client-certificate-disabled", "message": "Ensure client certificate authentication to Kubernetes Engine Clusters is disabled", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-datafusion-private-instance", "message": "Ensure Data fusion instances are private", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-gke-basic-auth", "message": "Ensure GKE basic auth is disabled\t", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-gke-network-policy-enabled", "message": "Ensure Network Policy is enabled on Kubernetes Engine Clusters", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-compute-firewall-unrestricted-ingress-80", "message": "Ensure Google compute firewall ingress does not allow unrestricted HTTP access", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-run-private-service-iam-member", "message": "Ensure that GCP Cloud Run services are not anonymously or publicly accessible", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-bigquery-private-table-iam-member", "message": "Ensure that BigQuery Tables are not anonymously or publicly accessible\t\t", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-cloud-storage-logging", "message": "Ensure bucket logs access.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-gke-nodepool-integrity-monitoring", "message": "Ensure Integrity Monitoring for Shielded GKE Nodes is Enabled", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "gcp-folder-member-default-service-account-iam-member", "message": "Ensure Default Service account is not used at a folder level", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "elastic-search-encryption-at-rest", "message": "Encryption at rest is not enabled for the elastic search domain resource", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "ecr-image-scan-on-push", "message": "The ECR Repository isn't configured to scan images on push", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "eks-insufficient-control-plane-logging", "message": "Missing EKS control plane logging. It is recommended to enable at least Kubernetes API server component logs (\"api\") and audit logs (\"audit\") of the EKS control plane through the enabled_cluster_log_types attribute.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "s3-unencrypted-bucket", "message": "This rule has been deprecated, as all s3 buckets are encrypted by default with no way to disable it. See https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket_server_side_encryption_configuration for more info.", "parent_source": "community", "severity": "`INFO`", "languages": "Terraform"}, {"identifier": "all-origins-allowed", "message": "CORS rule on bucket permits any origin", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "s3-public-read-bucket", "message": "S3 bucket with public read access detected.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "rds-insecure-password-storage-in-source-code", "message": "RDS instance or cluster with hardcoded credentials in source code. It is recommended to pass the credentials at runtime, or generate random credentials using the random_password resource.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "ec2-imdsv1-optional", "message": "AWS EC2 Instance allowing use of the IMDSv1", "parent_source": "community", "severity": "`ERROR`", "languages": "Terraform"}, {"identifier": "rds-public-access", "message": "RDS instance accessible from the Internet detected.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "s3-public-rw-bucket", "message": "S3 bucket with public read-write access detected.", "parent_source": "community", "severity": "`ERROR`", "languages": "Terraform"}, {"identifier": "eks-public-endpoint-enabled", "message": "The vpc_config resource inside the eks cluster has not explicitly disabled public endpoint access", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "unencrypted-ebs-volume", "message": "An EBS volume is configured without encryption enabled.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "no-iam-star-actions", "message": "Ensure that no IAM policies allow \"*\" as a statement's actions. This allows all actions to be performed on the specified resources, and is a violation of the principle of least privilege. Instead, specify the actions that a certain user or policy is allowed to take.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "no-iam-resource-exposure", "message": "Ensure IAM policies don't allow resource exposure. These actions can expose AWS resources to the public. For example `ecr:SetRepositoryPolicy` could let an attacker retrieve container images. Instead, use another action that doesn't expose AWS resources.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "no-iam-admin-privileges", "message": "IAM policies that allow full \"*-*\" admin privileges violates the principle of least privilege. This allows an attacker to take full control over all AWS account resources. Instead, give each user more fine-grained control with only the privileges they need. $TYPE", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "no-iam-data-exfiltration", "message": "Ensure that IAM policies don't allow data exfiltration actions that are not resource-constrained. This can allow the user to read sensitive data they don't need to read. Instead, make sure that the user granted these privileges are given these permissions on specific resources.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "no-iam-priv-esc-funcs", "message": "Ensure that actions that can result in privilege escalation are not used. These actions could potentially result in an attacker gaining full administrator access of an AWS account. Try not to use these actions.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "no-iam-priv-esc-roles", "message": "Ensure that groups of actions that include iam:PassRole and could result in privilege escalation are not all allowed for the same user. These actions could result in an attacker gaining full admin access of an AWS account. Try not to use these actions in conjuction.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "no-iam-creds-exposure", "message": "Ensure IAM policies don't allow credentials exposure. Credentials exposure actions return credentials as part of the API response, and can possibly lead to leaking important credentials. Instead, use another action that doesn't return sensitive data as part of the API response.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "no-iam-priv-esc-other-users", "message": "Ensure that IAM policies with permissions on other users don't allow for privilege escalation. This can lead to an attacker gaining full administrator access of AWS accounts. Instead, specify which user the permission should be used on or do not use the listed actions. $RESOURCE", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-synapse-workscape-enables-managed-virtual-network", "message": "Ensure that Azure Synapse workspaces enables managed virtual networks", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-appgateway-enables-waf", "message": "Ensure that Application Gateway enables WAF", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-functionapp-http-version-latest", "message": "Ensure that HTTP Version is the latest if used to run the Function app", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-defenderon-container-registry", "message": "Ensure that Azure Defender is set to On for Container", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-defenderon-sqlservers", "message": "Ensure that Azure Defender is set to On for SQL servers", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-securitycenter-standard-pricing", "message": "Ensure that standard pricing tier is selected", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-networkinterface-enable-ip-forwarding", "message": "Ensure that Network Interfaces disable IP forwarding", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-postgresql-flexi-server-geo-backup-enabled", "message": "Ensure that PostgreSQL Flexible server enables geo-redundant backups", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-mariadb-geo-backup-enabled", "message": "Ensure that MariaDB server enables geo-redundant backups", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-storage-account-enables-secure-transfer", "message": "Ensure that storage account enables secure transfer", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-sqlserver-email-alerts-toadmins-enabled", "message": "Ensure that Email service and co-administrators is Enabled for MSSQL servers", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-mysql-threat-detection-enabled", "message": "Ensure that MySQL server enables Threat detection policy", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-mariadb-sslenforcement-enabled", "message": "Ensure Enforce SSL connection is set to Enabled for MariaDB servers", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-appservice-https-20-enabled", "message": "Ensure that HTTP Version is the latest if used to run the web app", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-postgresql-ssl-enforcement-enabled", "message": "Ensure Enforce SSL connection is set to Enabled for PostgreSQL servers", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-securitycenter-contact-emails", "message": "Ensure that Security contact emails is set", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-postgresql-server-log-checkpoint-enabled", "message": "Ensure server parameter log_checkpoints is set to ON for PostgreSQL Database Server", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-securitcenter-email-alert", "message": "Ensure that Send email notification for high severity alerts is set to On", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-keyvault-recovery-enabled", "message": "Ensure the key vault is recoverable https://docs.bridgecrew.io/docs/ensure-the-key-vault-is-recoverable", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-appservice-php-version", "message": "Ensure that PHP version is the latest, if used to run the web app", "parent_source": "community", "severity": "`INFO`", "languages": "Terraform"}, {"identifier": "azure-securitycenter-email-alert-admins", "message": "Ensure that Send email notification for high severity alerts is set to On", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-functionapps-accessible-over-https", "message": "Ensure that HTTP Version is the latest if used to run the Function app", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-aks-uses-azure-policies-addon", "message": "Ensure that AKS uses Azure Policies Add-on", "parent_source": "community", "severity": "`INFO`", "languages": "Terraform"}, {"identifier": "azure-monitor-log-profile-categories", "message": "Ensure audit profile captures all the activities", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-postgresql-geo-backup-enabled", "message": "Ensure that PostgreSQL server enables geo-redundant backups", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-defenderon-kubernetes", "message": "Ensure that Azure Defender is set to On for Kubernetes", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-waf-specificed-mode-app-gw", "message": "Ensure that Application Gateway uses WAF in \u201cDetection\u201d or \u201cPrevention\u201d modes", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-secret-content-type", "message": "Ensure that key vault secrets have \u201ccontent_type\u201d set", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-defenderon-servers", "message": "Ensure that Azure Defender is set to On for Servers", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-defenderon-keyvaults", "message": "Ensure that Azure Defender is set to On for Key Vault", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-frontdoor-use-wafmode", "message": "Ensure that Azure Front Door uses WAF and configured in \u201cDetection\u201d or \u201cPrevention\u201d modes", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-securitycenter-contact-phone", "message": "Ensure that Security contact Phone number is set", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-keyvault-enables-firewall-rules-settings", "message": "Ensure that key vault allows firewall rules settings", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-defenderon-sqlservers-vms", "message": "Ensure that Azure Defender is set to On for SQL servers on machines", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-secret-expiration-date", "message": "Ensure that the expiration date is set on all secrets", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-defenderon-storage", "message": "Ensure that Azure Defender is set to On for Storage", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-sqlserver-email-alerts-enabled", "message": "Ensure that Send Alerts To is enabled for MSSQL servers", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-vmscale-sets-auto-os-image-patching-enabled", "message": "Ensure that automatic OS image patching is enabled for Virtual Machine Scale Sets", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-mysql-geo-backup-enabled", "message": "Ensure that MySQL server enables geo-redundant backups", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-appservice-python-version", "message": "Ensure that Python version is the latest, if used to run the web app", "parent_source": "community", "severity": "`INFO`", "languages": "Terraform"}, {"identifier": "azure-postgresql-threat-detection-enabled", "message": "Ensure that PostgreSQL server enables Threat detection policy", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-ad-used-auth-service-fabric", "message": "Ensures that Active Directory is used for authentication for Service Fabric\t", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-postgresql-server-connection-throttling-enabled", "message": "Ensure server parameter connection_throttling is set to ON for PostgreSQL Database Server", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-appservice-ftps-state", "message": "Ensure FTP deployments are disabled", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-defenderon-appservices", "message": "Ensure that Azure Defender is set to On for App Service", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-sqlserver-threat-detection-types", "message": "Ensure that Threat Detection types is set to All", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-appservice-dotnet-framework-version", "message": "Ensure that Net Framework version is the latest, if used as a part of the web app", "parent_source": "community", "severity": "`INFO`", "languages": "Terraform"}, {"identifier": "azure-keyvault-enables-purge-protection", "message": "Ensure that key vault enables purge protection", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-appservice-java-version", "message": "Ensure that Java version is the latest, if used to run the web app", "parent_source": "community", "severity": "`INFO`", "languages": "Terraform"}, {"identifier": "azure-appservice-used-azure-files", "message": "Ensure that app services use Azure Files", "parent_source": "community", "severity": "`INFO`", "languages": "Terraform"}, {"identifier": "azure-monitor-log-profile-retention-days", "message": "Ensure that Activity Log Retention is set 365 days or greater", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-frontdoor-enables-waf", "message": "Ensure that Azure Front Door enables WAF", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-keyvault-enables-soft-delete", "message": "Ensure that key vault enables soft delete", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-mysql-server-tlsenforcement-enabled", "message": "Ensure Enforce SSL connection is set to Enabled for MySQL servers", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-postgresql-server-log-connections-enabled", "message": "Ensure server parameter log_connections is set to ON for PostgreSQL Database Server", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-redis-cache-enable-non-ssl-port", "message": "Ensure that only SSL are enabled for Cache for Redis", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-instance-extensions", "message": "Ensure Virtual Machine Extensions are not Installed", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-redis-cache-public-network-access-enabled", "message": "Ensure that Azure Cache for Redis disables public network access", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-cosmosdb-disable-access-key-write", "message": "Ensure that Cosmos DB accounts have access key write capability disabled", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-mariadb-public-access-disabled", "message": "Ensure public network access enabled is set to False for MariaDB servers", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-sqlserver-public-access-disabled", "message": "Ensure that SQL server disables public network access", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-datafactory-uses-git-repository", "message": "Ensure that Azure Data Factory uses Git repository for source control", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-functionapps-enable-auth", "message": "Ensure that function apps enables Authentication", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-postgresql-server-public-access-disabled", "message": "Ensure public network access enabled is set to False for PostgreSQL servers", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-managed-disk-encryption", "message": "Ensure Azure managed disk has encryption enabled", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-remote-debugging-not-enabled", "message": "Ensure that remote debugging is not enabled for app services", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-cosmosdb-accounts-restricted-access", "message": "Ensure Cosmos DB accounts have restricted access", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-mysql-mintls-version", "message": "Ensure MySQL is using the latest version of TLS encryption", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-search-publicnetwork-access-disabled", "message": "Ensure that Azure Cognitive Search disables public network access", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-cosmosdb-have-cmk", "message": "Ensure that Cosmos DB accounts have customer-managed keys to encrypt data at rest", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-customrole-definition-subscription-owner", "message": "Ensure that no custom subscription owner roles are created", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-postgresql-encryption-enabled", "message": "Ensure that PostgreSQL server enables infrastructure encryption", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-storage-account-disable-public-access", "message": "Ensure default network access rule for Storage Accounts is set to deny", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-dataexplorer-uses-disk-encryption", "message": "Ensure that Azure Data Explorer uses disk encryption", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-functionapp-disallow-cors", "message": "ensure that CORS disallows all resources to access Function app", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-sqlserver-no-public-access", "message": "Ensure no SQL Databases allow ingress from 0.0.0.0/0 (ANY IP)", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-storage-account-minimum-tlsversion", "message": "Ensure Storage Account is using the latest version of TLS encryption", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-vmencryption-at-host-enabled", "message": "Ensure that Virtual machine scale sets have encryption at host enabled", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-mssql-service-mintls-version", "message": "Ensure MSSQL is using the latest version of TLS encryption", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-dataexplorer-double-encryption-enabled", "message": "Ensure that Azure Data Explorer uses double encryption", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-batchaccount-uses-keyvault-encrpytion", "message": "Ensure that Azure Batch account uses key vault to encrypt data", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-network-watcher-flowlog-period", "message": "Ensure that Network Security Group Flow Log retention period is 90 days or greater", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-storage-sync-public-access-disabled", "message": "Ensure that Azure File Sync disables public network access", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-datalake-store-encryption", "message": "Ensure that Data Lake Store accounts enables encryption", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-key-no-expiration-date", "message": "Ensure that the expiration date is set on all keys", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-mysql-public-access-disabled", "message": "Ensure public network access enabled is set to False for MySQL servers", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-service-fabric-cluster-protection-level", "message": "Ensure that Service Fabric use three levels of protection available", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-storage-blob-service-container-private-access", "message": "Ensure that Public access level is set to Private for blob containers", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-scale-set-password", "message": "Ensure that Virtual machine does not enable password authentication", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-postgresql-min-tls-version", "message": "Ensure PostgreSQL is using the latest version of TLS encryption", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-automation-encrypted", "message": "Ensure that Automation account variables are encrypted", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-key-backedby-hsm", "message": "Ensure that key vault key is backed by HSM", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-iot-no-public-network-access", "message": "Ensure that Azure IoT Hub disables public network access", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-datafactory-no-public-network-access", "message": "Ensure that Azure Data factory public network access is disabled", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-managed-disk-encryption-set", "message": "Ensure that managed disks use a specific set of disk encryption sets for the customer-managed key encryption", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-containergroup-deployed-into-virtualnetwork", "message": "Ensure that Azure Container group is deployed into virtual network", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-eventgrid-domain-network-access", "message": "Ensure that Azure Event Grid Domain public network access is disabled", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-cognitiveservices-disables-public-network", "message": "Ensure that Cognitive Services accounts disable public network access", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-cosmosdb-disables-public-network", "message": "Ensure that Azure Cosmos DB disables public network access", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-monitor-log-profile-retention-days", "message": "Ensure that Activity Log Retention is set 365 days or greater", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-mysql-encryption-enabled", "message": "Ensure that MySQL server enables infrastructure encryption", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "keyvault-specify-network-acl", "message": "Network ACLs allow you to reduce your exposure to risk by limiting what can access your key vault. The default action of the Network ACL should be set to deny for when IPs are not matched. Azure services can be allowed to bypass.", "parent_source": "community", "severity": "`ERROR`", "languages": "Terraform"}, {"identifier": "keyvault-ensure-secret-expires", "message": "Ensure that the expiration date is set on all secrets", "parent_source": "community", "severity": "`INFO`", "languages": "Terraform"}, {"identifier": "keyvault-purge-enabled", "message": "Key vault should have purge protection enabled", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "keyvault-content-type-for-secret", "message": "Key vault Secret should have a content type set", "parent_source": "community", "severity": "`INFO`", "languages": "Terraform"}, {"identifier": "keyvault-ensure-key-expires", "message": "Ensure that the expiration date is set on all keys", "parent_source": "community", "severity": "`INFO`", "languages": "Terraform"}, {"identifier": "azure-apiservices-use-virtualnetwork", "message": "Ensure that API management services use virtual networks", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "appservice-authentication-enabled", "message": "Enabling authentication ensures that all communications in the application are authenticated. The `auth_settings` block needs to be filled out with the appropriate auth backend settings", "parent_source": "community", "severity": "`ERROR`", "languages": "Terraform"}, {"identifier": "azure-appservice-auth", "message": "Ensure App Service Authentication is set on Azure App Service", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-appservice-identity", "message": "Ensure App Service Authentication is set on Azure App Service", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-appservice-identityprovider-enabled", "message": "Ensure that Managed identity provider is enabled for app services", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-appservice-https-only", "message": "Ensure web app redirects all HTTP traffic to HTTPS in Azure App Service Slot", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "appservice-enable-https-only", "message": "By default, clients can connect to App Service by using both HTTP or HTTPS. HTTP should be disabled enabling the HTTPS Only setting.", "parent_source": "community", "severity": "`ERROR`", "languages": "Terraform"}, {"identifier": "azure-appservice-http-logging-enabled", "message": "Ensure that App service enables HTTP logging", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "appservice-enable-http2", "message": "Use the latest version of HTTP to ensure you are benefiting from security fixes. Add `http2_enabled = true` to your appservice resource block", "parent_source": "community", "severity": "`INFO`", "languages": "Terraform"}, {"identifier": "appservice-account-identity-registered", "message": "Registering the identity used by an App with AD allows it to interact with other services without using username and password. Set the `identity` block in your appservice.", "parent_source": "community", "severity": "`INFO`", "languages": "Terraform"}, {"identifier": "azure-appservice-min-tls-version", "message": "Ensure web app is using the latest version of TLS encryption", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-appservice-detailed-errormessages-enabled", "message": "Ensure that App service enables detailed error messages", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-appservice-enabled-failed-request", "message": "Ensure that App service enables failed request tracing", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "appservice-require-client-cert", "message": "Detected an AppService that was not configured to use a client certificate. Add `client_cert_enabled = true` in your resource block.", "parent_source": "community", "severity": "`INFO`", "languages": "Terraform"}, {"identifier": "appservice-use-secure-tls-policy", "message": "Detected an AppService that was not configured to use TLS 1.2. Add `site_config.min_tls_version = \"1.2\"` in your resource block.", "parent_source": "community", "severity": "`ERROR`", "languages": "Terraform"}, {"identifier": "azure-appservice-client-certificate", "message": "Ensure the web app has Client Certificates", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-appservice-disallowed-cors", "message": "Ensure that CORS disallows every resource to access app services", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-aks-uses-disk-encryptionset", "message": "Ensure that AKS uses disk encryption set", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-aks-private-clusters-enabled", "message": "Ensure that AKS enables private clusters\t", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "azure-aks-apiserver-auth-ip-ranges", "message": "Ensure AKS has an API Server Authorized IP Ranges enabled\t", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "storage-enforce-https", "message": "Detected a Storage that was not configured to deny action by default. Add `enable_https_traffic_only = true` in your resource block.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "storage-queue-services-logging", "message": "Storage Analytics logs detailed information about successful and failed requests to a storage service. This information can be used to monitor individual requests and to diagnose issues with a storage service. Requests are logged on a best-effort basis.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "storage-use-secure-tls-policy", "message": "Azure Storage currently supports three versions of the TLS protocol: 1.0, 1.1, and 1.2. Azure Storage uses TLS 1.2 on public HTTPS endpoints, but TLS 1.0 and TLS 1.1 are still supported for backward compatibility. This check will warn if the minimum TLS is not set to TLS1_2.", "parent_source": "community", "severity": "`ERROR`", "languages": "Terraform"}, {"identifier": "storage-allow-microsoft-service-bypass", "message": "Some Microsoft services that interact with storage accounts operate from networks that can't be granted access through network rules. To help this type of service work as intended, allow the set of trusted Microsoft services to bypass the network rules", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "storage-default-action-deny", "message": "Detected a Storage that was not configured to deny action by default. Add `default_action = \"Deny\"` in your resource block.", "parent_source": "community", "severity": "`ERROR`", "languages": "Terraform"}, {"identifier": "functionapp-enable-http2", "message": "Use the latest version of HTTP to ensure you are benefiting from security fixes. Add `http2_enabled = true` to your function app resource block", "parent_source": "community", "severity": "`INFO`", "languages": "Terraform"}, {"identifier": "functionapp-authentication-enabled", "message": "Enabling authentication ensures that all communications in the application are authenticated. The `auth_settings` block needs to be filled out with the appropriate auth backend settings", "parent_source": "community", "severity": "`INFO`", "languages": "Terraform"}, {"identifier": "aws-s3-bucket-versioning-not-enabled", "message": "Ensure that Amazon S3 bucket versioning is not enabled. Consider using versioning if you don't have alternative backup mechanism.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "missing-aws-lb-deletion-protection", "message": "The AWS LoadBalancer deletion protection is not enabled.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "missing-cloudwatch-log-group-kms-key", "message": "The AWS CloudWatch Log group is missing a KMS key. While Log group data is always encrypted, you can optionally use a KMS key instead. Add `kms_key_id = \"yourKey\"` to your resource block.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-rds-multiaz-not-enabled", "message": "The AWS RDS is not configured to use multi-az. Consider using it if possible.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-elasticache-automatic-backup-not-enabled", "message": "Ensure that Amazon ElastiCache clusters have automatic backup turned on. To fix this, set a `snapshot_retention_limit`.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-s3-object-lock-not-enabled", "message": "The AWS S3 object lock is not enabled. Consider using it if possible.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "missing-api-gateway-cache-cluster", "message": "Found a AWS API Gateway Stage without cache cluster enabled. Enabling the cache cluster feature enhances responsiveness of your API. Add `cache_cluster_enabled = true` to your resource block.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "missing-aws-qldb-deletion-protection", "message": "The AWS QLDB deletion protection is not enabled.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "missing-aws-cross-zone-lb", "message": "The AWS cross zone load balancing is not enabled.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "missing-alb-drop-http-headers", "message": "Detected a AWS load balancer that is not configured to drop invalid HTTP headers. Add `drop_invalid_header_fields = true` in your resource block.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-qldb-inadequate-ledger-permissions-mode", "message": "The AWS QLDB ledger permissions are too permissive. Consider using \"'STANDARD'\" permissions mode if possible.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-rds-iam-authentication-not-enabled", "message": "The AWS RDS is not configured to use IAM authentication. Consider using IAM for authentication.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "missing-autoscaling-group-tags", "message": "There are missing tags for an AWS Auto Scaling group. Tags help track costs, allow for filtering for Auto Scaling groups, help with access control, and aid in organizing AWS resources. Add: `tag {\n  key = \"key\"\n  value = \"value\"\n  propagate_at_launch = boolean\n}` See https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/autoscaling_group for more details.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-rds-cluster-iam-authentication-not-enabled", "message": "The AWS RDS Cluster is not configured to use IAM authentication. Consider using IAM for authentication.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "missing-cloudwatch-log-group-retention", "message": "The AWS CloudWatch Log group is missing log retention time. By default, logs are retained indefinitely. Add `retention_in_days = <integer>` to your resource block.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "missing-aws-autoscaling-tags", "message": "The AWS Autoscaling Group is not tagged.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "subscription-filter-missing-depends", "message": "The `aws_cloudwatch_log_subscription_filter` resource \"$NAME\" needs a `depends_on` clause on the `aws_lambda_permission`, otherwise Terraform may try to create these out-of-order and fail.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "lambda-redundant-field-with-image", "message": "When using the AWS Lambda \"Image\" package_type, `runtime` and `handler` are not necessary for Lambda to understand how to run the code. These are built into the container image. Including `runtime` or `handler` with an \"Image\" `package_type` will result in an error on `terraform apply`. Remove these redundant fields.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "lambda-permission-logs-missing-arn-asterisk", "message": "The `source_arn` field needs to end with an asterisk, like this: `<log-group-arn>:*` Without this, the `aws_lambda_permission` resource '$NAME' will not be created. Add the asterisk to the end of the arn. x $ARN", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "reserved-aws-lambda-environment-variable", "message": "`terraform apply` will fail because the environment variable \"$VARIABLE\" is a reserved by AWS. Use another name for \"$VARIABLE\".", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-lambda-permission-unrestricted-source-arn", "message": "The AWS Lambda permission has an AWS service principal but does not specify a source ARN. If you grant permission to a service principal without specifying the source, other accounts could potentially configure resources in their account to invoke your Lambda function. Set the source_arn value to the ARN of the AWS resource that invokes the function, eg. an S3 bucket, CloudWatch Events Rule, API Gateway, or SNS topic.", "parent_source": "community", "severity": "`ERROR`", "languages": "Terraform"}, {"identifier": "aws-kinesis-video-stream-encrypted-with-cmk", "message": "Ensure Kinesis video stream is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-sqs-queue-policy-wildcard-action", "message": "Wildcard used in your SQS queue policy action. SQS queue policies should always grant least privilege - that is, only grant the permissions required to perform a specific task. Implementing least privilege is important to reducing security risks and reducing the effect of errors or malicious intent.", "parent_source": "community", "severity": "`INFO`", "languages": "Terraform"}, {"identifier": "aws-fsx-lustre-filesystem-encrypted-with-cmk", "message": "Ensure FSX Lustre file system is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-ebs-volume-unencrypted", "message": "The AWS EBS volume is unencrypted. The volume, the disk I/O and any derived snapshots could be read if compromised. Volumes should be encrypted to ensure sensitive data is stored securely.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-insecure-redshift-ssl-configuration", "message": "Detected an AWS Redshift configuration with a SSL disabled. To fix this, set your `require_ssl` to `\"true\"`.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-ec2-launch-configuration-root-block-device-unencrypted", "message": "The AWS launch configuration root block device is unencrypted. The block device could be read if compromised. Block devices should be encrypted to ensure sensitive data is held securely at rest.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-workspaces-user-volume-unencrypted", "message": "The AWS Workspace user volume is unencrypted. The AWS KMS encryption key protects user volume. To create your own, create a aws_kms_key resource or use the ARN string of a key in your account.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-opensearchserverless-encrypted-with-cmk", "message": "Ensure opensearch serverless is encrypted at rest using AWS KMS (Key Management Service) CMK (Customer Managed Keys). CMKs give you control over the encryption key in terms of access and rotation.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-ebs-unencrypted", "message": "The AWS EBS is unencrypted. The AWS EBS encryption protects data in the EBS.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-transfer-server-is-public", "message": "Transfer Server endpoint type should not have public or null configured in order to block public access. To fix this, set your `endpoint_type` to `\"VPC\"`.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-cloudtrail-encrypted-with-cmk", "message": "Ensure CloudTrail logs are encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-imagebuilder-component-encrypted-with-cmk", "message": "Ensure ImageBuilder component is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-sqs-queue-policy-wildcard-principal", "message": "Wildcard used in your SQS queue policy principal. This grants access to all users, including anonymous users (public access). Unless you explicitly require anyone on the internet to be able to read or write to your queue, limit principals, actions and resources to what you need according to least privilege.", "parent_source": "community", "severity": "`ERROR`", "languages": "Terraform"}, {"identifier": "aws-glacier-vault-any-principal", "message": "Detected wildcard access granted to Glacier Vault. This means anyone within your AWS account ID can perform actions on Glacier resources. Instead, limit to a specific identity in your account, like this: `arn:aws:iam::<account_id>:<identity>`.", "parent_source": "community", "severity": "`ERROR`", "languages": "Terraform"}, {"identifier": "aws-redshift-cluster-encrypted-with-cmk", "message": "Ensure AWS Redshift cluster is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-ebs-snapshot-encrypted-with-cmk", "message": "Ensure EBS Snapshot is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-sagemaker-domain-encrypted-with-cmk", "message": "Ensure AWS Sagemaker domains are encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-sqs-queue-unencrypted", "message": "The AWS SQS queue contents are unencrypted. The data could be read if compromised. Enable server-side encryption for your queue using SQS-managed encryption keys (SSE-SQS), or using your own AWS KMS key (SSE-KMS).", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-ec2-security-group-rule-missing-description", "message": "The AWS security group rule is missing a description, or its description is empty or the default value.  Security groups rules should include a meaningful description in order to simplify auditing, debugging, and managing security groups.", "parent_source": "community", "severity": "`INFO`", "languages": "Terraform"}, {"identifier": "aws-fsx-ontapfs-encrypted-with-cmk", "message": "Ensure FSX ONTAP file system is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "wildcard-assume-role", "message": "Detected wildcard access granted to sts:AssumeRole. This means anyone with your AWS account ID and the name of the role can assume the role. Instead, limit to a specific identity in your account, like this: `arn:aws:iam::<account_id>:root`.", "parent_source": "community", "severity": "`ERROR`", "languages": "Terraform"}, {"identifier": "aws-fsx-windows-encrypted-with-cmk", "message": "Ensure FSX Windows file system is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-cloudwatch-log-group-no-retention", "message": "The AWS CloudWatch Log Group has no retention. Missing retention in log groups can cause losing important event information.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-insecure-cloudfront-distribution-tls-version", "message": "Detected an AWS CloudFront Distribution with an insecure TLS version. TLS versions less than 1.2 are considered insecure because they can be broken. To fix this, set your `minimum_protocol_version` to `\"TLS1.2_2018\", \"TLS1.2_2019\" or \"TLS1.2_2021\"`.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-iam-admin-policy-ssoadmin", "message": "Detected admin access granted in your policy. This means anyone with this policy can perform administrative actions. Instead, limit actions and resources to what you need according to least privilege.", "parent_source": "community", "severity": "`ERROR`", "languages": "Terraform"}, {"identifier": "aws-ecr-repository-wildcard-principal", "message": "Detected wildcard access granted in your ECR repository policy principal. This grants access to all users, including anonymous users (public access). Instead, limit principals, actions and resources to what you need according to least privilege.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-kms-key-wildcard-principal", "message": "Detected wildcard access granted in your KMS key. This means anyone with this policy can perform administrative actions over the keys. Instead, limit principals, actions and resources to what you need according to least privilege.", "parent_source": "community", "severity": "`ERROR`", "languages": "Terraform"}, {"identifier": "aws-elasticsearch-insecure-tls-version", "message": "Detected an AWS Elasticsearch domain using an insecure version of TLS. To fix this, set \"tls_security_policy\" equal to \"Policy-Min-TLS-1-2-2019-07\".", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-timestream-database-encrypted-with-cmk", "message": "Ensure Timestream database is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-ebs-volume-encrypted-with-cmk", "message": "Ensure EBS Volume is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "missing-athena-workgroup-encryption", "message": "The AWS Athena Workgroup is unencrypted. Encryption protects query results in your workgroup. To enable, add: `encryption_configuration { encryption_option = \"SSE_KMS\" kms_key_arn =  aws_kms_key.example.arn }` within `result_configuration { }` in your resource block,  where `encryption_option` is your chosen encryption method and `kms_key_arn`  is your KMS key ARN.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-lambda-x-ray-tracing-not-active", "message": "The AWS Lambda function does not have active X-Ray tracing enabled. X-Ray tracing enables end-to-end debugging and analysis of all function activity. This makes it easier to trace the flow of logs and identify bottlenecks, slow downs and timeouts.", "parent_source": "community", "severity": "`INFO`", "languages": "Terraform"}, {"identifier": "aws-provisioner-exec", "message": "Provisioners are a tool of last resort and should be avoided where possible. Provisioner behavior cannot be mapped by Terraform as part of a plan, and execute arbitrary shell commands by design.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-elb-access-logs-not-enabled", "message": "ELB has no logging. Missing logs can cause missing important event information.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-insecure-api-gateway-tls-version", "message": "Detected AWS API Gateway to be using an insecure version of TLS. To fix this issue make sure to set \"security_policy\" equal to \"TLS_1_2\".", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-network-acl-allows-public-ingress", "message": "The network ACL rule allows ingress from public internet. Opening up ACLs to the public internet is potentially dangerous. You should restrict access to IP addresses or ranges that explicitly require it where possible. Set a more restrictive CIDR range.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-athena-workgroup-unencrypted", "message": "The AWS Athena Work Group is unencrypted. The AWS KMS encryption key protects backups in the work group. To create your own, create a aws_kms_key resource or use the ARN string of a key in your account.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-elasticache-replication-group-encrypted-with-cmk", "message": "This rule has been deprecated.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-documentdb-auditing-disabled", "message": "Auditing is not enabled for DocumentDB. To ensure that you are able to accurately audit the usage of your DocumentDB cluster, you should enable auditing and export logs to CloudWatch.", "parent_source": "community", "severity": "`INFO`", "languages": "Terraform"}, {"identifier": "aws-kinesis-stream-encrypted-with-cmk", "message": "Ensure Kinesis stream is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-network-acl-allows-all-ports", "message": "Ingress and/or egress is allowed for all ports in the network ACL rule. Ensure access to specific required ports is allowed, and nothing else.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-codebuild-artifacts-unencrypted", "message": "The CodeBuild project artifacts are unencrypted. All artifacts produced by your CodeBuild project pipeline should be encrypted to prevent them from being read if compromised.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-lambda-environment-unencrypted", "message": "By default, the AWS Lambda Environment is encrypted using AWS-managed keys. However, for added security, it's recommended to configure your own AWS KMS encryption key to protect your environment variables in Lambda. You can either create a new aws_kms_key resource or use the ARN of an existing key in your AWS account to do so.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-sns-topic-unencrypted", "message": "The AWS SNS topic is unencrypted. The SNS topic messages could be read if compromised. The AWS KMS encryption key protects topic contents. To create your own, create a aws_kms_key resource or use the ARN string of a key in your account.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-lambda-environment-credentials", "message": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`ERROR`", "languages": "Terraform"}, {"identifier": "aws-subnet-has-public-ip-address", "message": "Resources in the AWS subnet are assigned a public IP address. Resources should not be exposed on the public internet, but should have access limited to consumers required for the function of your application. Set `map_public_ip_on_launch` to false so that resources are not publicly-accessible.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-ec2-has-public-ip", "message": "EC2 instances should not have a public IP address attached in order to block public access to the instances. To fix this, set your `associate_public_ip_address` to `\"false\"`.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-config-aggregator-not-all-regions", "message": "The AWS configuration aggregator does not aggregate all AWS Config region. This may result in unmonitored configuration in regions that are thought to be unused. Configure the aggregator with all_regions for the source.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-ecr-mutable-image-tags", "message": "The ECR repository allows tag mutability. Image tags could be overwritten with compromised images. ECR images should be set to IMMUTABLE to prevent code injection through image mutation. This can be done by setting `image_tag_mutability` to IMMUTABLE.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "insecure-load-balancer-tls-version", "message": "Detected an AWS load balancer with an insecure TLS version. TLS versions less than 1.2 are considered insecure because they can be broken. To fix this, set your `ssl_policy` to `\"ELBSecurityPolicy-TLS13-1-2-2021-06\"`, or include a default action to redirect to HTTPS.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-kinesis-stream-unencrypted", "message": "The AWS Kinesis stream does not encrypt data at rest. The data could be read if the Kinesis stream storage layer is compromised. Enable Kinesis stream server-side encryption.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-athena-database-unencrypted", "message": "The Athena database is unencrypted at rest. These databases are generally derived from data in S3 buckets and should have the same level of at rest protection. The AWS KMS encryption key protects database contents. To create your own, create a aws_kms_key resource or use the ARN string of a key in your account.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-ec2-launch-template-metadata-service-v1-enabled", "message": "The EC2 launch template has Instance Metadata Service Version 1 (IMDSv1) enabled. IMDSv2 introduced session authentication tokens which improve security when talking to IMDS. You should either disable IMDS or require the use of IMDSv2.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-docdb-encrypted-with-cmk", "message": "Ensure DocDB is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-rds-backup-no-retention", "message": "The AWS RDS has no retention. Missing retention can cause losing important event information. To fix this, set a `backup_retention_period`.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-s3-object-copy-encrypted-with-cmk", "message": "Ensure S3 object copies are encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-ec2-launch-configuration-ebs-block-device-unencrypted", "message": "The AWS launch configuration EBS block device is unencrypted. The block device could be read if compromised. Block devices should be encrypted to ensure sensitive data is held securely at rest.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-workspaces-root-volume-unencrypted", "message": "The AWS Workspace root volume is unencrypted. The AWS KMS encryption key protects root volume. To create your own, create a aws_kms_key resource or use the ARN string of a key in your account.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-elasticsearch-nodetonode-encryption-not-enabled", "message": "Ensure all Elasticsearch has node-to-node encryption enabled.\t", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-dynamodb-table-unencrypted", "message": "By default, AWS DynamoDB Table is encrypted using AWS-managed keys. However, for added security, it's recommended to configure your own AWS KMS encryption key to protect your data in the DynamoDB table. You can either create a new aws_kms_key resource or use the ARN of an existing key in your AWS account to do so.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-iam-admin-policy", "message": "Detected admin access granted in your policy. This means anyone with this policy can perform administrative actions. Instead, limit actions and resources to what you need according to least privilege.", "parent_source": "community", "severity": "`ERROR`", "languages": "Terraform"}, {"identifier": "aws-dynamodb-point-in-time-recovery-disabled", "message": "Point-in-time recovery is not enabled for the DynamoDB table. DynamoDB tables should be protected against accidental or malicious write/delete actions. By enabling point-in-time-recovery you can restore to a known point in the event of loss of data.", "parent_source": "community", "severity": "`INFO`", "languages": "Terraform"}, {"identifier": "aws-db-instance-no-logging", "message": "Database instance has no logging. Missing logs can cause missing important event information.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "unrestricted-github-oidc-policy", "message": "`$POLICY` is missing a `condition` block which scopes users of this policy to specific GitHub repositories. Without this, `$POLICY` is open to all users on GitHub. Add a `condition` block on the variable `token.actions.githubusercontent.com:sub` which scopes it to prevent this.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-codebuild-project-unencrypted", "message": "The AWS CodeBuild Project is unencrypted. The AWS KMS encryption key protects projects in the CodeBuild. To create your own, create a aws_kms_key resource or use the ARN string of a key in your account.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-s3-bucket-object-encrypted-with-cmk", "message": "Ensure S3 bucket object is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-ssm-document-logging-issues", "message": "The AWS SSM logs are unencrypted or disabled. Please enable logs and use AWS KMS encryption key to protect SSM logs. To create your own, create a aws_kms_key resource or use the ARN string of a key in your account.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-provider-static-credentials", "message": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-backup-vault-unencrypted", "message": "The AWS Backup vault is unencrypted. The AWS KMS encryption key protects backups in the Backup vault. To create your own, create a aws_kms_key resource or use the ARN string of a key in your account.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-emr-encrypted-with-cmk", "message": "Ensure EMR is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-secretsmanager-secret-unencrypted", "message": "By default, AWS SecretManager secrets are encrypted using AWS-managed keys. However, for added security, it's recommended to configure your own AWS KMS encryption key to protect your secrets in the Secret Manager. You can either create a new aws_kms_key resource or use the ARN of an existing key in your AWS account to do so.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-fsx-lustre-filesystem-encrypted-with-cmk", "message": "Ensure FSX Lustre file system is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-kms-no-rotation", "message": "The AWS KMS has no rotation. Missing rotation can cause leaked key to be used by attackers. To fix this, set a `enable_key_rotation`.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-cloudwatch-log-group-unencrypted", "message": "By default, AWS CloudWatch Log Group is encrypted using AWS-managed keys. However, for added security, it's recommended to configure your own AWS KMS encryption key to protect your log group in CloudWatch. You can either create a new aws_kms_key resource or use the ARN of an existing key in your AWS account to do so.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-ec2-security-group-allows-public-ingress", "message": "The security group rule allows ingress from public internet. Opening up ports to the public internet is potentially dangerous. You should restrict access to IP addresses or ranges that explicitly require it where possible. Set a more restrictive CIDR range.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-documentdb-storage-unencrypted", "message": "The AWS DocumentDB cluster is unencrypted. The data could be read if the underlying disks are compromised. You should enable storage encryption.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-ecr-image-scanning-disabled", "message": "The ECR repository has image scans disabled. Repository image scans should be enabled to ensure vulnerable software can be discovered and remediated as soon as possible.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-athena-client-can-disable-workgroup-encryption", "message": "The Athena workgroup configuration can be overriden by client-side settings. The client can make changes to disable encryption settings. Enforce the configuration to prevent client overrides.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-codebuild-project-artifacts-unencrypted", "message": "The AWS CodeBuild Project Artifacts are unencrypted. The AWS KMS encryption key protects artifacts in the CodeBuild Projects. To create your own, create a aws_kms_key resource or use the ARN string of a key in your account.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "aws-efs-filesystem-encrypted-with-cmk", "message": "Ensure EFS filesystem is encrypted at rest using KMS CMKs. CMKs gives you control over the encryption key in terms of access and rotation.", "parent_source": "community", "severity": "`WARNING`", "languages": "Terraform"}, {"identifier": "swift-potential-sqlite-injection", "message": "Potential Client-side SQL injection which has different impacts depending on the SQL use-case. The impact may include the circumvention of local authentication mechanisms, obtaining of sensitive data from the app, or manipulation of client-side behavior. It wasn't possible to make certain that the source is untrusted, but the application should avoid concatenating dynamic data into SQL queries and should instead leverage parameterized queries.", "parent_source": "community", "severity": "`WARNING`", "languages": "Swift"}, {"identifier": "swift-webview-config-allows-js-open-windows", "message": "Webviews were observed that explictly allow JavaScript in an WKWebview to open windows automatically. Consider disabling this functionality if not required, following the principle of least privelege.", "parent_source": "community", "severity": "`WARNING`", "languages": "Swift"}, {"identifier": "swift-user-defaults", "message": "Potentially sensitive data was observed to be stored in UserDefaults, which is not adequate protection of sensitive information. For data of a sensitive nature, applications should leverage the Keychain.", "parent_source": "community", "severity": "`WARNING`", "languages": "Swift"}, {"identifier": "insecure-random", "message": "A random number generator was detected which is **not** *guaranteed* to be Cryptographically secure. If the source of entropy is used for security purposes (e.g. with other Cryptographic operations), make sure to use the `SecCopyRandomBytes` API explicitly.", "parent_source": "community", "severity": "`WARNING`", "languages": "Swift"}, {"identifier": "secure-parameter-for-secrets", "message": "Mark sensitive parameters with the @secure() decorator. This avoids logging the value or displaying it in the Azure portal, Azure CLI, or Azure PowerShell.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "possible-nginx-h2c-smuggling", "message": "Conditions for Nginx H2C smuggling identified. H2C smuggling allows upgrading HTTP/1.1 connections to lesser-known HTTP/2 over cleartext (h2c) connections which can allow a bypass of reverse proxy access controls, and lead to long-lived, unrestricted HTTP traffic directly to back-end servers. To mitigate: WebSocket support required: Allow only the value websocket for HTTP/1.1 upgrade headers (e.g., Upgrade: websocket). WebSocket support not required: Do not forward Upgrade headers.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "dynamic-proxy-scheme", "message": "The protocol scheme for this proxy is dynamically determined. This can be dangerous if the scheme can be injected by an attacker because it may forcibly alter the connection scheme. Consider hardcoding a scheme for this proxy.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "alias-path-traversal", "message": "The alias in this location block is subject to a path traversal because the location path does not end in a path separator (e.g., '/'). To fix, add a path separator to the end of the path.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "header-injection", "message": "The $$VARIABLE path parameter is added as a header in the response. This could allow an attacker to inject a newline and add a new header into the response. This is called HTTP response splitting. To fix, do not allow whitespace in the path parameter: '[^\\s]+'.", "parent_source": "community", "severity": "`ERROR`", "languages": "Generic"}, {"identifier": "insecure-ssl-version", "message": "Detected use of an insecure SSL version. Secure SSL versions are TLSv1.2 and TLS1.3; older versions are known to be broken and are susceptible to attacks. Prefer use of TLSv1.2 or later.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "dynamic-proxy-host", "message": "The host for this proxy URL is dynamically determined. This can be dangerous if the host can be injected by an attacker because it may forcibly alter destination of the proxy. Consider hardcoding acceptable destinations and retrieving them with 'map' or something similar.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "header-redefinition", "message": "The 'add_header' directive is called in a 'location' block after headers have been set at the server block. Calling 'add_header' in the location block will actually overwrite the headers defined in the server block, no matter which headers are set. To fix this, explicitly set all headers or set all headers in the server block.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "missing-ssl-version", "message": "This server configuration is missing the 'ssl_protocols' directive. By default, this server will use 'ssl_protocols TLSv1 TLSv1.1 TLSv1.2', and versions older than TLSv1.2 are known to be broken. Explicitly specify 'ssl_protocols TLSv1.2 TLSv1.3' to use secure TLS versions.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "missing-internal", "message": "This location block contains a 'proxy_pass' directive but does not contain the 'internal' directive. The 'internal' directive restricts access to this location to internal requests. Without 'internal', an attacker could use your server for server-side request forgeries (SSRF). Include the 'internal' directive in this block to limit exposure.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "insecure-redirect", "message": "Detected an insecure redirect in this nginx configuration. If no scheme is specified, nginx will forward the request with the incoming scheme. This could result in unencrypted communications. To fix this, include the 'https' scheme.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "request-host-used", "message": "'$http_host' and '$host' variables may contain a malicious value from attacker controlled 'Host' request header. Use an explicitly configured host value or a allow list for validation.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "csp-header-attribute", "message": "Visualforce Pages must have the cspHeader attribute set to true. This attribute is available in API version 55 or higher.", "parent_source": "community", "severity": "`INFO`", "languages": "Generic"}, {"identifier": "visualforce-page-api-version", "message": "Visualforce Pages must use API version 55 or higher for required use of the cspHeader attribute set to true.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "use-SRI-for-CDNs", "message": "Consuming CDNs without including a SubResource Integrity (SRI) can expose your application and its users to compromised code. SRIs allow you to consume specific versions of content where if even a single byte is compromised, the resource will not be loaded. Add an integrity attribute to your <script> and <link> tags pointing to CDN content to ensure the resources have not been compromised. A crossorigin attribute should also be added. For a more thorough explanation along with explicit instructions on remediating, follow the directions from Mozilla here: https://developer.mozilla.org/en-US/blog/securing-cdn-using-sri-why-how/", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "xss-from-unescaped-url-param", "message": "To remediate this issue, ensure that all URL parameters are properly escaped before including them in scripts. Please update your code to use either the JSENCODE method to escape URL parameters or the escape=\"true\" attribute on <apex:outputText> tags. Passing URL parameters directly into scripts and DOM sinks creates an opportunity for Cross-Site Scripting attacks. Cross-Site Scripting (XSS) attacks are a type of injection, in which malicious scripts are injected into otherwise benign and trusted websites. To remediate this issue, ensure that all URL parameters are properly escaped before including them in scripts.", "parent_source": "community", "severity": "`ERROR`", "languages": "Generic"}, {"identifier": "missing-zypper-no-confirm-switch", "message": "This 'zypper install' is missing the '-y' switch. This might stall builds because it requires human intervention. Add the '-y' switch.", "parent_source": "community", "severity": "`WARNING`", "languages": "Dockerfile"}, {"identifier": "use-absolute-workdir", "message": "Detected a relative WORKDIR. Use absolute paths. This prevents issues based on assumptions about the WORKDIR of previous containers.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "missing-yum-clean-all", "message": "This yum command does not end with '&& yum clean all'. Running 'yum clean all' will remove cached data and reduce package size. (This must be performed in the same RUN step.)", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "multiple-cmd-instructions", "message": "Multiple CMD instructions were found. Only the last one will take effect.", "parent_source": "community", "severity": "`ERROR`", "languages": "Dockerfile"}, {"identifier": "alias-must-be-unique", "message": "Image aliases must have a unique name, and '$REF' is used twice. Use another name for '$REF'.", "parent_source": "community", "severity": "`ERROR`", "languages": "Generic"}, {"identifier": "copy-from-own-alias", "message": "COPY instructions cannot copy from its own alias. The '$REF' alias is used before switching to a new image. If you meant to switch to a new image, include a new 'FROM' statement. Otherwise, remove the '--from=$REF' from the COPY statement.", "parent_source": "community", "severity": "`ERROR`", "languages": "Generic"}, {"identifier": "last-user-is-root", "message": "The last user in the container is 'root'. This is a security hazard because if an attacker gains control of the container they will have root access. Switch back to another user after running commands as 'root'.", "parent_source": "community", "severity": "`ERROR`", "languages": "Dockerfile"}, {"identifier": "invalid-base-url", "message": "The 'baseURL' is invalid. This may cause links to not work if deployed. Include the scheme (e.g., http:// or https://).", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "localhost-base-url", "message": "The 'baseURL' is set to localhost. This may cause links to not work if deployed.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "contains-bidirectional-characters", "message": "This code contains bidirectional (bidi) characters. While this is useful for support of right-to-left languages such as Arabic or Hebrew, it can also be used to trick language parsers into executing code in a manner that is different from how it is displayed in code editing and review tools. If this is not what you were expecting, please review this code in an editor that can reveal hidden Unicode characters.", "parent_source": "community", "severity": "`WARNING`", "languages": "Bash, C, C#, Go, Java, JavaScript, JSON, Kotlin, Lua, OCaml, PHP, Python, Ruby, Rust, Scala, Bash, TypeScript, YAML"}, {"identifier": "algolia-api-key", "message": "A gitleaks algolia-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "gocardless-api-token", "message": "A gitleaks gocardless-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "zendesk-secret-key", "message": "A gitleaks zendesk-secret-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "dropbox-api-token", "message": "A gitleaks dropbox-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "plaid-api-token", "message": "A gitleaks plaid-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "linear-client-secret", "message": "A gitleaks linear-client-secret was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "shopify-access-token", "message": "A gitleaks shopify-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "hubspot-api-key", "message": "A gitleaks hubspot-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "mailchimp-api-key", "message": "A gitleaks mailchimp-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "asana-client-id", "message": "A gitleaks asana-client-id was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "rubygems-api-token", "message": "A gitleaks rubygems-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "lob-pub-api-key", "message": "A gitleaks lob-pub-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "shopify-private-app-access-token", "message": "A gitleaks shopify-private-app-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "linear-api-key", "message": "A gitleaks linear-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "sidekiq-secret", "message": "A gitleaks sidekiq-secret was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "kraken-access-token", "message": "A gitleaks kraken-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "airtable-api-key", "message": "A gitleaks airtable-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "databricks-api-token", "message": "A gitleaks databricks-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "snyk-api-token", "message": "A gitleaks snyk-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "aws-access-token", "message": "A gitleaks aws-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "sendbird-access-token", "message": "A gitleaks sendbird-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "discord-client-id", "message": "A gitleaks discord-client-id was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "flutterwave-public-key", "message": "A gitleaks flutterwave-public-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "twitter-api-key", "message": "A gitleaks twitter-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "stripe-access-token", "message": "A gitleaks stripe-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "contentful-delivery-api-token", "message": "A gitleaks contentful-delivery-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "heroku-api-key", "message": "A gitleaks heroku-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "shopify-shared-secret", "message": "A gitleaks shopify-shared-secret was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "private-key", "message": "A gitleaks private-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "slack-legacy-workspace-token", "message": "A gitleaks slack-legacy-workspace-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "netlify-access-token", "message": "A gitleaks netlify-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "shopify-custom-access-token", "message": "A gitleaks shopify-custom-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "github-pat", "message": "A gitleaks github-pat was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "vault-batch-token", "message": "A gitleaks vault-batch-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "bitbucket-client-id", "message": "A gitleaks bitbucket-client-id was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "planetscale-password", "message": "A gitleaks planetscale-password was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "dropbox-long-lived-api-token", "message": "A gitleaks dropbox-long-lived-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "slack-bot-token", "message": "A gitleaks slack-bot-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "fastly-api-token", "message": "A gitleaks fastly-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "twitch-api-token", "message": "A gitleaks twitch-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "travisci-access-token", "message": "A gitleaks travisci-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "lob-api-key", "message": "A gitleaks lob-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "plaid-client-id", "message": "A gitleaks plaid-client-id was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "github-oauth", "message": "A gitleaks github-oauth was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "launchdarkly-access-token", "message": "A gitleaks launchdarkly-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "datadog-access-token", "message": "A gitleaks datadog-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "beamer-api-token", "message": "A gitleaks beamer-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "slack-config-refresh-token", "message": "A gitleaks slack-config-refresh-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "confluent-secret-key", "message": "A gitleaks confluent-secret-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "planetscale-api-token", "message": "A gitleaks planetscale-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "huggingface-organization-api-token", "message": "A gitleaks huggingface-organization-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "typeform-api-token", "message": "A gitleaks typeform-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "shippo-api-token", "message": "A gitleaks shippo-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "mailgun-pub-key", "message": "A gitleaks mailgun-pub-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "clojars-api-token", "message": "A gitleaks clojars-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "droneci-access-token", "message": "A gitleaks droneci-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "okta-access-token", "message": "A gitleaks okta-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "asana-client-secret", "message": "A gitleaks asana-client-secret was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "sentry-access-token", "message": "A gitleaks sentry-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "vault-service-token", "message": "A gitleaks vault-service-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "finicity-client-secret", "message": "A gitleaks finicity-client-secret was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "grafana-cloud-api-token", "message": "A gitleaks grafana-cloud-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "sidekiq-sensitive-url", "message": "A gitleaks sidekiq-sensitive-url was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "flutterwave-encryption-key", "message": "A gitleaks flutterwave-encryption-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "nytimes-access-token", "message": "A gitleaks nytimes-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "twitter-bearer-token", "message": "A gitleaks twitter-bearer-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "digitalocean-pat", "message": "A gitleaks digitalocean-pat was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "mailgun-signing-key", "message": "A gitleaks mailgun-signing-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "generic-api-key", "message": "A gitleaks generic-api-key was detected which attempts to identify hard-coded credentials.  It is not recommended to store credentials in source-code, as this risks secrets being leaked  and used by either an internal or external malicious adversary. It is recommended to use  environment variables to securely provide credentials or retrieve credentials from a  secure vault or HSM (Hardware Security Module). This rule can introduce a lot of false positives,  it is not recommended to be used in PR comments.", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "messagebird-api-token", "message": "A gitleaks messagebird-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "grafana-api-key", "message": "A gitleaks grafana-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "dropbox-short-lived-api-token", "message": "A gitleaks dropbox-short-lived-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "twitter-access-token", "message": "A gitleaks twitter-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "sendgrid-api-token", "message": "A gitleaks sendgrid-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "jwt-base64", "message": "A gitleaks jwt-base64 was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "easypost-api-token", "message": "A gitleaks easypost-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "linkedin-client-id", "message": "A gitleaks linkedin-client-id was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "gitter-access-token", "message": "A gitleaks gitter-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "huggingface-access-token", "message": "A gitleaks huggingface-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "prefect-api-token", "message": "A gitleaks prefect-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "bittrex-secret-key", "message": "A gitleaks bittrex-secret-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "yandex-api-key", "message": "A gitleaks yandex-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "alibaba-access-key-id", "message": "A gitleaks alibaba-access-key-id was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "messagebird-client-id", "message": "A gitleaks messagebird-client-id was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "dynatrace-api-token", "message": "A gitleaks dynatrace-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "slack-webhook-url", "message": "A gitleaks slack-webhook-url was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "atlassian-api-token", "message": "A gitleaks atlassian-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "kucoin-access-token", "message": "A gitleaks kucoin-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "rapidapi-access-token", "message": "A gitleaks rapidapi-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "finnhub-access-token", "message": "A gitleaks finnhub-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "readme-api-token", "message": "A gitleaks readme-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "square-access-token", "message": "A gitleaks square-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "pypi-upload-token", "message": "A gitleaks pypi-upload-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "openai-api-key", "message": "A gitleaks openai-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "duffel-api-token", "message": "A gitleaks duffel-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "sendbird-access-id", "message": "A gitleaks sendbird-access-id was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "github-fine-grained-pat", "message": "A gitleaks github-fine-grained-pat was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "kucoin-secret-key", "message": "A gitleaks kucoin-secret-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "twitter-api-secret", "message": "A gitleaks twitter-api-secret was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "linkedin-client-secret", "message": "A gitleaks linkedin-client-secret was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "new-relic-browser-api-token", "message": "A gitleaks new-relic-browser-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "microsoft-teams-webhook", "message": "A gitleaks microsoft-teams-webhook was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "slack-config-access-token", "message": "A gitleaks slack-config-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "adobe-client-secret", "message": "A gitleaks adobe-client-secret was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "bitbucket-client-secret", "message": "A gitleaks bitbucket-client-secret was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "frameio-api-token", "message": "A gitleaks frameio-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "sumologic-access-token", "message": "A gitleaks sumologic-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "defined-networking-api-token", "message": "A gitleaks defined-networking-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "flutterwave-secret-key", "message": "A gitleaks flutterwave-secret-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "age-secret-key", "message": "A gitleaks age-secret-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "sumologic-access-id", "message": "A gitleaks sumologic-access-id was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "pulumi-api-token", "message": "A gitleaks pulumi-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "yandex-aws-access-token", "message": "A gitleaks yandex-aws-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "slack-legacy-bot-token", "message": "A gitleaks slack-legacy-bot-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "etsy-access-token", "message": "A gitleaks etsy-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "github-app-token", "message": "A gitleaks github-app-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "mapbox-api-token", "message": "A gitleaks mapbox-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "mattermost-access-token", "message": "A gitleaks mattermost-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "doppler-api-token", "message": "A gitleaks doppler-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "jwt", "message": "A gitleaks jwt was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "scalingo-api-token", "message": "A gitleaks scalingo-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "mailgun-private-api-token", "message": "A gitleaks mailgun-private-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "adobe-client-id", "message": "A gitleaks adobe-client-id was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "infracost-api-token", "message": "A gitleaks infracost-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "bittrex-access-key", "message": "A gitleaks bittrex-access-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "confluent-access-token", "message": "A gitleaks confluent-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "freshbooks-access-token", "message": "A gitleaks freshbooks-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "alibaba-secret-key", "message": "A gitleaks alibaba-secret-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "slack-app-token", "message": "A gitleaks slack-app-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "gitlab-ptt", "message": "A gitleaks gitlab-ptt was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "slack-legacy-token", "message": "A gitleaks slack-legacy-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "facebook", "message": "A gitleaks facebook was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "discord-client-secret", "message": "A gitleaks discord-client-secret was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "plaid-secret-key", "message": "A gitleaks plaid-secret-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "gcp-api-key", "message": "A gitleaks gcp-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "hashicorp-tf-password", "message": "A gitleaks hashicorp-tf-password was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "slack-user-token", "message": "A gitleaks slack-user-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "twilio-api-key", "message": "A gitleaks twilio-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "twitter-access-secret", "message": "A gitleaks twitter-access-secret was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "squarespace-access-token", "message": "A gitleaks squarespace-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "yandex-access-token", "message": "A gitleaks yandex-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "telegram-bot-api-token", "message": "A gitleaks telegram-bot-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "gitlab-pat", "message": "A gitleaks gitlab-pat was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "discord-api-token", "message": "A gitleaks discord-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "sendinblue-api-token", "message": "A gitleaks sendinblue-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "digitalocean-refresh-token", "message": "A gitleaks digitalocean-refresh-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "coinbase-access-token", "message": "A gitleaks coinbase-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "new-relic-user-api-key", "message": "A gitleaks new-relic-user-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "adafruit-api-key", "message": "A gitleaks adafruit-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "authress-service-client-access-key", "message": "A gitleaks authress-service-client-access-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "codecov-access-token", "message": "A gitleaks codecov-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "hashicorp-tf-api-token", "message": "A gitleaks hashicorp-tf-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "finicity-api-token", "message": "A gitleaks finicity-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "npm-access-token", "message": "A gitleaks npm-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "grafana-service-account-token", "message": "A gitleaks grafana-service-account-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "jfrog-api-key", "message": "A gitleaks jfrog-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "digitalocean-access-token", "message": "A gitleaks digitalocean-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "jfrog-identity-token", "message": "A gitleaks jfrog-identity-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "flickr-access-token", "message": "A gitleaks flickr-access-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "intercom-api-key", "message": "A gitleaks intercom-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "easypost-test-api-token", "message": "A gitleaks easypost-test-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "postman-api-token", "message": "A gitleaks postman-api-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "new-relic-user-api-id", "message": "A gitleaks new-relic-user-api-id was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "planetscale-oauth-token", "message": "A gitleaks planetscale-oauth-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "github-refresh-token", "message": "A gitleaks github-refresh-token was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "gitlab-rrt", "message": "A gitleaks gitlab-rrt was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`INFO`", "languages": "Regex"}, {"identifier": "detected-stripe-restricted-api-key", "message": "Stripe Restricted API Key detected", "parent_source": "community", "severity": "`ERROR`", "languages": "Regex"}, {"identifier": "detected-slack-webhook", "message": "Slack Webhook detected", "parent_source": "community", "severity": "`ERROR`", "languages": "Regex"}, {"identifier": "detected-etc-shadow", "message": "linux shadow file detected", "parent_source": "community", "severity": "`ERROR`", "languages": "Regex"}, {"identifier": "detected-google-cloud-api-key", "message": "Google Cloud API Key detected", "parent_source": "community", "severity": "`ERROR`", "languages": "Regex"}, {"identifier": "detected-aws-appsync-graphql-key", "message": "AWS AppSync GraphQL Key detected", "parent_source": "community", "severity": "`ERROR`", "languages": "Regex"}, {"identifier": "detected-username-and-password-in-uri", "message": "Username and password in URI detected", "parent_source": "community", "severity": "`ERROR`", "languages": "Generic"}, {"identifier": "detected-aws-secret-access-key", "message": "AWS Secret Access Key detected", "parent_source": "community", "severity": "`ERROR`", "languages": "Regex"}, {"identifier": "detected-artifactory-password", "message": "Artifactory token detected", "parent_source": "community", "severity": "`ERROR`", "languages": "Regex"}, {"identifier": "detected-amazon-mws-auth-token", "message": "Amazon MWS Auth Token detected", "parent_source": "community", "severity": "`ERROR`", "languages": "Regex"}, {"identifier": "detected-stripe-api-key", "message": "Stripe API Key detected", "parent_source": "community", "severity": "`ERROR`", "languages": "Regex"}, {"identifier": "detected-sauce-token", "message": "Sauce Token detected", "parent_source": "community", "severity": "`ERROR`", "languages": "Regex"}, {"identifier": "detected-sonarqube-docs-api-key", "message": "SonarQube Docs API Key detected", "parent_source": "community", "severity": "`ERROR`", "languages": "Regex"}, {"identifier": "detected-generic-api-key", "message": "Generic API Key detected", "parent_source": "community", "severity": "`ERROR`", "languages": "Regex"}, {"identifier": "detected-outlook-team", "message": "Outlook Team detected", "parent_source": "community", "severity": "`ERROR`", "languages": "Regex"}, {"identifier": "detected-slack-token", "message": "Slack Token detected", "parent_source": "community", "severity": "`ERROR`", "languages": "Regex"}, {"identifier": "google-maps-apikeyleak", "message": "Detects potential Google Maps API keys in code", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "detected-google-oauth-url", "message": "Google OAuth url detected", "parent_source": "community", "severity": "`ERROR`", "languages": "Regex"}, {"identifier": "detected-github-token", "message": "GitHub Token detected", "parent_source": "community", "severity": "`ERROR`", "languages": "Generic"}, {"identifier": "detected-hockeyapp", "message": "HockeyApp detected", "parent_source": "community", "severity": "`ERROR`", "languages": "Regex"}, {"identifier": "detected-google-api-key", "message": "Google API Key Detected", "parent_source": "community", "severity": "`ERROR`", "languages": "Regex"}, {"identifier": "detected-private-key", "message": "Private Key detected. This is a sensitive credential and should not be hardcoded here. Instead, store this in a separate, private file.", "parent_source": "community", "severity": "`ERROR`", "languages": "Generic"}, {"identifier": "detected-pgp-private-key-block", "message": "Something that looks like a PGP private key block is detected. This is a potential hardcoded secret that could be leaked if this code is committed. Instead, remove this code block from the commit.", "parent_source": "community", "severity": "`ERROR`", "languages": "Regex"}, {"identifier": "detected-square-access-token", "message": "Square Access Token detected", "parent_source": "community", "severity": "`ERROR`", "languages": "Regex"}, {"identifier": "detected-kolide-api-key", "message": "Kolide API Key detected", "parent_source": "community", "severity": "`ERROR`", "languages": "Regex"}, {"identifier": "detected-aws-access-key-id-value", "message": "AWS Access Key ID Value detected. This is a sensitive credential and should not be hardcoded here. Instead, read this value from an environment variable or keep it in a separate, private file.", "parent_source": "community", "severity": "`ERROR`", "languages": "Regex"}, {"identifier": "detected-sendgrid-api-key", "message": "SendGrid API Key detected", "parent_source": "community", "severity": "`ERROR`", "languages": "Regex"}, {"identifier": "detected-mailchimp-api-key", "message": "MailChimp API Key detected", "parent_source": "community", "severity": "`ERROR`", "languages": "Regex"}, {"identifier": "detected-generic-secret", "message": "Generic Secret detected", "parent_source": "community", "severity": "`ERROR`", "languages": "Regex"}, {"identifier": "detected-google-gcm-service-account", "message": "Google (GCM) Service account detected", "parent_source": "community", "severity": "`ERROR`", "languages": "Regex"}, {"identifier": "detected-npm-registry-auth-token", "message": "NPM registry authentication token detected", "parent_source": "community", "severity": "`ERROR`", "languages": "Generic"}, {"identifier": "detected-codeclimate", "message": "CodeClimate detected", "parent_source": "community", "severity": "`ERROR`", "languages": "Regex"}, {"identifier": "detected-square-oauth-secret", "message": "Square OAuth Secret detected", "parent_source": "community", "severity": "`ERROR`", "languages": "Regex"}, {"identifier": "detected-softlayer-api-key", "message": "SoftLayer API Key detected", "parent_source": "community", "severity": "`ERROR`", "languages": "Regex"}, {"identifier": "detected-bcrypt-hash", "message": "bcrypt hash detected", "parent_source": "community", "severity": "`ERROR`", "languages": "Regex"}, {"identifier": "detected-facebook-access-token", "message": "Facebook Access Token detected", "parent_source": "community", "severity": "`ERROR`", "languages": "Regex"}, {"identifier": "detected-aws-session-token", "message": "AWS Session Token detected", "parent_source": "community", "severity": "`ERROR`", "languages": "Regex"}, {"identifier": "detected-google-oauth-access-token", "message": "Google OAuth Access Token detected", "parent_source": "community", "severity": "`ERROR`", "languages": "Regex"}, {"identifier": "detected-jwt-token", "message": "JWT token detected", "parent_source": "community", "severity": "`ERROR`", "languages": "Regex"}, {"identifier": "detected-paypal-braintree-access-token", "message": "PayPal Braintree Access Token detected", "parent_source": "community", "severity": "`ERROR`", "languages": "Regex"}, {"identifier": "detected-picatic-api-key", "message": "Picatic API Key detected", "parent_source": "community", "severity": "`ERROR`", "languages": "Regex"}, {"identifier": "detected-ssh-password", "message": "SSH Password detected", "parent_source": "community", "severity": "`ERROR`", "languages": "Regex"}, {"identifier": "detected-mailgun-api-key", "message": "Mailgun API Key detected", "parent_source": "community", "severity": "`ERROR`", "languages": "Regex"}, {"identifier": "detected-aws-account-id", "message": "AWS Account ID detected. This is a sensitive credential and should not be hardcoded here. Instead, read the value from an environment variable or keep the value in a separate, private file.", "parent_source": "community", "severity": "`ERROR`", "languages": "Generic"}, {"identifier": "detected-artifactory-token", "message": "Artifactory token detected", "parent_source": "community", "severity": "`ERROR`", "languages": "Regex"}, {"identifier": "detected-snyk-api-key", "message": "Snyk API Key detected", "parent_source": "community", "severity": "`ERROR`", "languages": "Regex"}, {"identifier": "detected-twilio-api-key", "message": "Twilio API Key detected", "parent_source": "community", "severity": "`ERROR`", "languages": "Regex"}, {"identifier": "detected-telegram-bot-api-key", "message": "Telegram Bot API Key detected", "parent_source": "community", "severity": "`ERROR`", "languages": "Regex"}, {"identifier": "detected-heroku-api-key", "message": "Heroku API Key detected", "parent_source": "community", "severity": "`ERROR`", "languages": "Regex"}, {"identifier": "detected-facebook-oauth", "message": "Facebook OAuth detected", "parent_source": "community", "severity": "`ERROR`", "languages": "Regex"}, {"identifier": "changed-semgrepignore", "message": "`$1` has been added to the .semgrepignore list of ignored paths. Someone from app-sec may want to audit these changes.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "use-frozen-lockfile-yarn", "message": "To ensure reproducible and deterministic builds, when performing yarn install, make sure to use the lockfile. Yarn will update the lockfile rather than using the pinned versions. By using `--immutable` yarn will throw an exit code if the lockfile was to be modified.", "parent_source": "community", "severity": "`INFO`", "languages": "Dockerfile"}, {"identifier": "use-frozen-lockfile-npm", "message": "To ensure reproducible and deterministic builds, use `npm ci` rather than `npm install` in scripts. This will use the lockfile rather than updating it.", "parent_source": "community", "severity": "`INFO`", "languages": "Generic"}, {"identifier": "use-frozen-lockfile-pipenv", "message": "This rule has been deprecated.", "parent_source": "community", "severity": "`INFO`", "languages": "Generic"}, {"identifier": "use-frozen-lockfile-pip", "message": "This rule has been deprecated.", "parent_source": "community", "severity": "`INFO`", "languages": "Generic"}, {"identifier": "bash_reverse_shell", "message": "Semgrep found a bash reverse shell", "parent_source": "community", "severity": "`ERROR`", "languages": "Generic"}, {"identifier": "var-in-script-src", "message": "Detected a template variable used as the 'src' in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent malicious URLs from being injected and could results in a cross-site scripting (XSS) vulnerability. Prefer not to dynamically generate the 'src' attribute and use static URLs instead. If you must do this, carefully check URLs against an allowlist and be sure to URL-encode the result.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "unquoted-attribute-var", "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\".", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "var-in-script-tag", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "var-in-href", "message": "Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using Flask, use 'url_for()' to safely generate a URL. If using Django, use the 'url' filter to safely generate a URL. If using Mustache, use a URL encoding library, or prepend a slash '/' to the variable for relative links (`href=\"/{{link}}\"`). You may also consider setting the Content Security Policy (CSP) header.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "ocamllint-bool-true", "message": "Comparison to boolean. Just use `$X`", "parent_source": "community", "severity": "`WARNING`", "languages": "OCaml"}, {"identifier": "ocamllint-bool-false", "message": "Comparison to boolean. Just use `not $X`", "parent_source": "community", "severity": "`WARNING`", "languages": "OCaml"}, {"identifier": "bad-reraise", "message": "You should not re-raise exceptions using 'raise' because it loses track of where the exception was raised originally, leading to a useless and possibly confusing stack trace. Instead, you should obtain a stack backtrace as soon as the exception is caught using 'try ... with exn -> let trace = Printexc.get_raw_backtrace () in ...', and keep it around until you re-raise the exception using 'Printexc.raise_with_backtrace exn trace'. You must collect the stack backtrace before calling another function which might internally raise and catch exceptions. To avoid false positives from Semgrep, write 'raise (Foo args)' instead of 'let e = Foo args in raise e'.", "parent_source": "community", "severity": "`WARNING`", "languages": "OCaml"}, {"identifier": "ocamllint-useless-else", "message": "Useless else. Just remove the else branch;", "parent_source": "community", "severity": "`WARNING`", "languages": "OCaml"}, {"identifier": "ocamllint-backwards-if", "message": "Backwards if. Rewrite the code as 'if not $E then $E2'.", "parent_source": "community", "severity": "`WARNING`", "languages": "OCaml"}, {"identifier": "list-find-outside-try", "message": "You should not use List.find outside of a try, or you should use List.find_opt", "parent_source": "community", "severity": "`WARNING`", "languages": "OCaml"}, {"identifier": "hashtbl-find-outside-try", "message": "You should not use Hashtbl.find outside of a try, or you should use Hashtbl.find_opt", "parent_source": "community", "severity": "`WARNING`", "languages": "OCaml"}, {"identifier": "ocamllint-str-first-chars", "message": "Use instead `Str.first_chars`", "parent_source": "community", "severity": "`WARNING`", "languages": "OCaml"}, {"identifier": "ocamllint-str-string-after", "message": "Use instead `Str.string_after`", "parent_source": "community", "severity": "`WARNING`", "languages": "OCaml"}, {"identifier": "ocamllint-str-last-chars", "message": "Use instead `Str.last_chars`", "parent_source": "community", "severity": "`WARNING`", "languages": "OCaml"}, {"identifier": "ocamllint-useless-sprintf", "message": "Useless sprintf", "parent_source": "community", "severity": "`WARNING`", "languages": "OCaml"}, {"identifier": "ocamllint-ref-incr", "message": "You should use `incr`", "parent_source": "community", "severity": "`WARNING`", "languages": "OCaml"}, {"identifier": "ocamllint-ref-decr", "message": "You should use `decr`", "parent_source": "community", "severity": "`WARNING`", "languages": "OCaml"}, {"identifier": "ocamllint-length-list-zero", "message": "You probably want $X = [], which is faster.", "parent_source": "community", "severity": "`WARNING`", "languages": "OCaml"}, {"identifier": "ocamllint-length-more-than-zero", "message": "You probably want $X <> [], which is faster.", "parent_source": "community", "severity": "`WARNING`", "languages": "OCaml"}, {"identifier": "deprecated-pervasives", "message": "Pervasives is deprecated and will not be available after 4.10. Use Stdlib.", "parent_source": "community", "severity": "`ERROR`", "languages": "OCaml"}, {"identifier": "ocamllint-useless-if", "message": "Useless if. Both branches are equal.", "parent_source": "community", "severity": "`ERROR`", "languages": "OCaml"}, {"identifier": "useless-let", "message": "Useless let", "parent_source": "community", "severity": "`ERROR`", "languages": "OCaml"}, {"identifier": "useless-compare", "message": "This comparison is useless because the expressions being compared are identical. This is expected to always return the same result, 0, unless your code is really strange.", "parent_source": "community", "severity": "`ERROR`", "languages": "OCaml"}, {"identifier": "physical-equal", "message": "You probably want the structural equality operator =", "parent_source": "community", "severity": "`WARNING`", "languages": "OCaml"}, {"identifier": "physical-not-equal", "message": "You probably want the structural inequality operator <>", "parent_source": "community", "severity": "`WARNING`", "languages": "OCaml"}, {"identifier": "useless-equal", "message": "This is always true. If testing for floating point NaN, use `Float.is_nan` instead.", "parent_source": "community", "severity": "`ERROR`", "languages": "OCaml"}, {"identifier": "ocamllint-filenameconcat", "message": "When attacker supplied data is passed to Filename.concat directory traversal attacks might be possible.", "parent_source": "community", "severity": "`WARNING`", "languages": "OCaml"}, {"identifier": "ocamllint-digest", "message": "Digest uses MD5 and should not be used for security purposes. Consider using SHA256 instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "OCaml"}, {"identifier": "ocamllint-exec", "message": "Executing external programs might lead to comand or argument injection vulnerabilities.", "parent_source": "community", "severity": "`WARNING`", "languages": "OCaml"}, {"identifier": "ocamllint-tempfile", "message": "Filename.temp_file might lead to race conditions, since the file could be altered or replaced by a symlink before being opened.", "parent_source": "community", "severity": "`WARNING`", "languages": "OCaml"}, {"identifier": "ocamllint-marshal", "message": "Marshaling is currently not type-safe and can lead to insecure behaviour when untrusted data is marshalled. Marshalling can lead to out-of-bound reads as well.", "parent_source": "community", "severity": "`WARNING`", "languages": "OCaml"}, {"identifier": "ocamllint-unsafe", "message": "Unsafe functions do not perform boundary checks or have other side effects, use with care.", "parent_source": "community", "severity": "`WARNING`", "languages": "OCaml"}, {"identifier": "ocamllint-hashtable-dos", "message": "Creating a Hashtbl without the optional random number parameter makes it prone to DoS attacks when attackers are able to fill the table with malicious content. Hashtbl.randomize or the R flag in the OCAMLRUNPARAM are other ways to randomize it.", "parent_source": "community", "severity": "`WARNING`", "languages": "OCaml"}, {"identifier": "broken-input-line", "message": "'input_line' leaves a '\\r' (CR) character when reading lines from a Windows text file, whose lines end in \"\\r\\n\" (CRLF). This is a problem for any Windows file that is being read either on a Unix-like platform or on Windows in binary mode. If the code already takes care of removing any trailing '\\r' after reading the line, add a '(* nosemgrep *)' comment to disable this warning.", "parent_source": "community", "severity": "`WARNING`", "languages": "OCaml"}, {"identifier": "prefer-read-in-binary-mode", "message": "'open_in' behaves differently on Windows and on Unix-like systems with respect to line endings. To get the same behavior everywhere, use 'open_in_bin' or 'open_in_gen [Open_binary]'. If you really want CRLF-to-LF translations to take place when running on Windows, use 'open_in_gen [Open_text]'.", "parent_source": "community", "severity": "`WARNING`", "languages": "OCaml"}, {"identifier": "prefer-write-in-binary-mode", "message": "'open_out' behaves differently on Windows and on Unix-like systems with respect to line endings. To get the same behavior everywhere, use 'open_out_bin' or 'open_out_gen [Open_binary]'. If you really want LF-to-CRLF translations to take place when running on Windows, use 'open_out_gen [Open_text]'.", "parent_source": "community", "severity": "`WARNING`", "languages": "OCaml"}, {"identifier": "not-portable-tmp-string", "message": "You should probably use Filename.get_temp_dirname().", "parent_source": "community", "severity": "`WARNING`", "languages": "OCaml"}, {"identifier": "remove-package-cache", "message": "The package cache was not deleted after running 'apt-get update', which increases the size of the image. Remove the package cache by appending '&& apt-get clean' at the end of apt-get command chain.", "parent_source": "community", "severity": "`WARNING`", "languages": "Dockerfile"}, {"identifier": "avoid-dnf-update", "message": "Packages in base images should be up-to-date, removing the need for 'dnf update'. If packages are out-of-date, consider contacting the base image maintainer.", "parent_source": "community", "severity": "`INFO`", "languages": "Dockerfile"}, {"identifier": "missing-dnf-clean-all", "message": "This dnf command does not end with '&& dnf clean all'. Running 'dnf clean all' will remove cached data and reduce package size. (This must be performed in the same RUN step.)", "parent_source": "community", "severity": "`WARNING`", "languages": "Dockerfile"}, {"identifier": "missing-pip-no-cache-dir", "message": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents package archives from being kept around, thereby reducing image size. Add '--no-cache-dir'.", "parent_source": "community", "severity": "`INFO`", "languages": "Dockerfile"}, {"identifier": "prefer-json-notation", "message": "Prefer JSON notation when using CMD or ENTRYPOINT. This allows signals to be passed from the OS.", "parent_source": "community", "severity": "`INFO`", "languages": "Dockerfile"}, {"identifier": "missing-image-version", "message": "Detected docker image with no explicit version attached. Images should be tagged with an explicit version to produce deterministic container images -- attach a version when using  `FROM <image>`.", "parent_source": "community", "severity": "`WARNING`", "languages": "Dockerfile"}, {"identifier": "use-shell-instruction", "message": "Use the SHELL instruction to set the default shell instead of overwriting '/bin/sh'.", "parent_source": "community", "severity": "`WARNING`", "languages": "Dockerfile"}, {"identifier": "avoid-platform-with-from", "message": "Using '--platform' with FROM restricts the image to build on a single platform. Further, this must be the same as the build platform. If you intended to specify the target platform, use the utility 'docker buildx --platform=' instead.", "parent_source": "community", "severity": "`INFO`", "languages": "Dockerfile"}, {"identifier": "avoid-zypper-update", "message": "Packages in base images should be up-to-date, removing the need for 'zypper update'. If packages are out-of-date, consider contacting the base image maintainer.", "parent_source": "community", "severity": "`INFO`", "languages": "Dockerfile"}, {"identifier": "missing-dnf-assume-yes-switch", "message": "This 'dnf install' is missing the '-y' switch. This might stall builds because it requires human intervention. Add the '-y' switch.", "parent_source": "community", "severity": "`WARNING`", "languages": "Dockerfile"}, {"identifier": "set-pipefail", "message": "Only the exit code from the final command in this RUN instruction will be evaluated unless 'pipefail' is set. If you want to fail the command at any stage in the pipe, set 'pipefail' by including 'SHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"] before the command. If you're using alpine and don't have bash installed, communicate this explicitly with `SHELL [\"/bin/ash\"]`.", "parent_source": "community", "severity": "`WARNING`", "languages": "Dockerfile"}, {"identifier": "remove-package-lists", "message": "The package lists were not deleted after running 'apt-get update', which increases the size of the image. Remove the package lists by appending '&& rm -rf /var/lib/apt/lists/*' at the end of apt-get command chain.", "parent_source": "community", "severity": "`WARNING`", "languages": "Dockerfile"}, {"identifier": "missing-zypper-clean", "message": "This zypper command does not end with '&& zypper clean'. Running 'zypper clean' will remove cached data and reduce package size. (This must be performed in the same RUN step.)", "parent_source": "community", "severity": "`WARNING`", "languages": "Dockerfile"}, {"identifier": "missing-apk-no-cache", "message": "This apk command is missing '--no-cache'. This forces apk to use a package index instead of a local package cache, removing the need for '--update' and the deletion of '/var/cache/apk/*'. Add '--no-cache' to your apk command.", "parent_source": "community", "severity": "`INFO`", "languages": "Dockerfile"}, {"identifier": "missing-no-install-recommends", "message": "This 'apt-get install' is missing '--no-install-recommends'. This prevents unnecessary packages from being installed, thereby reducing image size. Add '--no-install-recommends'.", "parent_source": "community", "severity": "`INFO`", "languages": "Dockerfile"}, {"identifier": "avoid-yum-update", "message": "Packages in base images should be up-to-date, removing the need for 'yum update'. If packages are out-of-date, consider contacting the base image maintainer.", "parent_source": "community", "severity": "`INFO`", "languages": "Dockerfile"}, {"identifier": "missing-yum-assume-yes-switch", "message": "This 'yum install' is missing the '-y' switch. This might stall builds because it requires human intervention. Add the '-y' switch.", "parent_source": "community", "severity": "`WARNING`", "languages": "Dockerfile"}, {"identifier": "prefer-apt-get", "message": "'apt-get' is preferred as an unattended tool for stability. 'apt' is discouraged.", "parent_source": "community", "severity": "`INFO`", "languages": "Dockerfile"}, {"identifier": "use-workdir", "message": "As recommended by Docker's documentation, it is best to use 'WORKDIR' instead of 'RUN cd ...' for improved clarity and reliability. Also, 'RUN cd ...' may not work as expected in a container.", "parent_source": "community", "severity": "`WARNING`", "languages": "Dockerfile"}, {"identifier": "use-either-wget-or-curl", "message": "'wget' and 'curl' are similar tools. Choose one and do not install the other to decrease image size.", "parent_source": "community", "severity": "`INFO`", "languages": "Dockerfile"}, {"identifier": "avoid-latest-version", "message": "Images should be tagged with an explicit version to produce deterministic container images. The 'latest' tag may change the base container without warning.", "parent_source": "community", "severity": "`WARNING`", "languages": "Dockerfile"}, {"identifier": "avoid-apt-get-upgrade", "message": "Packages in base containers should be up-to-date, removing the need to upgrade or dist-upgrade. If a package is out of date, contact the maintainers.", "parent_source": "community", "severity": "`WARNING`", "languages": "Dockerfile"}, {"identifier": "nonsensical-command", "message": "Some commands such as `$CMD` do not make sense in a container. Do not use these.", "parent_source": "community", "severity": "`WARNING`", "languages": "Dockerfile"}, {"identifier": "prefer-copy-over-add", "message": "The ADD command will accept and include files from a URL and automatically extract archives. This potentially exposes the container to a man-in-the-middle attack or other attacks if a malicious actor can tamper with the source archive. Since ADD can have this and other unexpected side effects, the use of the more explicit COPY command is preferred.", "parent_source": "community", "severity": "`INFO`", "languages": "Dockerfile"}, {"identifier": "maintainer-is-deprecated", "message": "MAINTAINER has been deprecated.", "parent_source": "community", "severity": "`INFO`", "languages": "Dockerfile"}, {"identifier": "avoid-apk-upgrade", "message": "Packages in base images should be up-to-date, removing the need for 'apk upgrade'. If packages are out-of-date, consider contacting the base image maintainer.", "parent_source": "community", "severity": "`INFO`", "languages": "Dockerfile"}, {"identifier": "dockerfile-source-not-pinned", "message": "To ensure reproducible builds, pin Dockerfile `FROM` commands to a specific hash. You can find the hash by running `docker pull $IMAGE` and then  specify it with `$IMAGE:$VERSION@sha256:<hash goes here>`", "parent_source": "community", "severity": "`INFO`", "languages": "Dockerfile"}, {"identifier": "invalid-port", "message": "Detected an invalid port number. Valid ports are 0 through 65535.", "parent_source": "community", "severity": "`ERROR`", "languages": "Dockerfile"}, {"identifier": "missing-assume-yes-switch", "message": "This 'apt-get install' is missing the '-y' switch. This might stall builds because it requires human intervention. Add the '-y' switch.", "parent_source": "community", "severity": "`WARNING`", "languages": "Dockerfile"}, {"identifier": "multiple-entrypoint-instructions", "message": "Multiple ENTRYPOINT instructions were found. Only the last one will take effect.", "parent_source": "community", "severity": "`ERROR`", "languages": "Dockerfile"}, {"identifier": "secret-in-build-arg", "message": "Docker build time arguments are not suited for secrets, because the argument values are saved with the image. Running `docker image history` on the image will show information on how the image was built, including arguments. If these contain plain text secrets, anyone with access to the docker image can access those secrets and exploit them.", "parent_source": "community", "severity": "`WARNING`", "languages": "Dockerfile"}, {"identifier": "missing-user", "message": "By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'.", "parent_source": "community", "severity": "`ERROR`", "languages": "Dockerfile"}, {"identifier": "missing-user-entrypoint", "message": "By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'.", "parent_source": "community", "severity": "`ERROR`", "languages": "Dockerfile"}, {"identifier": "no-sudo-in-dockerfile", "message": "Avoid using sudo in Dockerfiles. Running processes as a non-root user can help  reduce the potential impact of configuration errors and security vulnerabilities.", "parent_source": "community", "severity": "`WARNING`", "languages": "Dockerfile"}, {"identifier": "last-user-is-root", "message": "The last user in the container is 'root'. This is a security hazard because if an attacker gains control of the container they will have root access. Switch back to another user after running commands as 'root'.", "parent_source": "community", "severity": "`ERROR`", "languages": "Dockerfile"}, {"identifier": "use-json-response", "message": "Use JsonResponse instead", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "use-django-environ", "message": "You are using environment variables inside django app. Use `django-environ` as it a better alternative for deployment.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "use-onetoonefield", "message": "Use 'django.db.models.OneToOneField' instead of 'ForeignKey' with unique=True. 'OneToOneField' is used to create one-to-one relationships.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "duplicate-path-assignment", "message": "path for `$URL` is uselessly assigned twice", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "conflicting-path-assignment", "message": "The path for `$URL` is assigned once to view `$VIEW` and once to `$DIFFERENT_VIEW`, which can lead to unexpected behavior. Verify what the intended target view is and delete the other route.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "duplicate-path-assignment-different-names", "message": "path for `$URL` is assigned twice with different names", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "duplicate-name-assignment", "message": "The name `$NAME` is used for both `$URL` and `$OTHER_URL`, which can lead to unexpected behavior when using URL reversing. Pick a unique name for each path.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "use-count-method", "message": "Looks like you need to determine the number of records. Django provides the count() method which is more efficient than .len(). See https://docs.djangoproject.com/en/3.0/ref/models/querysets/", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "use-earliest-or-latest", "message": "Looks like you are only accessing first element of an ordered QuerySet. Use `latest()` or `earliest()` instead. See https://docs.djangoproject.com/en/3.0/ref/models/querysets/#django.db.models.query.QuerySet.latest", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "access-foreign-keys", "message": "You should use ITEM.user_id rather than ITEM.user.id to prevent running an extra query.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "django-compat-2_0-signals-weak", "message": "The weak argument to django.dispatch.signals.Signal.disconnect() is removed in Django 2.0.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "django-compat-2_0-check-aggregate-support", "message": "django.db.backends.base.BaseDatabaseOperations.check_aggregate_support() is removed in Django 2.0.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "django-compat-2_0-extra-forms", "message": "The django.forms.extras package is removed in Django 2.0.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "django-compat-2_0-assignment-tag", "message": "The assignment_tag helper is removed in Django 2.0.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "django-compat-2_0-assert-redirects-helper", "message": "The host argument to assertRedirects is removed in Django 2.0.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "use-decimalfield-for-money", "message": "Found a FloatField used for variable $F. Use DecimalField for currency fields to avoid float-rounding errors.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "no-null-string-field", "message": "Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for \"no data\": NULL, and the empty string. In most cases, it's redundant to have two possible values for \"no data;\" the Django convention is to use the empty string, not NULL.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "string-field-must-set-null-true", "message": "If a text field declares unique=True and blank=True, null=True must also be set to avoid unique constraint violations when saving multiple objects with blank values.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "nontext-field-must-set-null-true", "message": "null=True should be set if blank=True is set on non-text fields.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "django-db-model-save-super", "message": "Detected a django model `$MODEL` is not calling super().save() inside of the save method.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "django-no-csrf-token", "message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "hashids-with-django-secret", "message": "The Django secret key is used as salt in HashIDs. The HashID mechanism is not secure. By observing sufficient HashIDs, the salt used to construct them can be recovered. This means the Django secret key can be obtained by attackers, through the HashIDs.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "globals-as-template-context", "message": "Using 'globals()' as a context to 'render(...)' is extremely dangerous. This exposes Python functions to the template that were not meant to be exposed. An attacker could use these functions to execute code that was not intended to run and could compromise the application. (This is server-side template injection (SSTI)). Do not use 'globals()'. Instead, specify each variable in a dictionary or 'django.template.Context' object, like '{\"var1\": \"hello\"}' and use that instead.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "nan-injection", "message": "Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "locals-as-template-context", "message": "Using 'locals()' as a context to 'render(...)' is extremely dangerous. This exposes Python functions to the template that were not meant to be exposed. An attacker could use these functions to execute code that was not intended to run and could compromise the application. (This is server-side template injection (SSTI)). Do not use 'locals()'. Instead, specify each variable in a dictionary or 'django.template.Context' object, like '{\"var1\": \"hello\"}' and use that instead.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "django-using-request-post-after-is-valid", "message": "Use $FORM.cleaned_data[] instead of request.POST[] after form.is_valid() has been executed to only access sanitized data", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "use-none-for-password-default", "message": "'$VAR' is using the empty string as its default and is being used to set the password on '$MODEL'. If you meant to set an unusable password, set the default value to 'None' or call 'set_unusable_password()'.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "password-empty-string", "message": "'$VAR' is the empty string and is being used to set the password on '$MODEL'. If you meant to set an unusable password, set the password to None or call 'set_unusable_password()'.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "unvalidated-password", "message": "The password on '$MODEL' is being set without validating the password. Call django.contrib.auth.password_validation.validate_password() with validation functions before setting the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/ for more information.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "extends-custom-expression", "message": "Found extension of custom expression: $CLASS. Extending expressions in this way could inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "custom-expression-as-sql", "message": "Detected a Custom Expression ''$EXPRESSION'' calling ''as_sql(...).'' This could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this function or that user input is properly sanitized.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "avoid-insecure-deserialization", "message": "Avoid using insecure deserialization library, backed by `pickle`, `_pickle`, `cpickle`, `dill`, `shelve`, or `yaml`, which are known to lead to remote code execution vulnerabilities.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "avoid-raw-sql", "message": "Detected the use of 'RawSQL' or 'raw' indicating the execution of a non-parameterized SQL query. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use Django ORM and parameterized queries before raw SQL. An example of using the Django ORM is: `People.objects.get(name='Bob')`", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "avoid-mark-safe", "message": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "django-secure-set-cookie", "message": "Django cookies should be handled securely by setting secure=True, httponly=True, and samesite='Lax' in response.set_cookie(...). If your situation calls for different settings, explicitly disable the setting. If you want to send the cookie over http, set secure=False. If you want to let client-side JavaScript read the cookie, set httponly=False. If you want to attach cookies to requests for external sites, set samesite=None.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "avoid-query-set-extra", "message": "QuerySet.extra' does not provide safeguards against SQL injection and requires very careful use. SQL injection can lead to critical data being stolen by attackers. Instead of using '.extra', use the Django ORM and parameterized queries such as `People.objects.get(name='Bob')`.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "no-csrf-exempt", "message": "Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This could lead to an attacker manipulating the user's account and exfiltration of private data. Instead, create a function without this decorator.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "debug-template-tag", "message": "Detected a debug template tag in a Django template. This dumps debugging information to the page when debug mode is enabled. Showing debug information to users is dangerous because it may reveal information about your environment that malicious actors can use to gain access to the system. Remove the debug tag.", "parent_source": "community", "severity": "`WARNING`", "languages": "Regex"}, {"identifier": "missing-throttle-config", "message": "Django REST framework configuration is missing default rate- limiting options. This could inadvertently allow resource starvation or Denial of Service (DoS) attacks. Add 'DEFAULT_THROTTLE_CLASSES' and 'DEFAULT_THROTTLE_RATES' to add rate-limiting to your application.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "missing-ratelimit", "message": "This rule is deprecated.", "parent_source": "community", "severity": "`INFO`", "languages": "Python"}, {"identifier": "template-autoescape-off", "message": "Detected a template block where autoescaping is explicitly disabled with '{% autoescape off %}'. This allows rendering of raw HTML in this segment. Turn autoescaping on to prevent cross-site scripting (XSS). If you must do this, consider instead, using `mark_safe` in Python code.", "parent_source": "community", "severity": "`WARNING`", "languages": "Regex"}, {"identifier": "template-translate-as-no-escape", "message": "Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.", "parent_source": "community", "severity": "`INFO`", "languages": "Generic"}, {"identifier": "formathtml-fstring-parameter", "message": "Passing a formatted string as first parameter to `format_html` disables the proper encoding of variables. Any HTML in the first parameter is not encoded. Using a formatted string as first parameter obscures which parameters are encoded. Correct use of `format_html` is passing a static format string as first parameter, and the variables to substitute as subsequent parameters.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "html-safe", "message": "`html_safe()` add the `__html__` magic method to the provided class. The `__html__` method indicates to the Django template engine that the value is 'safe' for rendering. This means that normal HTML escaping will not be applied to the return value. This exposes your application to cross-site scripting (XSS) vulnerabilities. If you need to render raw HTML, consider instead using `mark_safe()` which more clearly marks the intent to render raw HTML than a class with a magic method.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "context-autoescape-off", "message": "Detected a Context with autoescape disabled. If you are rendering any web pages, this exposes your application to cross-site scripting (XSS) vulnerabilities. Remove 'autoescape: False' or set it to 'True'.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "template-href-var", "message": "Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "template-translate-no-escape", "message": "This rule is deprecated. It will no longer produce findings.", "parent_source": "community", "severity": "`INFO`", "languages": "Generic"}, {"identifier": "global-autoescape-off", "message": "Autoescape is globally disbaled for this Django application. If you are rendering any web pages, this exposes your application to cross-site scripting (XSS) vulnerabilities. Remove 'autoescape: False' or set it to 'True'.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "var-in-script-tag", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`).", "parent_source": "community", "severity": "`ERROR`", "languages": "Generic"}, {"identifier": "template-var-unescaped-with-safeseq", "message": "Detected a template variable where autoescaping is explicitly disabled with '| safeseq' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability. If you must do this, use `mark_safe` in your Python code.", "parent_source": "community", "severity": "`WARNING`", "languages": "Regex"}, {"identifier": "direct-use-of-httpresponse", "message": "Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Django's template engine to safely render HTML.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "filter-with-is-safe", "message": "Detected Django filters flagged with 'is_safe'. 'is_safe' tells Django not to apply escaping on the value returned by this filter (although the input is escaped). Used improperly, 'is_safe' could expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead removing 'is_safe' and explicitly marking safe content with 'mark_safe()'.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "template-blocktranslate-no-escape", "message": "Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text.", "parent_source": "community", "severity": "`INFO`", "languages": "Generic"}, {"identifier": "html-magic-method", "message": "The `__html__` method indicates to the Django template engine that the value is 'safe' for rendering. This means that normal HTML escaping will not be applied to the return value. This exposes your application to cross-site scripting (XSS) vulnerabilities. If you need to render raw HTML, consider instead using `mark_safe()` which more clearly marks the intent to render raw HTML than a class with a magic method.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "class-extends-safestring", "message": "Found a class extending 'SafeString', 'SafeText' or 'SafeData'. These classes are for bypassing the escaping engine built in to Django and should not be used directly. Improper use of this class exposes your application to cross-site scripting (XSS) vulnerabilities. If you need this functionality, use 'mark_safe' instead and ensure no user data can reach it.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "raw-html-format", "message": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "tainted-sql-string", "message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using the Django object-relational mappers (ORM) instead of raw SQL queries.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "open-redirect", "message": "Data from request ($DATA) is passed to redirect(). This is an open redirect and could be exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url(). See https://cwe.mitre.org/data/definitions/601.html for more information.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "tainted-url-host", "message": "User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server runnig this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode the correct host.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "mass-assignment", "message": "Mass assignment detected. This can result in assignment to model fields that are unintended and can be exploited by an attacker. Instead of using '**request.$W', assign each field you want to edit individually to prevent mass assignment. You can read more about mass assignment at https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "request-data-fileresponse", "message": "Found user-controlled request data being passed into a file open, which is them passed as an argument into the FileResponse. This is dangerous because an attacker could specify an arbitrary file to read, which could result in leaking important data. Be sure to validate or sanitize the user-inputted filename in the request data before using it in FileResponse.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "reflected-data-httpresponse", "message": "Found user-controlled request data passed into HttpResponse. This could be vulnerable to XSS, leading to attackers gaining access to user cookies and protected information. Ensure that the request data is properly escaped or sanitzed.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "request-data-write", "message": "Found user-controlled request data passed into '.write(...)'. This could be dangerous if a malicious actor is able to control data into sensitive files. For example, a malicious actor could force rolling of critical log files, or cause a denial-of-service by using up available disk space. Instead, ensure that request data is properly escaped or sanitized.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "reflected-data-httpresponsebadrequest", "message": "Found user-controlled request data passed into a HttpResponseBadRequest. This could be vulnerable to XSS, leading to attackers gaining access to user cookies and protected information. Ensure that the request data is properly escaped or sanitzed.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "csv-writer-injection", "message": "Detected user input into a generated CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "path-traversal-open", "message": "Found request data in a call to 'open'. Ensure the request data is validated or sanitized, otherwise it could result in path traversal attacks and therefore sensitive data being leaked. To mitigate, consider using os.path.abspath or os.path.realpath or the pathlib library.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "path-traversal-file-name", "message": "Data from request is passed to a file name `$FILE`. This is a path traversal vulnerability, which can lead to sensitive data being leaked. To mitigate, consider using os.path.abspath or os.path.realpath or the pathlib library.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "path-traversal-join", "message": "Data from request is passed to os.path.join() and to open(). This is a path traversal vulnerability, which can lead to sensitive data being leaked. To mitigate, consider using os.path.abspath or os.path.realpath or Path library.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "user-exec-format-string", "message": "Found user data in a call to 'exec'. This is extremely dangerous because it can enable an attacker to execute arbitrary remote code on the system. Instead, refactor your code to not use 'eval' and instead use a safe library for the specific functionality you need.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "user-exec", "message": "Found user data in a call to 'exec'. This is extremely dangerous because it can enable an attacker to execute arbitrary remote code on the system. Instead, refactor your code to not use 'eval' and instead use a safe library for the specific functionality you need.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "user-eval", "message": "Found user data in a call to 'eval'. This is extremely dangerous because it can enable an attacker to execute arbitrary remote code on the system. Instead, refactor your code to not use 'eval' and instead use a safe library for the specific functionality you need.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "user-eval-format-string", "message": "Found user data in a call to 'eval'. This is extremely dangerous because it can enable an attacker to execute remote code. See https://owasp.org/www-community/attacks/Code_Injection for more information.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "globals-misuse-code-execution", "message": "Found request data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "subprocess-injection", "message": "Detected user input entering a `subprocess` call unsafely. This could result in a command injection vulnerability. An attacker could use this vulnerability to execute arbitrary commands on the host, which allows them to download malware, scan sensitive data, or run any command they wish on the server. Do not let users choose the command to run. In general, prefer to use Python API versions of system commands. If you must use subprocess, use a dictionary to allowlist a set of commands.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "command-injection-os-system", "message": "Request data detected in os.system. This could be vulnerable to a command injection and should be avoided. If this must be done, use the 'subprocess' module instead and pass the arguments as a list. See https://owasp.org/www-community/attacks/Command_Injection for more information.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "ssrf-injection-requests", "message": "Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request. See https://owasp.org/www-community/attacks/Server_Side_Request_Forgery to learn more about SSRF vulnerabilities.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "ssrf-injection-urllib", "message": "Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF), which could result in attackers gaining access to private organization data. To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "xss-html-email-body", "message": "Found request data in an EmailMessage that is set to use HTML. This is dangerous because HTML emails are susceptible to XSS. An attacker could inject data into this HTML email, causing XSS.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "xss-send-mail-html-message", "message": "Found request data in 'send_mail(...)' that uses 'html_message'. This is dangerous because HTML emails are susceptible to XSS. An attacker could inject data into this HTML email, causing XSS.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "sql-injection-using-raw", "message": "Data that is possible user-controlled from a python request is passed to `raw()`. This could lead to SQL injection and attackers gaining access to protected information. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "sql-injection-using-rawsql", "message": "User-controlled data from request is passed to 'RawSQL()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use parameterized queries or escape the user-controlled data by using `params` and not using quote placeholders in the SQL string.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "sql-injection-using-extra-where", "message": "User-controlled data from a request is passed to 'extra()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use parameterized queries or escape the user-controlled data by using `params` and not using quote placeholders in the SQL string.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "sql-injection-db-cursor-execute", "message": "User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-cipher-algorithm-xor", "message": "Detected XOR cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use AES instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-cipher-algorithm-rc4", "message": "Detected ARC4 cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use AES instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-hash-algorithm-md2", "message": "Detected MD2 hash algorithm which is considered insecure. MD2 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-cipher-algorithm-blowfish", "message": "Detected Blowfish cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use AES instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-hash-algorithm-md4", "message": "Detected MD4 hash algorithm which is considered insecure. MD4 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insufficient-rsa-key-size", "message": "Detected an insufficient key size for RSA. NIST recommends a key size of 2048 or higher.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "crypto-mode-without-authentication", "message": "An encryption mode of operation is being used without proper message authentication. This can potentially result in the encrypted content to be decrypted by an attacker. Consider instead use an AEAD mode of operation like GCM. ", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "insecure-hash-algorithm-md5", "message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-cipher-algorithm-des", "message": "Detected DES cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use AES instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-cipher-algorithm-rc2", "message": "Detected RC2 cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use AES instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insufficient-dsa-key-size", "message": "Detected an insufficient key size for DSA. NIST recommends a key size of 2048 or higher.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-hash-algorithm-sha1", "message": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "bokeh-deprecated-apis", "message": "These APIs are deprecated in Bokeh see https://docs.bokeh.org/en/latest/docs/releases.html#api-deprecations", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "tainted-html-string", "message": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates which will safely render HTML instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "sqlalchemy-sqli", "message": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = ?', 'active')`", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "tainted-html-response", "message": "Detected user input flowing into an HTML response. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "tainted-sql-string", "message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "pymysql-sqli", "message": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', ('active'))`", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "psycopg-sqli", "message": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', 'active')`", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "pymssql-sqli", "message": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', 'active')`", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "dangerous-asyncio-shell", "message": "Detected asyncio subprocess function with argument tainted by `event` object. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "dangerous-subprocess-use", "message": "Detected subprocess function with argument tainted by an `event` object.  If this data can be controlled by a malicious actor, it may be an instance of command injection. The default option for `shell` is False, and this is secure by default. Consider removing the `shell=True` or setting it to False explicitely. Using `shell=False` means you have to split the command string into an array of strings for the command and its arguments. You may consider using 'shlex.split()' for this purpose.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "tainted-pickle-deserialization", "message": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "dynamodb-filter-injection", "message": "Detected DynamoDB query filter that is tainted by `$EVENT` object. This could lead to NoSQL injection if the variable is user-controlled and not properly sanitized. Explicitly assign query params instead of passing data from `$EVENT` directly to DynamoDB client.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "dangerous-system-call", "message": "Detected `os` function with argument tainted by `event` object. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "mysql-sqli", "message": "Detected SQL statement that is tainted by `event` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `cursor.execute('SELECT * FROM projects WHERE status = %s', ('active'))`", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "tainted-code-exec", "message": "Detected the use of `exec/eval`.This can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "dangerous-spawn-process", "message": "Detected `os` function with argument tainted by `event` object. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "dangerous-asyncio-create-exec", "message": "Detected 'create_subprocess_exec' function with argument tainted by `event` object. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "dangerous-asyncio-exec", "message": "Detected subprocess function '$LOOP.subprocess_exec' with argument tainted by `event` object. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "len-all-count", "message": "Using QUERY.count() instead of len(QUERY.all()) sends less data to the client since the SQLAlchemy method is performed server-side.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "batch-import", "message": "Rather than adding one element at a time, consider batch loading to improve performance.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "bad-operator-in-filter", "message": "Only comparison operators should be used inside SQLAlchemy filter expressions. Use `==` instead of `is`, `!=` instead of `is not`, `sqlalchemy.and_` instead of `and`, `sqlalchemy.or_` instead of `or`, `sqlalchemy.not_` instead of `not`, and `sqlalchemy.in_` instead of `in_`.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "delete-where-no-execute", "message": ".delete().where(...) results in a no-op in SQLAlchemy unless the command is executed, use .filter(...).delete() instead.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "sqlalchemy-execute-raw-query", "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "sqlalchemy-sql-injection", "message": "Distinct, Having, Group_by, Order_by, and Filter in SQLAlchemy can cause sql injections if the developer inputs raw SQL into the before-mentioned clauses. This pattern captures relevant cases in which the developer inputs raw SQL into the distinct, having, group_by, order_by or filter clauses and injects user-input into the raw SQL with any function besides \"bindparams\". Use bindParams to securely bind user-input to SQL statements.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "avoid-sqlalchemy-text", "message": "sqlalchemy.text passes the constructed SQL statement to the database mostly unchanged. This means that the usual SQL injection protections are not applied and this function is vulnerable to SQL injection if user input can reach here. Use normal SQLAlchemy operators (such as or_, and_, etc.) to construct SQL.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "require-encryption", "message": "Initializing a security context for Dask (`distributed`) without \"require_encryption\" keyword argument may silently fail to provide security.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "pyramid-authtkt-cookie-secure-unsafe-default", "message": "Found a Pyramid Authentication Ticket cookie using an unsafe default for the secure option. Pyramid cookies should be handled securely by setting secure=True. If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "pyramid-set-cookie-samesite-unsafe-value", "message": "Found a Pyramid cookie without the samesite option correctly set. Pyramid cookies should be handled securely by setting samesite='Lax' in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "pyramid-authtkt-cookie-secure-unsafe-value", "message": "Found a Pyramid Authentication Ticket cookie without the secure option correctly set. Pyramid cookies should be handled securely by setting secure=True. If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "pyramid-set-cookie-httponly-unsafe-value", "message": "Found a Pyramid cookie without the httponly option correctly set. Pyramid cookies should be handled securely by setting httponly=True in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "pyramid-set-cookie-samesite-unsafe-default", "message": "Found a Pyramid cookie using an unsafe value for the samesite option. Pyramid cookies should be handled securely by setting samesite='Lax' in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "pyramid-authtkt-cookie-httponly-unsafe-default", "message": "Found a Pyramid Authentication Ticket cookie without the httponly option correctly set. Pyramid cookies should be handled securely by setting httponly=True. If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "pyramid-set-cookie-secure-unsafe-value", "message": "Found a Pyramid cookie without the secure option correctly set. Pyramid cookies should be handled securely by setting secure=True in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "pyramid-set-cookie-httponly-unsafe-default", "message": "Found a Pyramid cookie using an unsafe default for the httponly option. Pyramid cookies should be handled securely by setting httponly=True in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "pyramid-set-cookie-secure-unsafe-default", "message": "Found a Pyramid cookie using an unsafe default for the secure option. Pyramid cookies should be handled securely by setting secure=True in response.set_cookie(...). If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "pyramid-authtkt-cookie-httponly-unsafe-value", "message": "Found a Pyramid Authentication Ticket cookie without the httponly option correctly set. Pyramid cookies should be handled securely by setting httponly=True. If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "pyramid-csrf-origin-check-disabled-globally", "message": "Automatic check of the referrer for cross-site request forgery tokens has been explicitly disabled globally, which might leave views unprotected when an unsafe CSRF storage policy is used. Use 'pyramid.config.Configurator.set_default_csrf_options(check_origin=True)' to turn the automatic check for all unsafe methods (per RFC2616).", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "pyramid-authtkt-cookie-samesite", "message": "Found a Pyramid Authentication Ticket without the samesite option correctly set. Pyramid cookies should be handled securely by setting samesite='Lax'. If this parameter is not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "pyramid-csrf-check-disabled", "message": "CSRF protection is disabled for this view. This is a security risk.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "pyramid-csrf-origin-check-disabled", "message": "Origin check for the CSRF token is disabled for this view. This might represent a security risk if the CSRF storage policy is not known to be secure.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "pyramid-csrf-check-disabled-globally", "message": "Automatic check of cross-site request forgery tokens has been explicitly disabled globally, which might leave views unprotected. Use 'pyramid.config.Configurator.set_default_csrf_options(require_csrf=True)' to turn the automatic check for all unsafe methods (per RFC2616).", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "pyramid-direct-use-of-response", "message": "Detected data rendered directly to the end user via 'Response'. This bypasses Pyramid's built-in cross-site scripting (XSS) defenses and could result in an XSS vulnerability. Use Pyramid's template engines to safely render HTML.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "pyramid-sqlalchemy-sql-injection", "message": "Distinct, Having, Group_by, Order_by, and Filter in SQLAlchemy can cause sql injections if the developer inputs raw SQL into the before-mentioned clauses. This pattern captures relevant cases in which the developer inputs raw SQL into the distinct, having, group_by, order_by or filter clauses and injects user-input into the raw SQL with any function besides \"bindparams\". Use bindParams to securely bind user-input to SQL statements.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "open-never-closed", "message": "file object opened without corresponding close", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "arbitrary-sleep", "message": "time.sleep() call; did you mean to leave this in?", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "unspecified-open-encoding", "message": "Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python-debugger-found", "message": "Importing the python debugger; did you mean to leave this in?", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "pass-body-fn", "message": "`pass` is the body of function $X. Consider removing this or raise NotImplementedError() if this is a TODO", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "pass-body-range", "message": "`pass` is the body of for $X in $Y. Consider removing this or raise NotImplementedError() if this is a TODO", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "logging-error-without-handling", "message": "Errors should only be logged when handled. The code logs the error and propogates the exception, consider reducing the level to warning or info.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "hardcoded-tmp-path", "message": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "manual-defaultdict-dict-create", "message": "manually creating a defaultdict - use collections.defaultdict(dict)", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "manual-defaultdict-set-create", "message": "manually creating a defaultdict - use collections.defaultdict(set)", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "manual-defaultdict-list-create", "message": "manually creating a defaultdict - use collections.defaultdict(list)", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "manual-counter-create", "message": "manually creating a counter - use collections.Counter", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "missing-hash-with-eq", "message": "Class `$A` has defined `__eq__` which means it should also have defined `__hash__`; ", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "is-function-without-parentheses", "message": "Is \"$FUNC\" a function or an attribute? If it is a function, you may have meant $X.$FUNC() because $X.$FUNC is always true.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "useless-assignment-keyed", "message": "key `$Y` in `$X` is assigned twice; the first assignment is useless", "parent_source": "community", "severity": "`INFO`", "languages": "Python"}, {"identifier": "useless-inner-function", "message": "function `$FF` is defined inside a function but never used", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "code-after-unconditional-return", "message": "code after return statement will not be executed", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "return-not-in-function", "message": "`return` only makes sense inside a function", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "useless-if-conditional", "message": "if block checks for the same condition on both branches (`$X`)", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "useless-if-body", "message": "Useless if statement; both blocks have the same body", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "improper-list-concat", "message": "This expression will evaluate to be ONLY value the of the `else` clause if the condition `$EXPRESSION` is false. If you meant to do list concatenation, put parentheses around the entire concatenation expression, like this: `['a', 'b', 'c'] + (['d'] if x else ['e'])`. If this is the intended behavior, the expression may be confusing to others, and you may wish to add parentheses for readability.", "parent_source": "community", "severity": "`INFO`", "languages": "Python"}, {"identifier": "useless-literal-set", "message": "`$X` is uselessly assigned twice inside the creation of the set", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "useless-literal", "message": "key `$X` is uselessly assigned twice", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python37-compatibility-importlib", "message": "source_hash' is only available on Python 3.7+. This does not work in lower versions, and therefore is not backwards compatible. Instead, use another hash function.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "python37-compatibility-importlib2", "message": "Found 'importlib.resources', which is a module only available on Python 3.7+. This does not work in lower versions, and therefore is not backwards compatible. Use importlib_resources instead for older Python versions.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "python37-compatibility-httpconn", "message": "Found usage of the 'blocksize' argument in a HTTPConnection call. This is only available on Python 3.7+ and is therefore not backwards compatible. Remove this in order for this code to work in Python 3.6 and below.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "python37-compatibility-httpsconn", "message": "Found usage of the 'blocksize' argument in a HTTPSConnection call. This is only available on Python 3.7+ and is therefore not backwards compatible. Remove this in order for this code to work in Python 3.6 and below.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "python37-compatibility-importlib3", "message": "Found usage of 'importlib.abc.ResourceReader'. This module is only available on Python 3.7+ and is therefore not backwards compatible. Instead, use another loader.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "python37-compatibility-textiowrapper", "message": "Found usage of 'importlib.abc.ResourceReader'. This module is only available on Python 3.7+ and is therefore not backwards compatible. Instead, use another loader.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "python37-compatibility-ipv6network1", "message": "IPv6Network.subnet_of is only available on Python 3.7+ and is therefore not backwards compatible. Instead, check if the subnet is in 'subnets'.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "python37-compatibility-ipv6network2", "message": "IPv6Network.supernet_of is only available on Python 3.7+ and is therefore not backwards compatible. Instead, check if the supernet is in 'supernet'.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "python37-compatibility-ipv4network1", "message": "IPv4Network.subnet_of is only available on Python 3.7+ and is therefore not backwards compatible. Instead, check if the subnet is in 'subnets'.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "python37-compatibility-ipv4network2", "message": "IPv4Network.supernet_of is only available on Python 3.7+ and is therefore not backwards compatible. Instead, check if the supernet is in 'supernet'.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "python37-compatibility-locale1", "message": "Found usage of the 'monetary' argument in a function call of 'locale.format_string'. This is only available on Python 3.7+ and is therefore not backwards compatible. Instead, remove the 'monetary' argument.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "python37-compatibility-math1", "message": "math.remainder is only available on Python 3.7+ and is therefore not backwards compatible. Instead, use math.fmod() or calculate $X - n* $Y.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "python37-compatibility-multiprocess1", "message": "multiprocessing.Process.close() is only available on Python 3.7+ and is therefore not backwards compatible. Instead, use join().", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "python37-compatibility-multiprocess2", "message": "multiprocessing.Process.kill() is only available on Python 3.7+ and is therefore not backwards compatible. Instead, use terminate().", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "python37-compatibility-os1", "message": "os.preadv() is only available on Python 3.7+ and is therefore not backwards compatible. Instead, use a combination of os.readv() and os.pread().", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "python37-compatibility-os2-ok2", "message": "os.pwritev() is only available on Python 3.3+ and is therefore not backwards compatible. Instead, use a combination of pwrite() and writev().", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "python37-compatibility-pdb", "message": "pdb.set_trace() with the header argument is only available on Python 3.7+ and is therefore not backwards compatible. Instead, use set_trace() without the header argument.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "python36-compatibility-ssl", "message": "this function is only available on Python 3.6+", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "python36-compatibility-Popen1", "message": "the `errors` argument to Popen is only available on Python 3.6+", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "python36-compatibility-Popen2", "message": "the `encoding` argument to Popen is only available on Python 3.6+", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "no-strings-as-booleans", "message": "Using strings as booleans in Python has unexpected results. `\"one\" and \"two\"` will return \"two\". `\"one\" or \"two\"` will return \"one\". In Python, strings are truthy, and strings with a non-zero length evaluate to True.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "writing-to-file-in-read-mode", "message": "The file object '$FD' was opened in read mode, but is being written to. This will cause a runtime error.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "cannot-cache-generators", "message": "Generators can only be consumed once, so in most cases, caching them will cause an error when the already-consumed generator is retrieved from cache.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "uncaught-executor-exceptions", "message": "Values returned by thread pool map must be read in order to raise exceptions. Consider using `for _ in $EXECUTOR.map(...): pass`.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "unchecked-subprocess-call", "message": "This is not checking the return value of this subprocess call; if it fails no exception will be raised. Consider subprocess.check_call() instead", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "pytest-assert_match-after-path-patch", "message": "snapshot.assert_match makes use of pathlib to create files. Patching $METHOD may result in unexpected snapshot behavior", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "sync-sleep-in-async-code", "message": "Synchronous time.sleep in async code will block the event loop and not allow other tasks to execute. Use asyncio.sleep() instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "use-sys-exit", "message": "Detected use of `exit`. Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "pdb-remove", "message": "pdb is an interactive debugging tool and you may have forgotten to remove it before committing your code", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "return-in-init", "message": "`return` should never appear inside a class __init__ function. This will cause a runtime error.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "yield-in-init", "message": "`yield` should never appear inside a class __init__ function. This will cause a runtime error.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "test-is-missing-assert", "message": "Comparison without assertion. The result of this comparison is not used. Perhaps this expression is missing an `assert` keyword.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "list-modify-while-iterate", "message": "It appears that `$LIST` is a list that is being modified while in a for loop. This will likely cause a runtime error or an infinite loop.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "file-object-redefined-before-close", "message": "Detected a file object that is redefined and never closed. This could leak file descriptors and unnecessarily consume system resources.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "useless-eqeq", "message": "This expression is always True: `$X == $X` or `$X != $X`. If testing for floating point NaN, use `math.isnan($X)`, or `cmath.isnan($X)` if the number is complex.", "parent_source": "community", "severity": "`INFO`", "languages": "Python"}, {"identifier": "dict-del-while-iterate", "message": "It appears that `$DICT[$KEY]` is a dict with items being deleted while in a for loop. This is usually a bad idea and will likely lead to a RuntimeError: dictionary changed size during iteration", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "baseclass-attribute-override", "message": "Class $C inherits from both `$A` and `$B` which both have a method named `$F`; one of these methods will be overwritten.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "tempfile-without-flush", "message": "Using '$F.name' without '.flush()' or '.close()' may cause an error because the file may not exist when '$F.name' is used. Use '.flush()' or close the file before using '$F.name'.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "tempfile-insecure", "message": "Use tempfile.NamedTemporaryFile instead. From the official Python documentation: THIS FUNCTION IS UNSAFE AND SHOULD NOT BE USED. The file name may refer to a file that did not exist at some point, but by the time you get around to creating it, someone else may have beaten you to the punch.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "raise-not-base-exception", "message": "In Python3, a runtime `TypeError` will be thrown if you attempt to raise an object or class which does not inherit from `BaseException`", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "is-not-is-not", "message": "In Python 'X is not ...' is different from 'X is (not ...)'. In the latter the 'not' converts the '...' directly to boolean.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "string-concat-in-list", "message": "Detected strings that are implicitly concatenated inside a list. Python will implicitly concatenate strings when not explicitly delimited. Was this supposed to be individual elements of the list?", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "identical-is-comparison", "message": "Found identical comparison using is. Ensure this is what you intended.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "string-is-comparison", "message": "Found string comparison using 'is' operator. The 'is' operator is for reference equality, not value equality, and therefore should not be used to compare strings. For more information, see https://github.com/satwikkansal/wtfpython#-how-not-to-use-is-operator\"", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "default-mutable-dict", "message": "Function $F mutates default dict $D. Python only instantiates default function arguments once and shares the instance across the function calls. If the default function argument is mutated, that will modify the instance used by all future function calls. This can cause unexpected results, or lead to security vulnerabilities whereby one function consumer can view or modify the data of another function consumer. Instead, use a default argument (like None) to indicate that no argument was provided and instantiate a new dictionary at that time. For example: `if $D is None: $D = {}`.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "default-mutable-list", "message": "Function $F mutates default list $D. Python only instantiates default function arguments once and shares the instance across the function calls. If the default function argument is mutated, that will modify the instance used by all future function calls. This can cause unexpected results, or lead to security vulnerabilities whereby one function consumer can view or modify the data of another function consumer. Instead, use a default argument (like None) to indicate that no argument was provided and instantiate a new list at that time. For example: `if $D is None: $D = []`.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "unquoted-csv-writer", "message": "This rule is deprecated.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "dangerous-globals-use", "message": "Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-hash-algorithm-sha1", "message": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "use-defused-xml", "message": "The Python documentation recommends using `defusedxml` instead of `xml` because the native Python `xml` library is vulnerable to XML External Entity (XXE) attacks. These attacks can leak confidential data and \"XML bombs\" can cause denial of service.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "insecure-hash-function", "message": "Detected use of an insecure MD4 or MD5 hash function. These functions have known vulnerabilities and are considered deprecated. Consider using 'SHA256' or a similar function instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "use-defusedcsv", "message": "Detected the generation of a CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs.", "parent_source": "community", "severity": "`INFO`", "languages": "Python"}, {"identifier": "dangerous-subprocess-use", "message": "Detected subprocess function '$FUNC' with user controlled data. A malicious actor could leverage this to perform command injection. You may consider using 'shlex.escape()'.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "insecure-hash-algorithm-md5", "message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "use-defused-xml-parse", "message": "The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks can leak confidential data and \"XML bombs\" can cause denial of service. Do not use this library to parse untrusted input. Instead  the Python documentation recommends using `defusedxml`.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "dangerous-os-exec", "message": "Found user controlled content when spawning a process. This is dangerous because it allows a malicious actor to execute commands.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "dangerous-system-call", "message": "Found user-controlled data used in a system call. This could allow a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "use-defused-xmlrpc", "message": "Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities. Use defusedxml.xmlrpc instead.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "dangerous-spawn-process", "message": "Found user controlled content when spawning a process. This is dangerous because it allows a malicious actor to execute commands.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "unverified-ssl-context", "message": "Unverified SSL context detected. This will permit insecure connections without verifying SSL certificates. Use 'ssl.create_default_context' instead.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "dangerous-testcapi-run-in-subinterp", "message": "Found user controlled content in `run_in_subinterp`. This is dangerous because it allows a malicious actor to run arbitrary Python code.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "dangerous-interactive-code-run", "message": "Found user controlled data inside InteractiveConsole/InteractiveInterpreter method. This is dangerous if external data can reach this function call because it allows a malicious actor to run arbitrary Python code.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "dangerous-subinterpreters-run-string", "message": "Found user controlled content in `run_string`. This is dangerous because it allows a malicious actor to run arbitrary Python code.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "weak-ssl-version", "message": "An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use 'ssl.PROTOCOL_TLSv1_2' or higher.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "dynamic-urllib-use-detected", "message": "Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "dangerous-system-call-audit", "message": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "httpsconnection-detected", "message": "The HTTPSConnection API has changed frequently with minor releases of Python. Ensure you are using the API for your version of Python securely. For example, Python 3 versions prior to 3.4.3 will not verify SSL certificates by default. See https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection for more information.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "dangerous-subinterpreters-run-string-audit", "message": "Found dynamic content in `run_string`. This is dangerous if external data can reach this function call because it allows a malicious actor to run arbitrary Python code. Ensure no external data reaches here.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "ssl-wrap-socket-is-deprecated", "message": "'ssl.wrap_socket()' is deprecated. This function creates an insecure socket without server name indication or hostname matching. Instead, create an SSL context using 'ssl.SSLContext()' and use that to wrap a socket.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-file-permissions", "message": "These permissions `$BITS` are widely permissive and grant access to more people than may be necessary. A good default is `0o644` which gives read and write access to yourself and read access to everyone else.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "dangerous-spawn-process-tainted-env-args", "message": "Found user controlled content when spawning a process. This is dangerous because it allows a malicious actor to execute commands.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "dangerous-asyncio-shell-audit", "message": "Detected asyncio subprocess function without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "telnetlib", "message": "Telnet does not encrypt communications. Use SSH instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "dangerous-asyncio-shell-tainted-env-args", "message": "Detected asyncio subprocess function with user controlled data. You may consider using 'shlex.escape()'.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "mako-templates-detected", "message": "Mako templates do not provide a global HTML escaping mechanism. This means you must escape all sensitive data in your templates using '| u' for URL escaping or '| h' for HTML escaping. If you are using Mako to serve web content, consider using a system such as Jinja2 which enables global escaping.", "parent_source": "community", "severity": "`INFO`", "languages": "Python"}, {"identifier": "dangerous-subprocess-use-tainted-env-args", "message": "Detected subprocess function '$FUNC' with user controlled data. A malicious actor could leverage this to perform command injection. You may consider using 'shlex.escape()'.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "dangerous-annotations-usage", "message": "Annotations passed to `typing.get_type_hints` are evaluated in `globals` and `locals` namespaces. Make sure that no arbitrary value can be written as the annotation and passed to `typing.get_type_hints` function.", "parent_source": "community", "severity": "`INFO`", "languages": "Python"}, {"identifier": "dangerous-subinterpreters-run-string-tainted-env-args", "message": "Found user controlled content in `run_string`. This is dangerous because it allows a malicious actor to run arbitrary Python code.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "non-literal-import", "message": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "subprocess-shell-true", "message": "Found 'subprocess' function '$FUNC' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "dangerous-testcapi-run-in-subinterp-audit", "message": "Found dynamic content in `run_in_subinterp`. This is dangerous if external data can reach this function call because it allows a malicious actor to run arbitrary Python code. Ensure no external data reaches here.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "eval-detected", "message": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "dangerous-spawn-process-audit", "message": "Found dynamic content when spawning a process. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "python-reverse-shell", "message": "Semgrep found a Python reverse shell using $BINPATH to $IP at $PORT", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "dangerous-interactive-code-run-tainted-env-args", "message": "Found user controlled data inside InteractiveConsole/InteractiveInterpreter method. This is dangerous if external data can reach this function call because it allows a malicious actor to run arbitrary Python code.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "dangerous-asyncio-exec-tainted-env-args", "message": "Detected subprocess function '$LOOP.subprocess_exec' with user controlled data. You may consider using 'shlex.escape()'.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "hardcoded-password-default-argument", "message": "Hardcoded password is used as a default argument to '$FUNC'. This could be dangerous if a real password is not supplied.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "dangerous-subprocess-use", "message": "This rule is deprecated. It will no longer produce findings.", "parent_source": "community", "severity": "`INFO`", "languages": "Python"}, {"identifier": "dangerous-system-call-tainted-env-args", "message": "Found user-controlled data used in a system call. This could allow a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "dangerous-asyncio-exec-audit", "message": "Detected subprocess function '$LOOP.subprocess_exec' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "system-wildcard-detected", "message": "Detected use of the wildcard character in a system call that spawns a shell. This subjects the wildcard to normal shell expansion, which can have unintended consequences if there exist any non-standard file names. Consider a file named '-e sh script.sh' -- this will execute a script when 'rsync' is called. See https://www.defensecode.com/public/DefenseCode_Unix_WildCards_Gone_Wild.txt for more information.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "dangerous-asyncio-create-exec-tainted-env-args", "message": "Detected 'create_subprocess_exec' function with user controlled data. You may consider using 'shlex.escape()'.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "dangerous-os-exec-tainted-env-args", "message": "Found user controlled content when spawning a process. This is dangerous because it allows a malicious actor to execute commands.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "paramiko-implicit-trust-host-key", "message": "Detected a paramiko host key policy that implicitly trusts a server's host key. Host keys should be verified to ensure the connection is not to a malicious server. Use RejectPolicy or a custom subclass instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "dangerous-subprocess-use-audit", "message": "Detected subprocess function '$FUNC' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "marshal-usage", "message": "The marshal module is not intended to be secure against erroneous or maliciously constructed data. Never unmarshal data received from an untrusted or unauthenticated source. See more details: https://docs.python.org/3/library/marshal.html?highlight=security", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "exec-detected", "message": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "dangerous-testcapi-run-in-subinterp-tainted-env-args", "message": "Found user controlled content in `run_in_subinterp`. This is dangerous because it allows a malicious actor to run arbitrary Python code.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "formatted-sql-query", "message": "Detected possible formatted SQL query. Use parameterized queries instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "md5-used-as-password", "message": "It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as scrypt. You can use `hashlib.scrypt`.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "dangerous-os-exec-audit", "message": "Found dynamic content when spawning a process. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "dangerous-asyncio-create-exec-audit", "message": "Detected 'create_subprocess_exec' function without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "ftplib", "message": "FTP does not encrypt communications by default. This can lead to sensitive data being exposed. Ensure use of FTP here does not expose sensitive data.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "dangerous-interactive-code-run-audit", "message": "Found dynamic content inside InteractiveConsole/InteractiveInterpreter method. This is dangerous if external data can reach this function call because it allows a malicious actor to run arbitrary Python code. Ensure no external data reaches here.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "multiprocessing-recv", "message": "The Connection.recv() method automatically unpickles the data it receives, which can be a security risk unless you can trust the process which sent the message. Therefore, unless the connection object was produced using Pipe() you should only use the recv() and send() methods after performing some sort of authentication. See more dettails: https://docs.python.org/3/library/multiprocessing.html?highlight=security#multiprocessing.connection.Connection", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "regex_dos", "message": "Detected usage of re.compile with an inefficient regular expression. This can lead to regular expression denial of service, which can result in service down time. Instead, check all regexes or use safer alternatives such as pyre2.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "paramiko-exec-command", "message": "Unverified SSL context detected. This will permit insecure connections without verifying SSL certificates. Use 'ssl.create_default_context()' instead.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "aiopg-sqli", "message": "Detected string concatenation with a non-literal variable in an aiopg Python SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries instead. You can create parameterized queries like so: 'cur.execute(\"SELECT %s FROM table\", (user_value,))'.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "psycopg-sqli", "message": "Detected string concatenation with a non-literal variable in a psycopg2 Python SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use prepared statements by creating a 'sql.SQL' string. You can also use the pyformat binding style to create parameterized queries. For example: 'cur.execute(SELECT * FROM table WHERE name=%s, user_input)'", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "asyncpg-sqli", "message": "Detected string concatenation with a non-literal variable in a asyncpg Python SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can create parameterized queries like so: 'conn.fetch(\"SELECT $1 FROM table\", value)'. You can also create prepared statements with 'Connection.prepare': 'stmt = conn.prepare(\"SELECT $1 FROM table\"); await stmt.fetch(user_value)'", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "pg8000-sqli", "message": "Detected string concatenation with a non-literal variable in a pg8000 Python SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can create parameterized queries like so: 'conn.run(\"SELECT :value FROM table\", value=myvalue)'. You can also create prepared statements with 'conn.prepare': 'conn.prepare(\"SELECT (:v) FROM table\")'", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "http-not-https-connection", "message": "Detected HTTPConnectionPool. This will transmit data in cleartext. It is recommended to use HTTPSConnectionPool instead for to encrypt communications.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "disabled-cert-validation", "message": "certificate verification explicitly disabled, insecure connections possible", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "avoid-bind-to-all-interfaces", "message": "Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file.", "parent_source": "community", "severity": "`INFO`", "languages": "Python"}, {"identifier": "python-logger-credential-disclosure", "message": "Detected a python logger call with a potential hardcoded secret $FORMAT_STRING being logged. This may lead to secret credentials being exposed. Make sure that the logger is not logging  sensitive information.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "listen-eval", "message": "Because portions of the logging configuration are passed through eval(), use of this function may open its users to a security risk. While the function only binds to a socket on localhost, and so does not accept connections from remote machines, there are scenarios where untrusted code could be run under the account of the process which calls listen(). To avoid this happening, use the `verify()` argument to `listen()` to prevent unrecognized configurations.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "use-ftp-tls", "message": "The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "no-set-ciphers", "message": "The 'ssl' module disables insecure cipher suites by default. Therefore, use of 'set_ciphers()' should only be used when you have very specialized requirements. Otherwise, you risk lowering the security of the SSL channel.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "request-session-with-http", "message": "Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.", "parent_source": "community", "severity": "`INFO`", "languages": "Python"}, {"identifier": "request-session-http-in-with-context", "message": "Detected a request using 'http://'. This request will be unencrypted. Use 'https://' instead.", "parent_source": "community", "severity": "`INFO`", "languages": "Python"}, {"identifier": "request-with-http", "message": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead.", "parent_source": "community", "severity": "`INFO`", "languages": "Python"}, {"identifier": "insecure-openerdirector-open-ftp", "message": "Detected an unsecured transmission channel. 'OpenerDirector.open(...)' is being used with 'ftp://'. Information sent over this connection will be unencrypted. Consider using SFTP instead. urllib does not support SFTP, so consider a library which supports SFTP.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-urlopener-retrieve-ftp", "message": "Detected an insecure transmission channel. 'URLopener.retrieve(...)' is being used with 'ftp://'. Use SFTP instead. urllib does not support SFTP, so consider using a library which supports SFTP.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-urlretrieve", "message": "Detected 'urllib.urlretrieve()' using 'http://'. This request will not be encrypted. Use 'https://' instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-urlopener-retrieve", "message": "Detected an unsecured transmission channel. 'URLopener.retrieve(...)' is being used with 'http://'. Use 'https://' instead to secure the channel.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-openerdirector-open", "message": "Detected an unsecured transmission channel. 'OpenerDirector.open(...)' is being used with 'http://'. Use 'https://' instead to secure the channel.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-urlopen-ftp", "message": "Detected 'urllib.urlopen()' using 'ftp://'. This request will not be encrypted. Consider using SFTP instead. urllib does not support SFTP, so consider switching to a library which supports SFTP.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-urlopener-open", "message": "Detected an unsecured transmission channel. 'URLopener.open(...)' is being used with 'http://'. Use 'https://' instead to secure the channel.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-urlretrieve-ftp", "message": "Detected 'urllib.urlretrieve()' using 'ftp://'. This request will not be encrypted. Use SFTP instead. urllib does not support SFTP, so consider switching to a library which supports SFTP.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-urlopen", "message": "Detected 'urllib.urlopen()' using 'http://'. This request will not be encrypted. Use 'https://' instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-urlopener-open-ftp", "message": "Detected an insecure transmission channel. 'URLopener.open(...)' is being used with 'ftp://'. Use SFTP instead. urllib does not support SFTP, so consider using a library which supports SFTP.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-request-object-ftp", "message": "Detected a 'urllib.request.Request()' object using an insecure transport protocol, 'ftp://'. This connection will not be encrypted. Consider using SFTP instead. urllib does not support SFTP natively, so consider using a library which supports SFTP.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-request-object", "message": "Detected a 'urllib.request.Request()' object using an insecure transport protocol, 'http://'. This connection will not be encrypted. Use 'https://' instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "avoid-unsafe-ruamel", "message": "Avoid using unsafe `ruamel.yaml.YAML()`. `ruamel.yaml.YAML` can create arbitrary Python objects. A malicious actor could exploit this to run arbitrary code. Use `YAML(typ='rt')` or `YAML(typ='safe')` instead.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "avoid-jsonpickle", "message": "Avoid using `jsonpickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data using `json` module.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "avoid-pickle", "message": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "avoid-cPickle", "message": "Avoid using `cPickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "avoid-dill", "message": "Avoid using `dill`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "avoid-shelve", "message": "Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "avoid-pyyaml-load", "message": "Detected a possible YAML deserialization vulnerability. `yaml.unsafe_load`, `yaml.Loader`, `yaml.CLoader`, and `yaml.UnsafeLoader` are all known to be unsafe methods of deserializing YAML. An attacker with control over the YAML input could create special YAML input that allows the attacker to run arbitrary Python code. This would allow the attacker to steal files, download and install malware, or otherwise take over the machine. Use `yaml.safe_load` or `yaml.SafeLoader` instead.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "socket-shutdown-close", "message": "Socket is not closed if shutdown fails. When socket.shutdown fails on an OSError, socket.close is not called and the code fails to clean up the socket and allow garbage collection to release the memory used for it. The OSError on shutdown can occur when the remote side of the connection closes the connection first.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "suppressed-exception-handling-finally-break", "message": "Having a `break`, `continue`, or `return` in a `finally` block will cause strange behaviors, like exceptions not being caught.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "use-click-secho", "message": "Use `click.secho($X)` instead. It combines click.echo() and click.style().", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "insecure-cipher-algorithm-blowfish", "message": "Detected Blowfish cipher algorithm which is considered insecure. The algorithm is considered weak and has been deprecated. Use AES instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-hash-algorithm-sha1", "message": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insufficient-rsa-key-size", "message": "Detected an insufficient key size for RSA. NIST recommends a key size of 2048 or higher.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "crypto-mode-without-authentication", "message": "An encryption mode of operation is being used without proper message authentication. This can potentially result in the encrypted content to be decrypted by an attacker. Consider instead use an AEAD mode of operation like GCM. ", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "insufficient-ec-key-size", "message": "Detected an insufficient curve size for EC. NIST recommends a key size of 224 or higher. For example, use 'ec.SECP256R1'.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-cipher-algorithm-idea", "message": "Detected IDEA cipher algorithm which is considered insecure. The algorithm is considered weak and has been deprecated. Use AES instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-hash-algorithm-md5", "message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-cipher-mode-ecb", "message": "Detected ECB cipher mode which is considered insecure. The algorithm can potentially leak information about the plaintext. Use CBC mode instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insecure-cipher-algorithm-arc4", "message": "Detected ARC4 cipher algorithm which is considered insecure. The algorithm is considered weak and has been deprecated. Use AES instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "empty-aes-key", "message": "Potential empty AES encryption key. Using an empty key in AES encryption can result in weak encryption and may allow attackers to easily decrypt sensitive data. Ensure that a strong, non-empty key is used for AES encryption.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "insufficient-dsa-key-size", "message": "Detected an insufficient key size for DSA. NIST recommends a key size of 2048 or higher.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "attr-mutable-initializer", "message": "Unsafe usage of mutable initializer with attr.s decorator. Multiple instances of this class will re-use the same data structure, which is likely not the desired behavior. Consider instead: replace assignment to mutable initializer (ex. dict() or {}) with attr.ib(factory=type) where type is dict, set, or list", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "use-raise-for-status", "message": "There's an HTTP request made with requests, but the raise_for_status() utility method isn't used. This can result in request errors going unnoticed and your code behaving in unexpected ways, such as if your authorization API returns a 500 error while you're only checking for a 401.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python.requests.best-practice.use-request-json-shortcut", "message": "The requests library has a convenient shortcut for sending JSON requests, which lets you stop worrying about serializing the body yourself. To use it, replace `body=json.dumps(...)` with `json=...`.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python.requests.best-practice.use-response-json-shortcut", "message": "The requests library has a convenient shortcut for reading JSON responses, which lets you stop worrying about deserializing the response yourself.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "use-timeout", "message": "Detected a 'requests' call without a timeout set. By default, 'requests' calls wait until the connection is closed. This means a 'requests' call without a timeout will hang the program if a response is never received. Consider setting a timeout for all 'requests'.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "no-auth-over-http", "message": "Authentication detected over HTTP. HTTP does not provide any encryption or protection for these authentication credentials. This may expose these credentials to unauthorized parties. Use 'https://' instead.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "disabled-cert-validation", "message": "Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "formatted-string-bashoperator", "message": "Found a formatted string in BashOperator: $CMD. This could be vulnerable to injection. Be extra sure your variables are not controllable by external sources.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "string-concat", "message": "Detected string concatenation or formatting in a call to a command via 'sh'. This could be a command injection vulnerability if the data is user-controlled. Instead, use a list and append the argument.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "hardcoded-token", "message": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "docker-arbitrary-container-run", "message": "If unverified user data can reach the `run` or `create` method it can result in running arbitrary container.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "missing-autoescape-disabled", "message": "Detected a Jinja2 environment without autoescaping. Jinja2 does not autoescape by default. This is dangerous if you are rendering to a browser because this allows for cross-site scripting (XSS) attacks. If you are in a web context, enable autoescaping by setting 'autoescape=True.' You may also consider using 'jinja2.select_autoescape()' to only enable automatic escaping for certain file extensions.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "incorrect-autoescape-disabled", "message": "Detected a Jinja2 environment with 'autoescaping' disabled. This is dangerous if you are rendering to a browser because this allows for cross-site scripting (XSS) attacks. If you are in a web context, enable 'autoescaping' by setting 'autoescape=True.' You may also consider using 'jinja2.select_autoescape()' to only enable automatic escaping for certain file extensions.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "flask-class-method-get-side-effects", "message": "Flask class method GET with side effects", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "use-jsonify", "message": "flask.jsonify() is a Flask helper method which handles the correct  settings for returning JSON from Flask routes", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "flask-deprecated-apis", "message": "deprecated Flask API", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "flask-duplicate-handler-name", "message": "Looks like `$R` is a flask function handler that registered to two different routes. This will cause a runtime error", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "avoid-accessing-request-in-wrong-handler", "message": "Accessing request object inside a route handle for HTTP GET command will throw due to missing request body.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "flask-cache-query-string", "message": "Flask-caching doesn't cache query strings by default. You have to use `query_string=True`. Also you shouldn't cache verbs that can mutate state.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "flask-api-method-string-format", "message": "Method $METHOD in API controller $CLASS provides user arg $ARG to requests method $REQMETHOD", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "insecure-deserialization", "message": "Detected the use of an insecure deserialization library in a Flask route. These libraries are prone to code execution vulnerabilities. Ensure user data does not enter this function. To fix this, try to avoid serializing whole objects. Consider instead using a serializer such as JSON.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "open-redirect", "message": "Data from request is passed to redirect(). This is an open redirect and could be exploited. Consider using 'url_for()' to generate links to known locations. If you must use a URL to unknown pages, consider using 'urlparse()' or similar and checking if the 'netloc' property is the same as your site's host name. See the references for more information.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "hashids-with-flask-secret", "message": "The Flask secret key is used as salt in HashIDs. The HashID mechanism is not secure. By observing sufficient HashIDs, the salt used to construct them can be recovered. This means the Flask secret key can be obtained by attackers, through the HashIDs.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "unescaped-template-extension", "message": "Flask does not automatically escape Jinja templates unless they have .html, .htm, .xml, or .xhtml extensions. This could lead to XSS attacks. Use .html, .htm, .xml, or .xhtml for your template extensions. See https://flask.palletsprojects.com/en/1.1.x/templating/#jinja-setup for more information.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "response-contains-unsanitized-input", "message": "Flask response reflects unsanitized user input. This could lead to a cross-site scripting vulnerability (https://owasp.org/www-community/attacks/xss/) in which an attacker causes arbitrary code to be executed in the user's browser. To prevent, please sanitize the user input, e.g. by rendering the response in a Jinja2 template (see considerations in https://flask.palletsprojects.com/en/1.0.x/security/).", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "dangerous-template-string", "message": "Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "avoid_send_file_without_path_sanitization", "message": "Detected a user-controlled `filename` that could flow to `flask.send_file()` function. This could lead to an attacker reading arbitrary file from the system, leaking private information. Make sure to properly sanitize filename or use `flask.send_from_directory`", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "avoid_hardcoded_config_TESTING", "message": "Hardcoded variable `TESTING` detected. Use environment variables or config files instead", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "avoid_hardcoded_config_SECRET_KEY", "message": "Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "avoid_hardcoded_config_ENV", "message": "Hardcoded variable `ENV` detected. Set this by using FLASK_ENV environment variable", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "avoid_hardcoded_config_DEBUG", "message": "Hardcoded variable `DEBUG` detected. Set this by using FLASK_DEBUG environment variable", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "flask-wtf-csrf-disabled", "message": "Setting 'WTF_CSRF_ENABLED' to 'False' explicitly disables CSRF protection.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "avoid_using_app_run_directly", "message": "top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "avoid_app_run_with_bad_host", "message": "Running flask app with host 0.0.0.0 could expose the server publicly.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "host-header-injection-python", "message": "The `flask.request.host` is used to construct an HTTP request.  This can lead to host header injection issues. Vulnerabilities  that generally occur due to this issue are authentication bypasses,  password reset issues, Server-Side-Request-Forgery (SSRF), and many more.  It is recommended to validate the URL before passing it to a  request library, or using application logic such as authentication  or password resets.", "parent_source": "community", "severity": "`INFO`", "languages": "Python"}, {"identifier": "secure-set-cookie", "message": "Found a Flask cookie without secure, httponly, or samesite correctly set. Flask cookies should be handled securely by setting secure=True, httponly=True, and samesite='Lax' in response.set_cookie(...). If these parameters are not properly set, your cookies are not properly protected and are at risk of being stolen by an attacker. Include the 'secure=True', 'httponly=True', samesite='Lax' arguments or set these to be true in the Flask configuration.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "render-template-string", "message": "Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "debug-enabled", "message": "Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "directly-returned-format-string", "message": "Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "make-response-with-unknown-content", "message": "Be careful with `flask.make_response()`. If this response is rendered onto a webpage, this could create a cross-site scripting (XSS) vulnerability. `flask.make_response()` will not autoescape HTML. If you are rendering HTML, write your HTML in a template file and use `flask.render_template()` which will take care of escaping. If you are returning data from an API, consider using `flask.jsonify()`.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "direct-use-of-jinja2", "message": "Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "template-unescaped-with-safe", "message": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.", "parent_source": "community", "severity": "`WARNING`", "languages": "Regex"}, {"identifier": "template-autoescape-off", "message": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '{% autoescape off %}'. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability, or turn autoescape on.", "parent_source": "community", "severity": "`WARNING`", "languages": "Regex"}, {"identifier": "template-href-var", "message": "Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content Security Policy (CSP) header.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "template-unquoted-attribute-var", "message": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ $...VAR }}\".", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "explicit-unescape-with-markup", "message": "Detected explicitly unescaped content using 'Markup()'. This permits the unescaped data to include unescaped HTML which could result in cross-site scripting. Ensure this data is not externally controlled, or consider rewriting to not use 'Markup()'.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "os-system-injection", "message": "User data detected in os.system. This could be vulnerable to a command injection and should be avoided. If this must be done, use the 'subprocess' module instead and pass the arguments as a list.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "exec-injection", "message": "Detected user data flowing into exec. This is code injection and should be avoided.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "tainted-sql-string", "message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "path-traversal-open", "message": "Found request data in a call to 'open'. Ensure the request data is validated or sanitized, otherwise it could result in path traversal attacks.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "subprocess-injection", "message": "Detected user input entering a `subprocess` call unsafely. This could result in a command injection vulnerability. An attacker could use this vulnerability to execute arbitrary commands on the host, which allows them to download malware, scan sensitive data, or run any command they wish on the server. Do not let users choose the command to run. In general, prefer to use Python API versions of system commands. If you must use subprocess, use a dictionary to allowlist a set of commands.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "eval-injection", "message": "Detected user data flowing into eval. This is code injection and should be avoided.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "tainted-url-host", "message": "User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server runnig this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode the correct host.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "nan-injection", "message": "Found user input going directly into typecast for bool(), float(), or complex(). This allows an attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior, particularly when doing comparisons. Either cast to a different type, or add a guard checking for all capitalizations of the string 'nan'.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "raw-html-format", "message": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`flask.render_template`) which will safely render HTML instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "ssrf-requests", "message": "Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "csv-writer-injection", "message": "Detected user input into a generated CSV file using the built-in `csv` module. If user data is used to generate the data in this file, it is possible that an attacker could inject a formula when the CSV is imported into a spreadsheet application that runs an attacker script, which could steal data from the importing user or, at worst, install malware on the user's computer. `defusedcsv` is a drop-in replacement with the same API that will attempt to mitigate formula injection attempts. You can use `defusedcsv` instead of `csv` to safely generate CSVs.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "jwt-python-exposed-credentials", "message": "Password is exposed through JWT token payload. This is not encrypted and the password could be compromised. Do not store passwords in JWT tokens.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "unverified-jwt-decode", "message": "Detected JWT token decoded with 'verify=False'. This bypasses any integrity checks for the token which means the token could be tampered with by malicious actors. Ensure that the JWT token is verified.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "jwt-python-hardcoded-secret", "message": "Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "jwt-python-none-alg", "message": "Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.", "parent_source": "community", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "jwt-python-exposed-data", "message": "The object is passed strictly to jwt.encode(...) Make sure that sensitive information is not exposed through JWT token payload.", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "mongo-client-bad-auth", "message": "Warning MONGODB-CR was deprecated with the release of MongoDB 3.6 and is no longer supported by MongoDB 4.0 (see https://api.mongodb.com/python/current/examples/authentication.html for details).", "parent_source": "community", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "incorrect-use-ato-fn", "message": "Avoid the 'ato*()' family of functions. Their use can lead to undefined behavior, integer overflows, and lack of appropriate error handling. Instead prefer the 'strtol*()' family of functions.", "parent_source": "community", "severity": "`WARNING`", "languages": "C"}, {"identifier": "c-string-equality", "message": "Using == on char* performs pointer comparison, use strcmp instead", "parent_source": "community", "severity": "`ERROR`", "languages": "C"}, {"identifier": "double_goto", "message": "The second goto statement will always be executed.", "parent_source": "community", "severity": "`WARNING`", "languages": "C"}, {"identifier": "incorrect-use-sscanf-fn", "message": "Avoid 'sscanf()' for number conversions. Its use can lead to undefined behavior, slow processing, and integer overflows. Instead prefer the 'strto*()' family of functions.", "parent_source": "community", "severity": "`WARNING`", "languages": "C"}, {"identifier": "info-leak-on-non-formated-string", "message": "Use %s, %d, %c... to format your variables, otherwise this could leak information.", "parent_source": "community", "severity": "`WARNING`", "languages": "C"}, {"identifier": "insecure-use-strcat-fn", "message": "Finding triggers whenever there is a strcat or strncat used. This is an issue because strcat or strncat can lead to buffer overflow vulns. Fix this by using strcat_s instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "C"}, {"identifier": "use-after-free", "message": "Variable '$VAR' was used after being freed. This can lead to undefined behavior.", "parent_source": "community", "severity": "`WARNING`", "languages": "C"}, {"identifier": "insecure-use-memset", "message": "When handling sensitive information in a buffer, it's important to ensure  that the data is securely erased before the buffer is deleted or reused.  While `memset()` is commonly used for this purpose, it can leave sensitive  information behind due to compiler optimizations or other factors.  To avoid this potential vulnerability, it's recommended to use the  `memset_s()` function instead. `memset_s()` is a standardized function  that securely overwrites the memory with a specified value, making it more  difficult for an attacker to recover any sensitive data that was stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help to  ensure that your application is more secure and less vulnerable to exploits  that rely on residual data in memory.", "parent_source": "community", "severity": "`WARNING`", "languages": "C"}, {"identifier": "insecure-use-string-copy-fn", "message": "Finding triggers whenever there is a strcpy or strncpy used. This is an issue because strcpy does not affirm the size of the destination array and strncpy will not automatically NULL-terminate strings. This can lead to buffer overflows, which can cause program crashes and potentially let an attacker inject code in the program. Fix this by using strcpy_s instead (although note that strcpy_s is an optional part of the C11 standard, and so may not be available).", "parent_source": "community", "severity": "`WARNING`", "languages": "C"}, {"identifier": "double-free", "message": "Variable '$VAR' was freed twice. This can lead to undefined behavior.", "parent_source": "community", "severity": "`ERROR`", "languages": "C"}, {"identifier": "insecure-use-scanf-fn", "message": "Avoid using 'scanf()'. This function, when used improperly, does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for reading input.", "parent_source": "community", "severity": "`WARNING`", "languages": "C"}, {"identifier": "insecure-use-printf-fn", "message": "Avoid using user-controlled format strings passed into 'sprintf', 'printf' and 'vsprintf'. These functions put you at risk of buffer overflow vulnerabilities through the use of format string exploits. Instead, use 'snprintf' and 'vsnprintf'.", "parent_source": "community", "severity": "`WARNING`", "languages": "C"}, {"identifier": "insecure-use-gets-fn", "message": "Avoid 'gets()'. This function does not consider buffer boundaries and can lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead.", "parent_source": "community", "severity": "`ERROR`", "languages": "C"}, {"identifier": "random-fd-exhaustion", "message": "Call to 'read()' without error checking is susceptible to file descriptor exhaustion. Consider using the 'getrandom()' function.", "parent_source": "community", "severity": "`WARNING`", "languages": "C"}, {"identifier": "function-use-after-free", "message": "Variable '$VAR' was passed to a function after being freed. This can lead to undefined behavior.", "parent_source": "community", "severity": "`WARNING`", "languages": "C"}, {"identifier": "insecure-use-strtok-fn", "message": "Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "C"}, {"identifier": "seam-log-injection", "message": "Seam Logging API support an expression language to introduce bean property to log messages. The expression language can also be the source to unwanted code execution. In this context, an expression is built with a dynamic value. The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation.", "parent_source": "community", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "find-sql-string-concatenation", "message": "In $METHOD, $X is used to construct a SQL query via string concatenation.", "parent_source": "community", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "tainted-sql-string", "message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.", "parent_source": "community", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "tainted-sqli", "message": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "mongodb-nosqli", "message": "Detected non-constant data passed into a NoSQL query using the 'where' evaluation operator. If this data can be controlled by an external user, this is a NoSQL injection. Ensure data passed to the NoSQL query is not user controllable, or properly sanitize the data. Ideally, avoid using the 'where' operator at all and instead use the helper methods provided by com.mongodb.client.model.Filters with comparative operators such as eq, ne, lt, gt, etc.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "eqeq", "message": "`$X == $X` or `$X != $X` is always true. (Unless the value compared is a float or double). To test if `$X` is not-a-number, use `Double.isNaN($X)`.", "parent_source": "community", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "hardcoded-conditional", "message": "This if statement will always have the same behavior and is therefore unnecessary.", "parent_source": "community", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "assignment-comparison", "message": "The value of `$X` is being ignored and will be used in the conditional test", "parent_source": "community", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "no-string-eqeq", "message": "Strings should not be compared with '=='. This is a reference comparison operator. Use '.equals()' instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "httpservlet-path-traversal", "message": "Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.", "parent_source": "community", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "xmlinputfactory-possible-xxe", "message": "XML external entities are not explicitly disabled for this XMLInputFactory. This could be vulnerable to XML external entity vulnerabilities. Explicitly disable external entities by setting \"javax.xml.stream.isSupportingExternalEntities\" to false.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "servletresponse-writer-xss", "message": "Cross-site scripting detected in HttpServletResponse writer with variable '$VAR'. User input was detected going directly from the HttpServletRequest into output. Ensure your data is properly encoded using org.owasp.encoder.Encode.forHtml: 'Encode.forHtml($VAR)'.", "parent_source": "community", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "insecure-jms-deserialization", "message": "JMS Object messages depend on Java Serialization for marshalling/unmarshalling of the message payload when ObjectMessage.getObject() is called. Deserialization of untrusted data can lead to security flaws; a remote attacker could via a crafted JMS ObjectMessage to execute arbitrary code with the permissions of the application listening/consuming JMS Messages. In this case, the JMS MessageListener consume an ObjectMessage type received inside the onMessage method, which may lead to arbitrary code execution when calling the $Y.getObject method.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "xmlinputfactory-external-entities-enabled", "message": "XML external entities are enabled for this XMLInputFactory. This is vulnerable to XML external entity attacks. Disable external entities by setting \"javax.xml.stream.isSupportingExternalEntities\" to false.", "parent_source": "community", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "do-privileged-use", "message": "Marking code as privileged enables a piece of trusted code to temporarily enable access to more resources than are available directly to the code that called it. Be very careful in your use of the privileged construct, and always remember to make the privileged code section as small as possible.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "jackson-unsafe-deserialization", "message": "When using Jackson to marshall/unmarshall JSON to Java objects, enabling default typing is dangerous and can lead to RCE. If an attacker can control `$JSON` it might be possible to provide a malicious JSON which can be used to exploit unsecure deserialization. In order to prevent this issue, avoid to enable default typing (globally or by using \"Per-class\" annotations) and avoid using `Object` and other dangerous types for member variable declaration which creating classes for Jackson based deserialization.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "use-snakeyaml-constructor", "message": "Used SnakeYAML org.yaml.snakeyaml.Yaml() constructor with no arguments, which is vulnerable to deserialization attacks. Use the one-argument Yaml(...) constructor instead, with SafeConstructor or a custom Constructor as the argument.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "dangerous-groovy-shell", "message": "A expression is built with a dynamic value. The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "command-injection-process-builder", "message": "A formatted or concatenated string was detected as input to a ProcessBuilder call. This is dangerous if a variable is controlled by user input and could result in a command injection. Ensure your variables are not controlled by users or sufficiently sanitized.", "parent_source": "community", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "bad-hexa-conversion", "message": "'Integer.toHexString()' strips leading zeroes from each byte if read byte-by-byte. This mistake weakens the hash value computed since it introduces more collisions. Use 'String.format(\"%02X\", ...)' instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "blowfish-insufficient-key-size", "message": "Using less than 128 bits for Blowfish is considered insecure. Use 128 bits or more, or switch to use AES instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "tainted-ldapi-from-http-request", "message": "Detected input from a HTTPServletRequest going into an LDAP query. This could lead to LDAP injection if the input is not properly sanitized, which could result in attackers modifying objects in the LDAP tree structure. Ensure data passed to an LDAP query is not controllable or properly sanitize the data.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "permissive-cors", "message": "https://find-sec-bugs.github.io/bugs.htm#PERMISSIVE_CORS Permissive CORS policy will allow a malicious application to communicate with the victim application in an inappropriate way, leading to spoofing, data theft, relay and other attacks.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "object-deserialization", "message": "Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "tainted-env-from-http-request", "message": "Detected input from a HTTPServletRequest going into the environment variables of an 'exec' command.  Instead, call the command with user-supplied arguments by using the overloaded method with one String array as the argument. `exec({\"command\", \"arg1\", \"arg2\"})`.", "parent_source": "community", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "cbc-padding-oracle", "message": "Using CBC with PKCS5Padding is susceptible to padding oracle attacks. A malicious actor could discern the difference between plaintext with valid or invalid padding. Further, CBC mode does not include any integrity checks. Use 'AES/GCM/NoPadding' instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "command-injection-formatted-runtime-call", "message": "A formatted or concatenated string was detected as input to a java.lang.Runtime call. This is dangerous if a variable is controlled by user input and could result in a command injection. Ensure your variables are not controlled by users or sufficiently sanitized.", "parent_source": "community", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "unvalidated-redirect", "message": "Application redirects to a destination URL specified by a user-supplied parameter that is not validated. This could direct users to malicious locations. Consider using an allowlist to validate URLs.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "overly-permissive-file-permission", "message": "Detected file permissions that are overly permissive (read, write, and execute). It is generally a bad practices to set overly permissive file permission such as read+write+exec for all users. If the file affected is a configuration, a binary, a script or sensitive data, it can lead to privilege escalation or information leakage. Instead, follow the principle of least privilege and give users only the  permissions they need.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "el-injection", "message": "An expression is built with a dynamic value. The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "url-rewriting", "message": "URL rewriting has significant security risks. Since session ID appears in the URL, it may be easily seen by third parties.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "java-reverse-shell", "message": "Semgrep found potential reverse shell behavior", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "anonymous-ldap-bind", "message": "Detected anonymous LDAP bind. This permits anonymous users to execute LDAP statements. Consider enforcing authentication for LDAP. See https://docs.oracle.com/javase/tutorial/jndi/ldap/auth_mechs.html for more information.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "tainted-session-from-http-request", "message": "Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters, blurring the line between what's trusted and untrusted, and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "ognl-injection", "message": "A expression is built with a dynamic value. The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "cookie-missing-httponly", "message": "A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "crlf-injection-logs", "message": "When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge log entries or include malicious content.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "ldap-injection", "message": "Detected non-constant data passed into an LDAP query. If this data can be controlled by an external user, this is an LDAP injection. Ensure data passed to an LDAP query is not controllable; or properly sanitize the data.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "weak-ssl-context", "message": "An insecure SSL context was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use SSLContext.getInstance(\"TLSv1.2\") for the best security.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "jdbc-sql-formatted-string", "message": "Possible JDBC injection detected. Use the parameterized query feature available in queryForObject instead of concatenating or formatting strings: 'jdbc.queryForObject(\"select * from table where name = ?\", Integer.class, parameterName);'", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "tainted-cmd-from-http-request", "message": "Detected input from a HTTPServletRequest going into a 'ProcessBuilder' or 'exec' command. This could lead to command injection if variables passed into the exec commands are not properly sanitized. Instead, avoid using these OS commands with user-supplied input, or, if you must use these commands, use a whitelist of specific values.", "parent_source": "community", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "ldap-entry-poisoning", "message": "An object-returning LDAP search will allow attackers to control the LDAP response. This could lead to Remote Code Execution.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "http-response-splitting", "message": "Older Java application servers are vulnerable to HTTP response splitting, which may occur if an HTTP request can be injected with CRLF characters. This finding is reported for completeness; it is recommended to ensure your environment is not affected by testing this yourself.", "parent_source": "community", "severity": "`INFO`", "languages": "Java"}, {"identifier": "script-engine-injection", "message": "Detected potential code injection using ScriptEngine. Ensure user-controlled data cannot enter '.eval()', otherwise, this is a code injection vulnerability.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "formatted-sql-string", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "parent_source": "community", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "xssrequestwrapper-is-insecure", "message": "It looks like you're using an implementation of XSSRequestWrapper from dzone. (https://www.javacodegeeks.com/2012/07/anti-cross-site-scripting-xss-filter.html) The XSS filtering in this code is not secure and can be bypassed by malicious actors. It is recommended to use a stack that automatically escapes in your view or templates instead of filtering yourself.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "cookie-missing-secure-flag", "message": "A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling '$COOKIE.setSecure(true);'", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "md5-used-as-password", "message": "It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as PBKDF2 or bcrypt. You can use `javax.crypto.SecretKeyFactory` with `SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA1\")` or, if using Spring, `org.springframework.security.crypto.bcrypt`.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "tainted-xpath-from-http-request", "message": "Detected input from a HTTPServletRequest going into a XPath evaluate or compile command. This could lead to xpath injection if variables passed into the evaluate or compile commands are not properly sanitized. Xpath injection could lead to unauthorized access to sensitive information in XML documents. Instead, thoroughly sanitize user input or use parameterized xpath queries if you can.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "cookie-missing-samesite", "message": "Detected cookie without the SameSite attribute.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "xml-decoder", "message": "XMLDecoder should not be used to parse untrusted data. Deserializing user input can lead to arbitrary code execution. Use an alternative and explicitly disable external entities. See https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html for alternatives and vulnerability prevention.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "insecure-smtp-connection", "message": "Insecure SMTP connection detected. This connection will trust any SSL certificate. Enable certificate verification by setting 'email.setSSLCheckServerIdentity(true)'.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "unsafe-reflection", "message": "If an attacker can supply values that the application then uses to determine which class to instantiate or which method to invoke, the potential exists for the attacker to create control flow paths through the application that were not intended by the application developers. This attack vector may allow the attacker to bypass authentication or access control checks or otherwise cause the application to behave in an unexpected manner.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "documentbuilderfactory-external-parameter-entities-true", "message": "External entities are allowed for $DBFACTORY. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://xml.org/sax/features/external-parameter-entities\" to false.", "parent_source": "community", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "documentbuilderfactory-disallow-doctype-decl-false", "message": "DOCTYPE declarations are enabled for $DBFACTORY. Without prohibiting external entity declarations, this is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://apache.org/xml/features/disallow-doctype-decl\" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features \"http://xml.org/sax/features/external-general-entities\" and \"http://xml.org/sax/features/external-parameter-entities\" to false.", "parent_source": "community", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "transformerfactory-dtds-not-disabled", "message": "DOCTYPE declarations are enabled for this TransformerFactory. This is vulnerable to XML external entity attacks. Disable this by setting the attributes \"accessExternalDTD\" and \"accessExternalStylesheet\" to \"\".", "parent_source": "community", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "documentbuilderfactory-disallow-doctype-decl-missing", "message": "DOCTYPE declarations are enabled for this DocumentBuilderFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://apache.org/xml/features/disallow-doctype-decl\" to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features \"http://xml.org/sax/features/external-general-entities\" and \"http://xml.org/sax/features/external-parameter-entities\" to false.", "parent_source": "community", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "documentbuilderfactory-external-general-entities-true", "message": "External entities are allowed for $DBFACTORY. This is vulnerable to XML external entity attacks. Disable this by setting the feature \"http://xml.org/sax/features/external-general-entities\" to false.", "parent_source": "community", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "saxparserfactory-disallow-doctype-decl-missing", "message": "DOCTYPE declarations are enabled for this SAXParserFactory. This is vulnerable to XML external entity attacks. Disable this by setting the feature `http://apache.org/xml/features/disallow-doctype-decl` to true. Alternatively, allow DOCTYPE declarations and only prohibit external entities declarations. This can be done by setting the features `http://xml.org/sax/features/external-general-entities` and `http://xml.org/sax/features/external-parameter-entities` to false. NOTE - The previous links are not meant to be clicked. They are the literal config key values that are supposed to be used to disable these features. For more information, see https://semgrep.dev/docs/cheat-sheets/java-xxe/#3a-documentbuilderfactory.", "parent_source": "community", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "turbine-sqli", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "hibernate-sqli", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "jpa-sqli", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "jdo-sqli", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "jdbc-sqli", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "vertx-sqli", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "tainted-sql-from-http-request", "message": "Detected input from a HTTPServletRequest going into a SQL sink or statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use parameterized SQL queries or properly sanitize user input instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "no-direct-response-writer", "message": "Detected a request with potential user-input going into a OutputStream or Writer object. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as JavaServer Faces (JSFs) which automatically escapes HTML views.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "autoescape-disabled", "message": "Detected an element with disabled HTML escaping. If external data can reach this, this is a cross-site scripting (XSS) vulnerability. Ensure no external data can reach here, or remove 'escape=false' from this element.", "parent_source": "community", "severity": "`WARNING`", "languages": "Regex"}, {"identifier": "no-scriptlets", "message": "JSP scriptlet detected. Scriptlets are difficult to use securely and are considered bad practice. See https://stackoverflow.com/a/3180202. Instead, consider migrating to JSF or using the Expression Language '${...}' with the escapeXml function in your JSP files.", "parent_source": "community", "severity": "`WARNING`", "languages": "Regex"}, {"identifier": "use-jstl-escaping", "message": "Detected an Expression Language segment in a tag that does not escape output. This is dangerous because if any data in this expression can be controlled externally, it is a cross-site scripting vulnerability. Instead, use the 'out' tag from the JSTL taglib to escape this expression. See https://www.tutorialspoint.com/jsp/jstl_core_out_tag.htm for more information.", "parent_source": "community", "severity": "`WARNING`", "languages": "Regex"}, {"identifier": "use-escapexml", "message": "Detected an Expression Language segment that does not escape output. This is dangerous because if any data in this expression can be controlled externally, it is a cross-site scripting vulnerability. Instead, use the 'escapeXml' function from the JSTL taglib. See https://www.tutorialspoint.com/jsp/jstl_function_escapexml.htm for more information.", "parent_source": "community", "severity": "`WARNING`", "languages": "Regex"}, {"identifier": "gcm-nonce-reuse", "message": "GCM IV/nonce is reused: encryption can be totally useless", "parent_source": "community", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "unencrypted-socket", "message": "Detected use of a Java socket that is not encrypted. As a result, the traffic could be read by an attacker intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "use-of-md5", "message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "use-of-md5-digest-utils", "message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "ecb-cipher", "message": "Cipher in ECB mode is detected. ECB mode produces the same output for the same input each time which allows an attacker to intercept and replay the data. Further, ECB mode does not provide any integrity checking. See https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "weak-random", "message": "Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "rsa-no-padding", "message": "Using RSA without OAEP mode weakens the encryption.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java, Kotlin"}, {"identifier": "use-of-aes-ecb", "message": "Use of AES with ECB mode detected. ECB doesn't provide message confidentiality and  is not semantically secure so should not be used. Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "use-of-rc2", "message": "Use of RC2 was detected. RC2 is vulnerable to related-key attacks, and is therefore considered non-compliant. Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "no-null-cipher", "message": "NullCipher was detected. This will not encrypt anything; the cipher text will be the same as the plain text. Use a valid, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "des-is-deprecated", "message": "DES is considered deprecated. AES is the recommended cipher. Upgrade to use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard for more information.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java, Kotlin"}, {"identifier": "use-of-rc4", "message": "Use of RC4 was detected. RC4 is vulnerable to several attacks, including stream cipher attacks and bit flipping attacks. Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "desede-is-deprecated", "message": "Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher. Upgrade to use AES.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java, Kotlin"}, {"identifier": "use-of-weak-rsa-key", "message": "RSA keys should be at least 2048 bits based on NIST recommendation.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "use-of-default-aes", "message": "Use of AES with no settings detected. By default, java.crypto.Cipher uses ECB mode. ECB doesn't  provide message confidentiality and is not semantically secure so should not be used. Instead, use a strong, secure cipher: java.crypto.Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "no-static-initialization-vector", "message": "Initialization Vectors (IVs) for block ciphers should be randomly generated each time they are used. Using a static IV means the same plaintext encrypts to the same ciphertext every time, weakening the strength of the encryption.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "use-of-sha1", "message": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function applications.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "use-of-blowfish", "message": "Use of Blowfish was detected. Blowfish uses a 64-bit block size that  makes it vulnerable to birthday attacks, and is therefore considered non-compliant.  Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for more information.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "gcm-detection", "message": "GCM detected, please check that IV/nonce is not reused, an Initialization Vector (IV) is a nonce used to randomize the encryption, so that even if multiple messages with identical plaintext are encrypted, the generated corresponding ciphertexts are different. Unlike the Key, the IV usually does not need to be secret, rather it is important that it is random and unique. Certain encryption schemes the IV is exchanged in public as part of the ciphertext. Reusing same Initialization Vector with the same Key to encrypt multiple plaintext blocks allows an attacker to compare the ciphertexts and then, with some assumptions on the content of the messages, to gain important information about the data being encrypted.", "parent_source": "community", "severity": "`INFO`", "languages": "Java"}, {"identifier": "insecure-hostname-verifier", "message": "Insecure HostnameVerifier implementation detected. This will accept any SSL certificate with any hostname, which creates the possibility for man-in-the-middle attacks.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "defaulthttpclient-is-deprecated", "message": "DefaultHttpClient is deprecated. Further, it does not support connections using TLS1.2, which makes using DefaultHttpClient a security hazard. Use HttpClientBuilder instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "avoid-implementing-custom-digests", "message": "Cryptographic algorithms are notoriously difficult to get right. By implementing a custom message digest, you risk introducing security issues into your program. Use one of the many sound message digests already available to you: MessageDigest sha256Digest = MessageDigest.getInstance(\"SHA256\");", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "insecure-trust-manager", "message": "Detected empty trust manager implementations. This is dangerous because it accepts any certificate, enabling man-in-the-middle attacks. Consider using a KeyStore and TrustManagerFactory instead. See https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https for more information.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "cookie-issecure-false", "message": "Default session middleware settings: `setSecure` not set to true. This ensures that the cookie is sent only over HTTPS to prevent cross-site scripting attacks.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "java-jwt-hardcoded-secret", "message": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "java-jwt-none-alg", "message": "Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.", "parent_source": "community", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "java-jwt-decode-without-verify", "message": "Detected the decoding of a JWT token without a verify step. JWT tokens must be verified before use, otherwise the token's integrity is unknown. This means a malicious actor could forge a JWT token with any claims. Call '.verify()' before using the token.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "nsc-allows-plaintext-traffic", "message": "The Network Security Config is set to allow non-encrypted connections. Evaluate if this is necessary for your app, and disable it if appropriate. (To hide this warning, set `xmlns:tools=\"http://schemas.android.com/tools\" tools:ignore=\"InsecureBaseConfiguration\"` as parameters to your `<network-security-config>`)", "parent_source": "community", "severity": "`INFO`", "languages": "Generic"}, {"identifier": "nsc-pinning-without-backup", "message": "Your app uses TLS public key pinning without specifying a backup key. If you are forced to change TLS keys or CAs on short notice, not having a backup pin can lead to connectivity issues until you can push out an update. It is considered best practice to add at least one additional pin as a backup.", "parent_source": "community", "severity": "`INFO`", "languages": "Generic"}, {"identifier": "nsc-pinning-without-expiration", "message": "Your app uses TLS public key pinning without specifying an expiration date. If your users do not update the app to receive new pins in time, expired or replaced certificates can lead to connectivity issues until they install an update. It is considered best practice to set an expiration time, after which the system will default to trusting system CAs and disregard the pin.", "parent_source": "community", "severity": "`INFO`", "languages": "Generic"}, {"identifier": "nsc-allows-user-ca-certs", "message": "The Network Security Config is set to accept user-installed CAs. Evaluate if this is necessary for your app, and disable it if appropriate. (To hide this warning, set `xmlns:tools=\"http://schemas.android.com/tools\" tools:ignore=\"AcceptsUserCertificates\"` as parameters to your `<network-security-config>`)", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "nsc-allows-user-ca-certs-for-domain", "message": "The Network Security Config is set to accept user-installed CAs for the domain `$DOMAIN`. Evaluate if this is necessary for your app, and disable it if appropriate. (To hide this warning, set `xmlns:tools=\"http://schemas.android.com/tools\" tools:ignore=\"AcceptsUserCertificates\"` as parameters to your `<network-security-config>`)", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "manifest-usesCleartextTraffic-true", "message": "The Android manifest is configured to allow non-encrypted connections. Evaluate if this is necessary for your app, and disable it if appropriate. This flag is ignored on Android 7 (API 24) and above if a Network Security Config is present.", "parent_source": "community", "severity": "`INFO`", "languages": "Generic"}, {"identifier": "manifest-usesCleartextTraffic-ignored-by-nsc", "message": "Manifest uses both `android:usesCleartextTraffic` and Network Security Config. The `usesCleartextTraffic` directive is ignored on Android 7 (API 24) and above if a Network Security Config is present.", "parent_source": "community", "severity": "`INFO`", "languages": "Generic"}, {"identifier": "exported_activity", "message": "The application exports an activity. Any application on the device can launch the exported activity which may compromise the integrity of your application or its data.  Ensure that any exported activities do not have privileged access to your application's control plane.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "server-dangerous-class-deserialization", "message": "Using a non-primitive class with Java RMI may be an insecure deserialization vulnerability. Depending on the underlying implementation. This object could be manipulated by a malicious actor allowing them to execute code on your system. Instead, use an integer ID to look up your object, or consider alternative serialization schemes such as JSON.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "server-dangerous-object-deserialization", "message": "Using an arbitrary object ('$PARAMTYPE $PARAM') with Java RMI is an insecure deserialization vulnerability. This object can be manipulated by a malicious actor allowing them to execute code on your system. Instead, use an integer ID to look up your object, or consider alternative serialization schemes such as JSON.", "parent_source": "community", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "log4j-message-lookup-injection", "message": "This rule is deprecated.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "unrestricted-request-mapping", "message": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "cve-2022-22965", "message": "This rule has been deprecated.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "spring-jsp-eval", "message": "A Spring expression is built with a dynamic value. The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "spring-sqli", "message": "Detected a string argument from a public method contract in a raw SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "spring-csrf-disabled", "message": "CSRF protection is disabled for this configuration. This is a security risk.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "spring-actuator-fully-enabled", "message": "Spring Boot Actuator is fully enabled. This exposes sensitive endpoints such as /actuator/env, /actuator/logfile, /actuator/heapdump and others. Unless you have Spring Security enabled or another means to protect these endpoints, this functionality is available without authentication, causing a significant security risk.", "parent_source": "community", "severity": "`ERROR`", "languages": "Generic"}, {"identifier": "spring-unvalidated-redirect", "message": "Application redirects a user to a destination URL specified by a user supplied parameter that is not validated.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "spring-actuator-dangerous-endpoints-enabled-yaml", "message": "Spring Boot Actuator \"$ACTUATOR\" is enabled. Depending on the actuator, this can pose a significant security risk. Please double-check if the actuator is needed and properly secured.", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "spring-actuator-fully-enabled-yaml", "message": "Spring Boot Actuator is fully enabled. This exposes sensitive endpoints such as /actuator/env, /actuator/logfile, /actuator/heapdump and others. Unless you have Spring Security enabled or another means to protect these endpoints, this functionality is available without authentication, causing a severe security risk.", "parent_source": "community", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "spring-actuator-dangerous-endpoints-enabled", "message": "Spring Boot Actuators \"$...ACTUATORS\" are enabled. Depending on the actuators, this can pose a significant security risk. Please double-check if the actuators are needed and properly secured.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "spel-injection", "message": "A Spring expression is built with a dynamic value. The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "tainted-html-string", "message": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. You can use the OWASP ESAPI encoder if you must render user data.", "parent_source": "community", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "tainted-sql-string", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.", "parent_source": "community", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "tainted-url-host", "message": "User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request. They could also probe internal servers or other resources that the server runnig this code can access. (This is called server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode the correct host, or ensure that the user data can only affect the path or parameters.", "parent_source": "community", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "tainted-file-path", "message": "Detected user input controlling a file path. An attacker could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.", "parent_source": "community", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "tainted-system-command", "message": "Detected user input entering a method which executes a system command. This could result in a command injection vulnerability, which allows an attacker to inject an arbitrary system command onto the server. The attacker could download malware onto or steal data from the server. Instead, use ProcessBuilder, separating the command into individual arguments, like this: `new ProcessBuilder(\"ls\", \"-al\", targetDirectory)`. Further, make sure you hardcode or allowlist the actual command so that attackers can't run arbitrary commands.", "parent_source": "community", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "jjwt-none-alg", "message": "Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.", "parent_source": "community", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "insecure-resteasy-deserialization", "message": "When a Restful webservice endpoint is configured to use wildcard mediaType {*/*} as a value for the @Consumes annotation, an attacker could abuse the SerializableProvider by sending a HTTP Request with a Content-Type of application/x-java-serialized-object. The body of that request would be processed by the SerializationProvider and could contain a malicious payload, which may lead to arbitrary code execution when calling the $Y.getObject method.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "default-resteasy-provider-abuse", "message": "When a Restful webservice endpoint isn't configured with a @Consumes annotation, an attacker could abuse the SerializableProvider by sending a HTTP Request with a Content-Type of application/x-java-serialized-object. The body of that request would be processed by the SerializationProvider and could contain a malicious payload, which may lead to arbitrary code execution. Instead, add a @Consumes annotation to the function or class.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "jax-rs-path-traversal", "message": "Detected a potential path traversal. A malicious actor could control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are sanitized. You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...) to only retrieve the file name from the path.", "parent_source": "community", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "razor-template-injection", "message": "User-controllable string passed to Razor.Parse. This leads directly to code execution in the context of the process.", "parent_source": "community", "severity": "`WARNING`", "languages": "C#"}, {"identifier": "web-config-insecure-cookie-settings", "message": "Cookie Secure flag is explicitly disabled. You should enforce this value to avoid accidentally presenting sensitive cookie values over plaintext HTTP connections.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "net-webconfig-debug", "message": "ASP.NET applications built with `debug` set to true in production may leak debug information to attackers. Debug mode also affects performance and reliability. Set `debug` to `false` or remove it from `<compilation ... />`", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "use_ecb_mode", "message": "Usage of the insecure ECB mode detected. You should use an authenticated encryption mode instead, which is implemented by the classes AesGcm or ChaCha20Poly1305.", "parent_source": "community", "severity": "`WARNING`", "languages": "C#"}, {"identifier": "net-webconfig-trace-enabled", "message": "OWASP guidance recommends disabling tracing for production applications to prevent accidental leakage of sensitive application information.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "mvc-missing-antiforgery", "message": "$METHOD is a state-changing MVC method that does not validate the antiforgery token or do strict content-type checking. State-changing controller methods should either enforce antiforgery tokens or do strict content-type checking to prevent simple HTTP request types from bypassing CORS preflight controls.", "parent_source": "community", "severity": "`WARNING`", "languages": "C#"}, {"identifier": "use_weak_rng_for_keygeneration", "message": "You are using an insecure random number generator (RNG) to create a cryptographic key. System.Random must never be used for cryptographic purposes. Use System.Security.Cryptography.RandomNumberGenerator instead.", "parent_source": "community", "severity": "`ERROR`", "languages": "C#"}, {"identifier": "use_weak_rsa_encryption_padding", "message": "You are using the outdated PKCS#1 v1.5 encryption padding for your RSA key. Use the OAEP padding instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "C#"}, {"identifier": "use_deprecated_cipher_algorithm", "message": "Usage of deprecated cipher algorithm detected. Use Aes or ChaCha20Poly1305 instead.", "parent_source": "community", "severity": "`ERROR`", "languages": "C#"}, {"identifier": "razor-use-of-htmlstring", "message": "ASP.NET Core MVC provides an HtmlString class which isn't automatically encoded upon output. This should never be used in combination with untrusted input as this will expose an XSS vulnerability.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "open-directory-listing", "message": "An open directory listing is potentially exposed, potentially revealing sensitive information to attackers.", "parent_source": "community", "severity": "`INFO`", "languages": "C#"}, {"identifier": "misconfigured-lockout-option", "message": "A misconfigured lockout mechanism allows an attacker to execute brute-force attacks. Account lockout must be correctly configured and enabled to prevent these attacks.", "parent_source": "community", "severity": "`WARNING`", "languages": "C#"}, {"identifier": "ldap-injection", "message": "LDAP queries are constructed dynamically on user-controlled input. This vulnerability in code could lead to an arbitrary LDAP query execution.", "parent_source": "community", "severity": "`ERROR`", "languages": "C#"}, {"identifier": "mass-assignment", "message": "Mass assignment or Autobinding vulnerability in code allows an attacker to execute over-posting attacks, which could create a new parameter in the binding request and manipulate the underlying object in the application.", "parent_source": "community", "severity": "`WARNING`", "languages": "C#"}, {"identifier": "xpath-injection", "message": "XPath queries are constructed dynamically on user-controlled input. This vulnerability in code could lead to an XPath Injection exploitation.", "parent_source": "community", "severity": "`ERROR`", "languages": "C#"}, {"identifier": "missing-or-broken-authorization", "message": "Anonymous access shouldn't be allowed unless explicit by design. Access control checks are missing and potentially can be bypassed. This finding violates the principle of least privilege or deny by default, where access should only be permitted for a specific set of roles or conforms to a custom policy or users.", "parent_source": "community", "severity": "`INFO`", "languages": "C#"}, {"identifier": "structured-logging", "message": "String interpolation in log message obscures the distinction between variables and the log message. Use structured logging instead, where the variables are passed as additional arguments and the interpolation is performed by the logging library. This reduces the possibility of log injection and makes it easier to search through logs.", "parent_source": "community", "severity": "`INFO`", "languages": "C#"}, {"identifier": "correctness-sslcertificatetrust-handshake-no-trust", "message": "Sending the trusted CA list increases the size of the handshake request and can leak system configuration information.", "parent_source": "community", "severity": "`WARNING`", "languages": "C#"}, {"identifier": "correctness-regioninfo-interop", "message": "Potential inter-process write of RegionInfo $RI via $PIPESTREAM $P that was instantiated with a two-character culture code $REGION.  Per .NET documentation, if you want to persist a RegionInfo object or communicate it between processes, you should instantiate it by using a full culture name rather than a two-letter ISO region code.", "parent_source": "community", "severity": "`WARNING`", "languages": "C#"}, {"identifier": "correctness-double-epsilon-equality", "message": "Double.Epsilon is defined by .NET as the smallest value that can be added to or subtracted from a zero-value Double. It is unsuitable for equality comparisons of non-zero Double values. Furthermore, the value of Double.Epsilon is framework and processor architecture dependent. Wherever possible, developers should prefer the framework Equals() method over custom equality implementations.", "parent_source": "community", "severity": "`WARNING`", "languages": "C#"}, {"identifier": "open-redirect", "message": "A query string parameter may contain a URL value that could cause the web application to redirect the request to a malicious website controlled by an attacker. Make sure to sanitize this parameter sufficiently.", "parent_source": "community", "severity": "`ERROR`", "languages": "C#"}, {"identifier": "missing-hsts-header", "message": "The HSTS HTTP response security header is missing, allowing interaction and communication to be sent over the insecure HTTP protocol.", "parent_source": "community", "severity": "`WARNING`", "languages": "C#"}, {"identifier": "stacktrace-disclosure", "message": "Stacktrace information is displayed in a non-Development environment. Accidentally disclosing sensitive stack trace information in a production environment aids an attacker in reconnaissance and information gathering.", "parent_source": "community", "severity": "`WARNING`", "languages": "C#"}, {"identifier": "memory-marshal-create-span", "message": "MemoryMarshal.CreateSpan and MemoryMarshal.CreateReadOnlySpan should be used with caution, as the length argument is not checked.", "parent_source": "community", "severity": "`WARNING`", "languages": "C#"}, {"identifier": "insecure-losformatter-deserialization", "message": "The LosFormatter type is dangerous and is not recommended for data processing. Applications should stop using LosFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. LosFormatter is insecure and can't be made secure", "parent_source": "community", "severity": "`WARNING`", "languages": "C#"}, {"identifier": "insecure-netdatacontract-deserialization", "message": "The NetDataContractSerializer type is dangerous and is not recommended for data processing. Applications should stop using NetDataContractSerializer as soon as possible, even if they believe the data they're processing to be trustworthy. NetDataContractSerializer is insecure and can't be made secure", "parent_source": "community", "severity": "`WARNING`", "languages": "C#"}, {"identifier": "insecure-fspickler-deserialization", "message": "The FsPickler is dangerous and is not recommended for data processing. Default configuration tend to insecure deserialization vulnerability.", "parent_source": "community", "severity": "`WARNING`", "languages": "C#"}, {"identifier": "insecure-binaryformatter-deserialization", "message": "The BinaryFormatter type is dangerous and is not recommended for data processing. Applications should stop using BinaryFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. BinaryFormatter is insecure and can't be made secure", "parent_source": "community", "severity": "`WARNING`", "languages": "C#"}, {"identifier": "insecure-javascriptserializer-deserialization", "message": "The SimpleTypeResolver class is insecure and should not be used. Using SimpleTypeResolver to deserialize JSON could allow the remote client to execute malicious code within the app and take control of the web server.", "parent_source": "community", "severity": "`ERROR`", "languages": "C#"}, {"identifier": "insecure-soapformatter-deserialization", "message": "The SoapFormatter type is dangerous and is not recommended for data processing. Applications should stop using SoapFormatter as soon as possible, even if they believe the data they're processing to be trustworthy. SoapFormatter is insecure and can't be made secure", "parent_source": "community", "severity": "`WARNING`", "languages": "C#"}, {"identifier": "data-contract-resolver", "message": "Only use DataContractResolver if you are completely sure of what information is being serialized. Malicious types can cause unexpected behavior.", "parent_source": "community", "severity": "`WARNING`", "languages": "C#"}, {"identifier": "insecure-fastjson-deserialization", "message": "$type extension has the potential to be unsafe, so use it with common sense and known json sources and not public facing ones to be safe", "parent_source": "community", "severity": "`WARNING`", "languages": "C#"}, {"identifier": "insecure-typefilterlevel-full", "message": "Using a .NET remoting service can lead to RCE, even if you try to configure TypeFilterLevel. Recommended to switch from .NET Remoting to WCF https://docs.microsoft.com/en-us/dotnet/framework/wcf/migrating-from-net-remoting-to-wcf", "parent_source": "community", "severity": "`WARNING`", "languages": "C#"}, {"identifier": "insecure-newtonsoft-deserialization", "message": "TypeNameHandling $TYPEHANDLER is unsafe and can lead to arbitrary code execution in the context of the process. Use a custom SerializationBinder whenever using a setting other than TypeNameHandling.None.", "parent_source": "community", "severity": "`WARNING`", "languages": "C#"}, {"identifier": "regular-expression-dos-infinite-timeout", "message": "Specifying the regex timeout leaves the system vulnerable to a regex-based Denial of Service (DoS) attack. Consider setting the timeout to a short amount of time like 2 or 3 seconds. If you are sure you need an infinite timeout, double check that your context meets the conditions outlined in the \"Notes to Callers\" section at the bottom of this page: https://docs.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.-ctor?view=net-6.0", "parent_source": "community", "severity": "`WARNING`", "languages": "C#"}, {"identifier": "regular-expression-dos", "message": "When using `System.Text.RegularExpressions` to process untrusted input, pass a timeout.  A malicious user can provide input to `RegularExpressions` that abuses the backtracking behaviour of this regular expression engine. This will lead to excessive CPU usage, causing a Denial-of-Service attack", "parent_source": "community", "severity": "`WARNING`", "languages": "C#"}, {"identifier": "jwt-tokenvalidationparameters-no-expiry-validation", "message": "The TokenValidationParameters.$LIFETIME is set to $FALSE, this means the JWT tokens lifetime is not validated. This can lead to an JWT token being used after it has expired, which has security implications. It is recommended to validate the JWT lifetime to ensure only valid tokens are used.", "parent_source": "community", "severity": "`WARNING`", "languages": "C#"}, {"identifier": "xmltextreader-unsafe-defaults", "message": "XmlReaderSettings found with DtdProcessing.Parse on an XmlReader handling a string argument from a public method. Enabling Document Type Definition (DTD) parsing may cause XML External Entity (XXE) injection if supplied with user-controllable data.", "parent_source": "community", "severity": "`WARNING`", "languages": "C#"}, {"identifier": "xmldocument-unsafe-parser-override", "message": "XmlReaderSettings found with DtdProcessing.Parse on an XmlReader handling a string argument from a public method. Enabling Document Type Definition (DTD) parsing may cause XML External Entity (XXE) injection if supplied with user-controllable data.", "parent_source": "community", "severity": "`WARNING`", "languages": "C#"}, {"identifier": "xmlreadersettings-unsafe-parser-override", "message": "XmlReaderSettings found with DtdProcessing.Parse on an XmlReader handling a string argument from a public method. Enabling Document Type Definition (DTD) parsing may cause XML External Entity (XXE) injection if supplied with user-controllable data.", "parent_source": "community", "severity": "`WARNING`", "languages": "C#"}, {"identifier": "csharp-sqli", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand' and 'SqlParameter'.", "parent_source": "community", "severity": "`ERROR`", "languages": "C#"}, {"identifier": "unsafe-path-combine", "message": "String argument $A is used to read or write data from a file via Path.Combine without direct sanitization via Path.GetFileName. If the path is user-supplied data this can lead to path traversal.", "parent_source": "community", "severity": "`WARNING`", "languages": "C#"}, {"identifier": "os-command-injection", "message": "The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.", "parent_source": "community", "severity": "`ERROR`", "languages": "C#"}, {"identifier": "ssrf", "message": "SSRF is an attack vector that abuses an application to interact with the internal/external network or the machine itself.", "parent_source": "community", "severity": "`ERROR`", "languages": "C#"}, {"identifier": "ssrf", "message": "SSRF is an attack vector that abuses an application to interact with the internal/external network or the machine itself.", "parent_source": "community", "severity": "`ERROR`", "languages": "C#"}, {"identifier": "ssrf", "message": "SSRF is an attack vector that abuses an application to interact with the internal/external network or the machine itself.", "parent_source": "community", "severity": "`ERROR`", "languages": "C#"}, {"identifier": "ssrf", "message": "The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination. Many different options exist to fix this issue depending the use case (Application can send request only to identified and trusted applications, Application can send requests to ANY external IP address or domain name).", "parent_source": "community", "severity": "`ERROR`", "languages": "C#"}, {"identifier": "X509-subject-name-validation", "message": "Validating certificates based on subject name is bad practice. Use the X509Certificate2.Verify() method instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "C#"}, {"identifier": "unsigned-security-token", "message": "Accepting unsigned security tokens as valid security tokens allows an attacker to remove its signature and potentially forge an identity. As a fix, set RequireSignedTokens to be true.", "parent_source": "community", "severity": "`ERROR`", "languages": "C#"}, {"identifier": "X509Certificate2-privkey", "message": "X509Certificate2.PrivateKey is obsolete. Use a method such as GetRSAPrivateKey() or GetECDsaPrivateKey(). Alternatively, use the CopyWithPrivateKey() method to create a new instance with a private key. Further, if you set X509Certificate2.PrivateKey to `null` or set it to another key without deleting it first, the private key will be left on disk. ", "parent_source": "community", "severity": "`WARNING`", "languages": "C#"}, {"identifier": "http-listener-wildcard-bindings", "message": "The top level wildcard bindings $PREFIX leaves your application open to security vulnerabilities and give attackers more control over where traffic is routed. If you must use wildcards, consider using subdomain wildcard binding. For example, you can use \"*.asdf.gov\" if you own all of \"asdf.gov\".", "parent_source": "community", "severity": "`WARNING`", "languages": "C#"}, {"identifier": "html-raw-json", "message": "Unencoded JSON in HTML context is vulnerable to cross-site scripting, because `</script>` is not properly encoded.", "parent_source": "community", "severity": "`ERROR`", "languages": "Generic"}, {"identifier": "harden-dompurify-usage", "message": "This rule has been deprecated.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript, TypeScript"}, {"identifier": "avoid-v-html", "message": "Dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to XSS vulnerabilities. Only use HTML interpolation on trusted content and never on user-provided content.", "parent_source": "community", "severity": "`WARNING`", "languages": "Regex"}, {"identifier": "puppeteer-evaluate-arg-injection", "message": "If unverified user data can reach the `evaluate` method it can result in Server-Side Request Forgery vulnerabilities", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "puppeteer-goto-injection", "message": "If unverified user data can reach the `goto` method it can result in Server-Side Request Forgery vulnerabilities", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "puppeteer-setcontent-injection", "message": "If unverified user data can reach the `setContent` method it can result in Server-Side Request Forgery vulnerabilities", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "puppeteer-exposed-chrome-devtools", "message": "Remote debugging protocol does not perform any authentication, so exposing it too widely can be a security risk.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "puppeteer-evaluate-code-injection", "message": "If unverified user data can reach the `evaluate` method it can result in Server-Side Request Forgery vulnerabilities", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "wkhtmltopdf-injection", "message": "If unverified user data can reach the `wkhtmltopdf` it can result in Server-Side Request Forgery vulnerabilities", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "hardcoded-passport-secret", "message": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "playwright-addinitscript-code-injection", "message": "If unverified user data can reach the `addInitScript` method it can result in Server-Side Request Forgery vulnerabilities", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "playwright-evaluate-arg-injection", "message": "If unverified user data can reach the `evaluate` method it can result in Server-Side Request Forgery vulnerabilities", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "playwright-evaluate-code-injection", "message": "If unverified user data can reach the `evaluate` method it can result in Server-Side Request Forgery vulnerabilities", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "playwright-goto-injection", "message": "If unverified user data can reach the `goto` method it can result in Server-Side Request Forgery vulnerabilities", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "playwright-setcontent-injection", "message": "If unverified user data can reach the `setContent` method it can result in Server-Side Request Forgery vulnerabilities", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "playwright-exposed-chrome-devtools", "message": "Remote debugging protocol does not perform any authentication, so exposing it too widely can be a security risk.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "monaco-hover-htmlsupport", "message": "If user input reaches `HoverProvider` while `supportHml` is set to `true` it may introduce an XSS vulnerability. Do not produce HTML for hovers with dynamically generated input.", "parent_source": "community", "severity": "`WARNING`", "languages": "TypeScript, JavaScript"}, {"identifier": "xml2json-xxe", "message": "If unverified user data can reach the XML Parser it can result in XML External or Internal Entity (XXE) Processing vulnerabilities", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "deno-dangerous-run", "message": "Detected non-literal calls to Deno.run(). This could lead to a command injection vulnerability.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript, TypeScript"}, {"identifier": "tainted-html-string", "message": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates which will safely render HTML instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "dynamodb-request-object", "message": "Detected DynamoDB query params that are tainted by `$EVENT` object. This could lead to NoSQL injection if the variable is user-controlled and not properly sanitized. Explicitly assign query params instead of passing data from `$EVENT` directly to DynamoDB client.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript, TypeScript"}, {"identifier": "detect-child-process", "message": "Allowing spawning arbitrary programs or running shell processes with arbitrary arguments may end up in a command injection vulnerability. Try to avoid non-literal values for the command string. If it is not possible, then do not let running arbitrary commands, use a white list for inputs.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript, TypeScript"}, {"identifier": "pg-sqli", "message": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `connection.query('SELECT $1 from table', [userinput])`", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "tainted-html-response", "message": "Detected user input flowing into an HTML response. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "tainted-sql-string", "message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript, TypeScript"}, {"identifier": "sequelize-sqli", "message": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `sequelize.query('SELECT * FROM projects WHERE status = ?', { replacements: ['active'], type: QueryTypes.SELECT });`", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "vm-runincontext-injection", "message": "The `vm` module enables compiling and running code within V8 Virtual Machine contexts. The `vm` module is not a security mechanism. Do not use it to run untrusted code. If code passed to `vm` functions is controlled by user input it could result in command injection. Do not let user input in `vm` functions.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript, TypeScript"}, {"identifier": "tainted-eval", "message": "The `eval()` function evaluates JavaScript code represented as a string. Executing JavaScript from a string is an enormous security risk. It is far too easy for a bad actor to run arbitrary code when you use `eval()`. Ensure evaluated content is not definable by external sources.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "knex-sqli", "message": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `knex.raw('SELECT $1 from table', [userinput])`", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "mysql-sqli", "message": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `connection.query('SELECT $1 from table', [userinput])`", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "unsafe-serialize-javascript", "message": "`serialize-javascript` used with `unsafe` parameter, this could be vulnerable to XSS.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "sandbox-code-injection", "message": "Make sure that unverified user data can not reach `sandbox`.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "new-function-detected", "message": "this rule has been deprecated.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "wildcard-postmessage-configuration", "message": "The target origin of the window.postMessage() API is set to \"*\". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "dom-based-xss", "message": "Detected possible DOM-based XSS. This occurs because a portion of the URL is being used to construct an element added directly to the page. For example, a malicious actor could send someone a link like this: http://www.some.site/page.html?default=<script>alert(document.cookie)</script> which would add the script to the page. Consider allowlisting appropriate values or using an approach which does not involve the URL.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript, TypeScript"}, {"identifier": "insecure-innerhtml", "message": "User controlled data in a `$EL.innerHTML` is an anti-pattern that can lead to XSS vulnerabilities", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript, TypeScript"}, {"identifier": "eval-detected", "message": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "js-open-redirect", "message": "The application accepts potentially user-controlled input `$PROP` which can control the location of the current window context. This can lead two types of vulnerabilities open-redirection and Cross-Site-Scripting (XSS) with JavaScript URIs. It is recommended to validate user-controllable input before allowing it to control the redirection.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "insufficient-postmessage-origin-validation", "message": "No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "raw-html-concat", "message": "User controlled data in a HTML string may result in XSS", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "insecure-document-method", "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript, TypeScript"}, {"identifier": "js-open-redirect-from-function", "message": "The application accepts potentially user-controlled input `$PROP` which can control the location of the current window context. This can lead two types of vulnerabilities open-redirection and Cross-Site-Scripting (XSS) with JavaScript URIs. It is recommended to validate user-controllable input before allowing it to control the redirection.", "parent_source": "community", "severity": "`INFO`", "languages": "JavaScript, TypeScript"}, {"identifier": "raw-html-join", "message": "User controlled data in a HTML string may result in XSS", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "vm2-context-injection", "message": "Make sure that unverified user data can not reach `vm2`.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "vm2-code-injection", "message": "Make sure that unverified user data can not reach `vm2`.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "express-sequelize-injection", "message": "Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript, TypeScript"}, {"identifier": "sequelize-weak-tls-version", "message": "TLS1.0 and TLS1.1 are deprecated and should not be used anymore. By default, NodeJS used TLSv1.2. So, TLS min version must not be downgrade to TLS1.0 or TLS1.1. Enforce TLS1.3 is highly recommended This rule checks TLS configuration only for PostgreSQL, MariaDB and MySQL. SQLite is not really concerned by TLS configuration. This rule could be extended for MSSQL, but the dialectOptions is specific for Tedious.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "sequelize-enforce-tls", "message": "If TLS is disabled on server side (Postgresql server), Sequelize establishes connection without TLS and no error will be thrown. To prevent MITN (Man In The Middle) attack, TLS must be enforce by Sequelize. Set \"ssl: true\" or define settings \"ssl: {...}\"", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "sequelize-raw-query", "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. Data replacement or data binding should be used. See https://sequelize.org/master/manual/raw-queries.html", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "sequelize-tls-disabled-cert-validation", "message": "Set \"rejectUnauthorized\" to false is a convenient way to resolve certificate error. But this method is unsafe because it disables the server certificate verification, making the Node app open to MITM attack. \"rejectUnauthorized\" option must be alway set to True (default value). With self -signed certificate or custom CA, use \"ca\" option to define Root Certificate. This rule checks TLS configuration only for Postgresql, MariaDB and MySQL. SQLite is not really concerned by TLS configuration. This rule could be extended for MSSQL, but the dialectOptions is specific for Tedious.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript, TypeScript"}, {"identifier": "intercom-settings-user-identifier-without-user-hash", "message": "Found an initialization of the Intercom Messenger that identifies a User, but does not specify a `user_hash`.This configuration allows users to impersonate one another. See the Intercom Identity Verification docs for more context https://www.intercom.com/help/en/articles/183-set-up-identity-verification-for-web-and-mobile", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript"}, {"identifier": "multiargs-code-execution", "message": "Potential arbitrary code execution, piped to eval", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "wkhtmltoimage-injection", "message": "If unverified user data can reach the `wkhtmltoimage` it can result in Server-Side Request Forgery vulnerabilities", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "assigned-undefined", "message": "`undefined` is not a reserved keyword in Javascript, so this is \"valid\" Javascript but highly confusing and likely to result in bugs.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "javascript-alert", "message": "found alert() call; should this be in production code?", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "javascript-debugger", "message": "found debugger call; should this be in production code?", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "javascript-confirm", "message": "found confirm() call; should this be in production code?", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "javascript-prompt", "message": "found prompt() call; should this be in production code?", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "lazy-load-module", "message": "Lazy loading can complicate code bundling if care is not taken, also `require`s are run synchronously by Node.js. If they are called from within a function, it may block other requests from being handled at a more critical time. The best practice is to `require` modules at the beginning of each file, before and outside of any functions.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "zlib-async-loop", "message": "Creating and using a large number of zlib objects simultaneously can cause significant memory fragmentation. It is strongly recommended that the results of compression operations be cached or made synchronous to avoid duplication of effort.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "no-stringify-keys", "message": "JSON stringify does not produce a stable key ordering, and should not be relied on for producing object keys. Consider using json-stable-stringify instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "missing-template-string-indicator", "message": "This looks like a JavaScript template string. Are you missing a '$' in front of '{...}'?", "parent_source": "community", "severity": "`INFO`", "languages": "JavaScript, TypeScript"}, {"identifier": "eqeq-is-bad", "message": "Detected a useless comparison operation `$X == $X` or `$X != $X`. This operation is always true. If testing for floating point NaN, use `math.isnan`, or `cmath.isnan` if the number is complex.", "parent_source": "community", "severity": "`INFO`", "languages": "JavaScript, TypeScript"}, {"identifier": "no-replaceall", "message": "The string method replaceAll is not supported in all versions of javascript, and is not supported by older browser versions. Consider using replace() with a regex as the first argument instead like mystring.replace(/bad/g, \"good\") instead of mystring.replaceAll(\"bad\", \"good\") (https://discourse.threejs.org/t/replaceall-is-not-a-function/14585)", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "useless-assignment", "message": "`$X` is assigned twice; the first assignment is useless", "parent_source": "community", "severity": "`INFO`", "languages": "JavaScript, TypeScript"}, {"identifier": "detect-child-process", "message": "Detected calls to child_process from a function argument `$FUNC`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript, TypeScript"}, {"identifier": "detect-pseudoRandomBytes", "message": "Detected usage of crypto.pseudoRandomBytes, which does not produce secure random numbers.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "detect-buffer-noassert", "message": "Detected usage of noassert in Buffer API, which allows the offset the be beyond the end of the buffer. This could result in writing or reading beyond the end of the buffer.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "detect-insecure-websocket", "message": "Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.", "parent_source": "community", "severity": "`ERROR`", "languages": "Regex"}, {"identifier": "detect-no-csrf-before-method-override", "message": "Detected use of express.csrf() middleware before express.methodOverride(). This can allow GET requests (which are not checked by csrf) to turn into POST requests later.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "spawn-git-clone", "message": "Git allows shell commands to be specified in ext URLs for remote repositories. For example, git clone 'ext::sh -c whoami% >&2' will execute the whoami command to try to connect to a remote repository. Make sure that the URL is not controlled by external input.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript, TypeScript"}, {"identifier": "detect-disable-mustache-escape", "message": "Markup escaping disabled. This can be used with some template engines to escape disabling of HTML entities, which can lead to XSS attacks.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "html-in-template-string", "message": "This template literal looks like HTML and has interpolated variables. These variables are not HTML-encoded by default. If the variables contain HTML tags, these may be interpreted by the browser, resulting in cross-site scripting (XSS).", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "detect-eval-with-expression", "message": "Detected use of dynamic execution of JavaScript which may come from user-input, which can lead to Cross-Site-Scripting (XSS). Where possible avoid including user-input in functions which dynamically execute user-input.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "insecure-object-assign", "message": "Depending on the context, user control data in `Object.assign` can cause web response to include data that it should not have or can lead to a mass assignment vulnerability.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "detect-non-literal-require", "message": "This rule is deprecated.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "code-string-concat", "message": "Found data from an Express or Next web request flowing to `eval`. If this data is user-controllable this can lead to execution of arbitrary system commands in the context of your application process. Avoid `eval` whenever possible.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript, TypeScript"}, {"identifier": "detect-non-literal-fs-filename", "message": "Detected that function argument `$ARG` has entered the fs module. An attacker could potentially control the location of this file, to include going backwards in the directory with '../'. To address this, ensure that user-controlled variables in file paths are validated.", "parent_source": "community", "severity": "`WARNING`", "languages": "TypeScript, JavaScript"}, {"identifier": "non-constant-sql-query", "message": "This rule has been deprecated. It duplicates `javascript/sequelize/security/audit/sequelize-raw-query` rule.", "parent_source": "community", "severity": "`INFO`", "languages": "JavaScript, TypeScript"}, {"identifier": "incomplete-sanitization", "message": "`$STR.replace` method will only replace the first occurrence when used with a string argument ($CHAR). If this method is used for escaping of dangerous data then there is a possibility for a bypass. Try to use sanitization library instead or use a Regex with a global flag.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "detect-non-literal-regexp", "message": "RegExp() called with a `$ARG` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "unsafe-dynamic-method", "message": "Using non-static data to retrieve and run functions from the object is dangerous. If the data is user-controlled, it may allow executing arbitrary code.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "detect-redos", "message": "Detected the use of a regular expression `$REDOS` which appears to be vulnerable to a Regular expression Denial-of-Service (ReDoS). For this reason, it is recommended to review the regex and ensure it is not vulnerable to catastrophic backtracking, and if possible use a library which offers default safety against ReDoS vulnerabilities.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "vm-runincontext-context-injection", "message": "Make sure that unverified user data can not reach vm.runInContext.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "vm-runinnewcontext-context-injection", "message": "this rule has been deprecated.", "parent_source": "community", "severity": "`INFO`", "languages": "JavaScript, TypeScript"}, {"identifier": "vm-compilefunction-context-injection", "message": "this rule has been deprecated.", "parent_source": "community", "severity": "`INFO`", "languages": "JavaScript, TypeScript"}, {"identifier": "vm-script-code-injection", "message": "this rule has been deprecated.", "parent_source": "community", "severity": "`INFO`", "languages": "JavaScript, TypeScript"}, {"identifier": "vm-sourcetextmodule-code-injection", "message": "this rule has been deprecated.", "parent_source": "community", "severity": "`INFO`", "languages": "JavaScript, TypeScript"}, {"identifier": "vm-runincontext-code-injection", "message": "this rule has been deprecated.", "parent_source": "community", "severity": "`INFO`", "languages": "JavaScript, TypeScript"}, {"identifier": "vm-runinnewcontext-code-injection", "message": "this rule has been deprecated.", "parent_source": "community", "severity": "`INFO`", "languages": "JavaScript, TypeScript"}, {"identifier": "vm-runinthiscontext-code-injection", "message": "this rule has been deprecated.", "parent_source": "community", "severity": "`INFO`", "languages": "JavaScript, TypeScript"}, {"identifier": "vm-compilefunction-code-injection", "message": "this rule has been deprecated.", "parent_source": "community", "severity": "`INFO`", "languages": "JavaScript, TypeScript"}, {"identifier": "unsafe-formatstring", "message": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.", "parent_source": "community", "severity": "`INFO`", "languages": "JavaScript, TypeScript"}, {"identifier": "hardcoded-hmac-key", "message": "Detected a hardcoded hmac key. Avoid hardcoding secrets and consider using an alternate option such as reading the secret from a config file or using an environment variable.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "detect-bracket-object-injection", "message": "This rule is deprecated.", "parent_source": "community", "severity": "`INFO`", "languages": "JavaScript, TypeScript"}, {"identifier": "detect-non-literal-require", "message": "Detected the use of require(variable). Calling require with a non-literal argument might allow an attacker to load and run arbitrary code, or access arbitrary files.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "unknown-value-with-script-tag", "message": "Cannot determine what '$UNK' is and it is used with a '<script>' tag. This could be susceptible to cross-site scripting (XSS). Ensure '$UNK' is not externally controlled, or sanitize this data.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "md5-used-as-password", "message": "It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as bcrypt. You can use the `bcrypt` node.js package.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript"}, {"identifier": "dangerous-spawn-shell", "message": "Detected non-literal calls to $EXEC(). This could lead to a command injection vulnerability.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript, TypeScript"}, {"identifier": "spawn-shell-true", "message": "Found '$SPAWN' with '{shell: $SHELL}'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use '{shell: false}' instead.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript, TypeScript"}, {"identifier": "path-join-resolve-traversal", "message": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "node-mssql-sqli", "message": "Detected string concatenation with a non-literal variable in a `mssql` JS SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `$REQ.input('USER_ID', mssql.Int, id);`", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "node-knex-sqli", "message": "Detected SQL statement that is tainted by `$REQ` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements. An example of parameterized queries like so: `knex.raw('SELECT $1 from table', [userinput])` can help prevent SQLi.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "node-postgres-sqli", "message": "Detected string concatenation with a non-literal variable in a node-postgres JS SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use parameterized statements like so: `client.query('SELECT $1 from table', [userinput])`", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "node-mysql-sqli", "message": "Detected a `$IMPORT` SQL statement that comes from a function argument. This could lead to SQL injection if the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it is recommended to use parameterized queries or prepared statements.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "prototype-pollution-function", "message": "This rule is deprecated.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "prototype-pollution-loop", "message": "Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.", "parent_source": "community", "severity": "`WARNING`", "languages": "TypeScript, JavaScript"}, {"identifier": "prototype-pollution-assignment", "message": "Possibility of prototype polluting assignment detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "detect-replaceall-sanitization", "message": "Detected a call to `$FUNC()` in an attempt to HTML escape the string `$STR`. Manually sanitizing input through a manually built list can be circumvented in many situations, and it's better to use a well known sanitization library such as `sanitize-html` or `DOMPurify`.", "parent_source": "community", "severity": "`INFO`", "languages": "JavaScript, TypeScript"}, {"identifier": "apollo-axios-ssrf", "message": "User-controllable argument $DATAVAL to $METHOD passed to Axios via internal handler $INNERFUNC. This could be a server-side request forgery. A user could call a restricted API or leak internal headers to an unauthorized party. Validate your user arguments against an allowlist of known URLs, or consider refactoring so that user-controlled data is not necessary.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript"}, {"identifier": "insecure-createnodesfrommarkup", "message": "User controlled data in a `createNodesFromMarkup` is an anti-pattern that can lead to XSS vulnerabilities", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "sax-xxe", "message": "Use of 'ondoctype' in 'sax' library detected. By default, 'sax' won't do anything with custom DTD entity definitions. If you're implementing a custom DTD entity definition, be sure not to introduce XML External Entity (XXE) vulnerabilities, or be absolutely sure that external entities received from a trusted source while processing XML.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "prohibit-jquery-html", "message": "JQuery's `html` function is susceptible to Cross Site Scripting (XSS) attacks. If you're just passing text, consider `text` instead. Otherwise, use a function that escapes HTML such as edX's `HtmlUtils.setHtml()`.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "jquery-insecure-method", "message": "User controlled data in a jQuery's `.$METHOD(...)` is an anti-pattern that can lead to XSS vulnerabilities", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "jquery-insecure-selector", "message": "User controlled data in a `$(...)` is an anti-pattern that can lead to XSS vulnerabilities", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "jwt-exposed-credentials", "message": "this rule has been deprecated.", "parent_source": "community", "severity": "`INFO`", "languages": "JavaScript, TypeScript"}, {"identifier": "hardcoded-jwt-secret", "message": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "jwt-none-alg", "message": "Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript, TypeScript"}, {"identifier": "jose-exposed-data", "message": "The object is passed strictly to jose.JWT.sign(...) Make sure that sensitive information is not exposed through JWT token payload.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "shelljs-exec-injection", "message": "If unverified user data can reach the `exec` method it can result in Remote Code Execution", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript, TypeScript"}, {"identifier": "chrome-remote-interface-evaluate-injection", "message": "this rule has been deprecated.", "parent_source": "community", "severity": "`INFO`", "languages": "JavaScript, TypeScript"}, {"identifier": "chrome-remote-interface-navigate-injection", "message": "this rule has been deprecated.", "parent_source": "community", "severity": "`INFO`", "languages": "JavaScript, TypeScript"}, {"identifier": "chrome-remote-interface-printtopdf-injection", "message": "this rule has been deprecated.", "parent_source": "community", "severity": "`INFO`", "languages": "JavaScript, TypeScript"}, {"identifier": "chrome-remote-interface-setdocumentcontent-injection", "message": "this rule has been deprecated.", "parent_source": "community", "severity": "`INFO`", "languages": "JavaScript, TypeScript"}, {"identifier": "chrome-remote-interface-compilescript-injection", "message": "If unverified user data can reach the `compileScript` method it can result in Server-Side Request Forgery vulnerabilities", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "expat-xxe", "message": "If unverified user data can reach the XML Parser it can result in XML External or Internal Entity (XXE) Processing vulnerabilities", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "grpc-nodejs-insecure-connection", "message": "Found an insecure gRPC connection. This creates a connection without encryption to a gRPC client/server. A malicious attacker could tamper with the gRPC message, which could compromise the machine.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript, TypeScript"}, {"identifier": "jwt-exposed-credentials", "message": "this rule has been deprecated.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript, TypeScript"}, {"identifier": "hardcoded-jwt-secret", "message": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "jwt-none-alg", "message": "Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript, TypeScript"}, {"identifier": "jwt-decode-without-verify", "message": "Detected the decoding of a JWT token without a verify step. JWT tokens must be verified before use, otherwise the token's integrity is unknown. This means a malicious actor could forge a JWT token with any claims. Call '.verify()' before using the token.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "jwt-exposed-data", "message": "The object is passed strictly to jsonwebtoken.sign(...) Make sure that sensitive information is not exposed through JWT token payload.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "detect-angular-resource-loading", "message": "$sceDelegateProvider allowlisting can introduce security issues if wildcards are used.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "detect-angular-trust-as-url-method", "message": "The use of $sce.trustAsUrl can be dangerous if unsanitized user input flows through this API.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "detect-angular-element-taint", "message": "Use of angular.element can lead to XSS if user-input is treated as part of the HTML element within `$SINK`. It is recommended to contextually output encode user-input, before inserting into `$SINK`. If the HTML needs to be preserved it is recommended to sanitize the input using $sce.getTrustedHTML or $sanitize.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "detect-angular-trust-as-method", "message": "The use of $sce.trustAs can be dangerous if unsanitized user input flows through this API.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "detect-angular-trust-as-css-method", "message": "The use of $sce.trustAsCss can be dangerous if unsanitized user input flows through this API.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "detect-angular-open-redirect", "message": "Use of $window.location.href can lead to open-redirect if user input is used for redirection.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript, TypeScript"}, {"identifier": "detect-angular-element-methods", "message": "Use of angular.element can lead to XSS if user-input is treated as part of the HTML element within `$SINK`. It is recommended to contextually output encode user-input, before inserting into `$SINK`. If the HTML needs to be preserved it is recommended to sanitize the input using $sce.getTrustedHTML or $sanitize.", "parent_source": "community", "severity": "`INFO`", "languages": "JavaScript, TypeScript"}, {"identifier": "detect-angular-trust-as-html-method", "message": "The use of $sce.trustAsHtml can be dangerous if unsanitized user input flows through this API.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "detect-angular-trust-as-resourceurl-method", "message": "The use of $sce.trustAsResourceUrl can be dangerous if unsanitized user input flows through this API.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "detect-angular-trust-as-js-method", "message": "The use of $sce.trustAsJs can be dangerous if unsanitized user input flows through this API.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "detect-angular-translateprovider-translations-method", "message": "The use of $translateProvider.translations method can be dangerous if user input is provided to this API.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript"}, {"identifier": "detect-angular-sce-disabled", "message": "$sceProvider is set to false. Disabling Strict Contextual escaping (SCE) in an AngularJS application could provide additional attack surface for XSS vulnerabilities.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript, TypeScript"}, {"identifier": "require-request", "message": "If an attacker controls the x in require(x) then they can cause code to load that was not intended to run on the server.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript, TypeScript"}, {"identifier": "express-jwt-hardcoded-secret", "message": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "express-vm-injection", "message": "Make sure that unverified user data can not reach `$VM`.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript, TypeScript"}, {"identifier": "express-xml2json-xxe", "message": "Make sure that unverified user data can not reach the XML Parser, as it can result in XML External or Internal Entity (XXE) Processing vulnerabilities", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript, TypeScript"}, {"identifier": "express-sandbox-code-injection", "message": "Make sure that unverified user data can not reach `sandbox`.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript, TypeScript"}, {"identifier": "express-expat-xxe", "message": "Make sure that unverified user data can not reach the XML Parser, as it can result in XML External or Internal Entity (XXE) Processing vulnerabilities.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript, TypeScript"}, {"identifier": "express-insecure-template-usage", "message": "User data from `$REQ` is being compiled into the template, which can lead to a Server Side Template Injection (SSTI) vulnerability.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "express-phantom-injection", "message": "If unverified user data can reach the `phantom` methods it can result in Server-Side Request Forgery vulnerabilities", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript, TypeScript"}, {"identifier": "express-vm2-injection", "message": "Make sure that unverified user data can not reach `vm2`.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "express-puppeteer-injection", "message": "If unverified user data can reach the `puppeteer` methods it can result in Server-Side Request Forgery vulnerabilities", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript, TypeScript"}, {"identifier": "x-frame-options-misconfiguration", "message": "By letting user input control `X-Frame-Options` header, there is a risk that software does not properly verify whether or not a browser should be allowed to render a page in an `iframe`.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "express-wkhtmltoimage-injection", "message": "If unverified user data can reach the `phantom` methods it can result in Server-Side Request Forgery vulnerabilities", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript, TypeScript"}, {"identifier": "express-wkhtmltopdf-injection", "message": "If unverified user data can reach the `wkhtmltopdf` methods it can result in Server-Side Request Forgery vulnerabilities", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript, TypeScript"}, {"identifier": "express-data-exfiltration", "message": "Depending on the context, user control data in `Object.assign` can cause web response to include data that it should not have or can lead to a mass assignment vulnerability.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "cors-misconfiguration", "message": "By letting user input control CORS parameters, there is a risk that software does not properly verify that the source of data or communication is valid. Use literal values for CORS settings.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "express-jwt-not-revoked", "message": "No token revoking configured for `express-jwt`. A leaked token could still be used and unable to be revoked. Consider using function as the `isRevoked` option.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "express-ssrf", "message": "The following request $REQUEST.$METHOD() was found to be crafted from user-input `$REQ` which can lead to Server-Side Request Forgery (SSRF) vulnerabilities. It is recommended where possible to not allow user-input to craft the base request, but to be treated as part of the path or query parameter. When user-input is necessary to craft the request, it is recommeneded to follow OWASP best practices to prevent abuse. ", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "express-res-sendfile", "message": "The application processes user-input, this is passed to res.sendFile which can allow an attacker to arbitrarily read files on the system through path traversal. It is recommended to perform input validation in addition to canonicalizing the path. This allows you to validate the path against the intended directory it should be accessing.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "res-render-injection", "message": "User controllable data `$REQ` enters `$RES.render(...)` this can lead to the loading of other HTML/templating pages that they may not be authorized to render. An attacker may attempt to use directory traversal techniques e.g. `../folder/index` to access other HTML pages on the file system. Where possible, do not allow users to define what should be  loaded in $RES.render or use an allow list for the existing application.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "express-libxml-vm-noent", "message": "Detected use of parseXml() function with the `noent` field set to `true`. This can lead to an XML External Entities (XXE) attack if untrusted data is passed into it.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "express-third-party-object-deserialization", "message": "The following function call $SER.$FUNC accepts user controlled data which can result in Remote Code Execution (RCE) through Object Deserialization. It is recommended to use secure data processing alternatives such as JSON.parse() and Buffer.from().", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "unknown-value-in-redirect", "message": "It looks like '$UNK' is read from user input and it is used to as a redirect. Ensure '$UNK' is not externally controlled, otherwise this is an open redirect.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "remote-property-injection", "message": "Bracket object notation with user input is present, this might allow an attacker to access all properties of the object and even it's prototype. Use literal values for object properties.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript, TypeScript"}, {"identifier": "express-session-hardcoded-secret", "message": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "express-check-csurf-middleware-usage", "message": "A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.", "parent_source": "community", "severity": "`INFO`", "languages": "JavaScript, TypeScript"}, {"identifier": "express-cookie-session-default-name", "message": "Don\u2019t use the default session cookie name Using the default session cookie name can open your app to attacks. The security issue posed is similar to X-Powered-By: a potential attacker can use it to fingerprint the server and target attacks accordingly.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "express-cookie-session-no-secure", "message": "Default session middleware settings: `secure` not set. It ensures the browser only sends the cookie over HTTPS.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "express-cookie-session-no-httponly", "message": "Default session middleware settings: `httpOnly` not set. It ensures the cookie is sent only over HTTP(S), not client JavaScript, helping to protect against cross-site scripting attacks.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "express-cookie-session-no-domain", "message": "Default session middleware settings: `domain` not set. It indicates the domain of the cookie; use it to compare against the domain of the server in which the URL is being requested. If they match, then check the path attribute next.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "express-cookie-session-no-path", "message": "Default session middleware settings: `path` not set. It indicates the path of the cookie; use it to compare against the request path. If this and domain match, then send the cookie in the request.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "express-cookie-session-no-expires", "message": "Default session middleware settings: `expires` not set. Use it to set expiration date for persistent cookies.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "express-path-join-resolve-traversal", "message": "Possible writing outside of the destination, make sure that the target path is nested in the intended destination", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "express-libxml-noent", "message": "The libxml library processes user-input with the `noent` attribute is set to `true` which can lead to being vulnerable to XML External Entities (XXE) type attacks. It is recommended to set `noent` to `false` when using this feature to ensure you are protected.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript, TypeScript"}, {"identifier": "express-open-redirect", "message": "The application redirects to a URL specified by user-supplied input `$REQ` that is not validated. This could redirect users to malicious locations. Consider using an allow-list approach to validate URLs, or warn users they are being redirected to a third-party website.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "express-detect-notevil-usage", "message": "Detected usage of the `notevil` package, which is unmaintained and has vulnerabilities. Using any sort of `eval()` functionality can be very dangerous, but if you must, the `eval` package is an up to date alternative. Be sure that only trusted input reaches an `eval()` function.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "express-check-directory-listing", "message": "Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and files. It is recommended to disable directory listing unless it is a public resource. If you need directory listing, ensure that sensitive files are inaccessible when querying the resource.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "express-xml2json-xxe-event", "message": "Xml Parser is used inside Request Event. Make sure that unverified user data can not reach the XML Parser, as it can result in XML External or Internal Entity (XXE) Processing vulnerabilities", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "direct-response-write", "message": "Detected directly writing to a Response object from user-defined input. This bypasses any HTML escaping and may expose your application to a Cross-Site-scripting (XSS) vulnerability. Instead, use 'resp.render()' to render safely escaped HTML.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "var-in-script-src", "message": "Detected a template variable used as the 'src' in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent malicious URLs from being injected and could results in a cross-site scripting (XSS) vulnerability. Prefer not to dynamically generate the 'src' attribute and use static URLs instead. If you must do this, carefully check URLs against an allowlist and be sure to URL-encode the result.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "var-in-script-tag", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "var-in-href", "message": "Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: href='/<%= link %>'. You may also consider setting the Content Security Policy (CSP) header.", "parent_source": "community", "severity": "`WARNING`", "languages": "Regex"}, {"identifier": "template-explicit-unescape", "message": "Detected an explicit unescape in an EJS template, using '<%- ... %>' If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need escaping, ensure no external data can reach this location.", "parent_source": "community", "severity": "`WARNING`", "languages": "Regex"}, {"identifier": "escape-function-overwrite", "message": "The Mustache escape function is being overwritten. This could bypass HTML escaping safety measures built into the rendering engine, exposing your application to cross-site scripting (XSS) vulnerabilities. If you need unescaped HTML, use the triple brace operator in your template: '{{{ ... }}}'.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "var-in-script-tag", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "var-in-href", "message": "Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.", "parent_source": "community", "severity": "`WARNING`", "languages": "Regex"}, {"identifier": "template-explicit-unescape", "message": "Detected an explicit unescape in a Mustache template, using triple braces '{{{...}}}' or ampersand '&'. If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. If you must do this, ensure no external data can reach this location.", "parent_source": "community", "severity": "`WARNING`", "languages": "Regex"}, {"identifier": "template-and-attributes", "message": "Detected a unescaped variables using '&attributes'. If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. If you must do this, ensure no external data can reach this location.", "parent_source": "community", "severity": "`WARNING`", "languages": "Regex"}, {"identifier": "var-in-script-tag", "message": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI.", "parent_source": "community", "severity": "`WARNING`", "languages": "Regex"}, {"identifier": "var-in-href", "message": "Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: a(href='/'+url). You may also consider setting the Content Security Policy (CSP) header.", "parent_source": "community", "severity": "`WARNING`", "languages": "Regex"}, {"identifier": "template-explicit-unescape", "message": "Detected an explicit unescape in a Pug template, using either '!=' or '!{...}'. If external data can reach these locations, your application is exposed to a cross-site scripting (XSS) vulnerability. If you must do this, ensure no external data can reach this location.", "parent_source": "community", "severity": "`WARNING`", "languages": "Regex"}, {"identifier": "raw-html-format", "message": "User data flows into the host portion of this manually-constructed HTML. This can introduce a Cross-Site-Scripting (XSS) vulnerability if this comes from user-provided input. Consider using a sanitization library such as DOMPurify to sanitize the HTML within.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "tainted-sql-string", "message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript, TypeScript"}, {"identifier": "calling-set-state-on-current-state", "message": "Calling setState on the current state is always a no-op. Did you mean to change the state like $Y(!$X) instead?", "parent_source": "community", "severity": "`ERROR`", "languages": "JavaScript"}, {"identifier": "tofastproperties-code-execution", "message": "Potential arbitrary code execution, whatever is provided to `toFastProperties` is sent straight to eval()", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "ajv-allerrors-true", "message": "By setting `allErrors: true` in `Ajv` library, all error objects will be allocated without limit. This allows the attacker to produce a huge number of errors which can lead to denial of service. Do not use `allErrors: true` in production.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "unsafe-argon2-config", "message": "Prefer Argon2id where possible. Per RFC9016, section 4 IETF recommends selecting Argon2id unless you can guarantee an adversary has no direct access to the computing environment.", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "phantom-injection", "message": "If unverified user data can reach the `phantom` page methods it can result in Server-Side Request Forgery vulnerabilities", "parent_source": "community", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "package-dependencies-check", "message": "Package dependencies with variant versions may lead to dependency hijack and confusion attacks. Better to specify an exact version or use package-lock.json for a specific version of the package.", "parent_source": "community", "severity": "`WARNING`", "languages": "JSON"}, {"identifier": "public-s3-policy-statement", "message": "Detected public S3 bucket policy. This policy allows anyone to access certain properties of or items in the bucket. Do not do this unless you will never have sensitive data inside the bucket.", "parent_source": "community", "severity": "`WARNING`", "languages": "JSON"}, {"identifier": "wildcard-assume-role", "message": "Detected wildcard access granted to sts:AssumeRole. This means anyone with your AWS account ID and the name of the role can assume the role. Instead, limit to a specific identity in your account, like this: `arn:aws:iam::<account_id>:root`.", "parent_source": "community", "severity": "`ERROR`", "languages": "JSON"}, {"identifier": "public-s3-bucket", "message": "Detected public S3 bucket. This policy allows anyone to have some kind of access to the bucket. The exact level of access and types of actions allowed will depend on the configuration of bucket policy and ACLs. Please review the bucket configuration to make sure they are set with intended values.", "parent_source": "community", "severity": "`WARNING`", "languages": "JSON"}, {"identifier": "use-assert-class", "message": "Assert methods in the System class have been replaced with the Assert class: https://developer.salesforce.com/docs/atlas.en-us.apexref.meta/apexref/apex_class_System_Assert.htm", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "global-access-modifiers", "message": "Global classes, methods, and variables should be avoided (especially in managed packages) as they can never be deleted or changed in signature. Always check twice if something needs to be global.", "parent_source": "community", "severity": "`WARNING`", "languages": "Apex"}, {"identifier": "absolute-urls", "message": "Using absolute URLs to Salesforce Pages is bug prone. Different sandboxes and production environments will have different instance names (like \"na10\", \"na15\" etc.). Code using absolute URLs will only work when it runs in the corresponding salesforce instances. It will break as soon as it is deployed in another one. Thus only relative URLs, i.e. without the domain and subdomain names, should be used when pointing to a salesforce page.", "parent_source": "community", "severity": "`WARNING`", "languages": "Apex"}, {"identifier": "avoid-operations-with-limits-in-loops", "message": "Database class methods, DML operations, SOQL queries, SOSL queries, Approval class methods, Email sending, async scheduling or queueing within loops can cause governor limit exceptions. Instead, try to batch up the data into a list and invoke the operation once on that list of data outside the loop.", "parent_source": "community", "severity": "`ERROR`", "languages": "Generic"}, {"identifier": "avoid-soql-in-loops", "message": "Database class methods, DML operations, SOQL queries, SOSL queries, Approval class methods, Email sending, async scheduling or queueing within loops can cause governor limit exceptions. Instead, try to batch up the data into a list and invoke the operation once on that list of data outside the loop.", "parent_source": "community", "severity": "`ERROR`", "languages": "Generic"}, {"identifier": "avoid-native-dml-in-loops", "message": "Avoid DML statements inside loops to avoid hitting the DML governor limit. Instead, try to batch up the data into a list and invoke your DML once on that list of data outside the loop.", "parent_source": "community", "severity": "`ERROR`", "languages": "Generic"}, {"identifier": "avoid-sosl-in-loops", "message": "Database class methods, DML operations, SOQL queries, SOSL queries, Approval class methods, Email sending, async scheduling or queueing within loops can cause governor limit exceptions. Instead, try to batch up the data into a list and invoke the operation once on that list of data outside the loop.", "parent_source": "community", "severity": "`ERROR`", "languages": "Generic"}, {"identifier": "named-credentials-constant-match", "message": "Named Credentials (and callout endpoints) should be used instead of hard-coding credentials. 1. Hard-coded credentials are hard to maintain when mixed in with application code. 2. It is particularly hard to update hard-coded credentials when they are used amongst different classes. 3. Granting a developer access to the codebase means granting knowledge of credentials, and thus keeping a two-level access is not possible. 4. Using different credentials for different environments is troublesome and error-prone.", "parent_source": "community", "severity": "`ERROR`", "languages": "Apex"}, {"identifier": "named-credentials-string-match", "message": "Named Credentials (and callout endpoints) should be used instead of hard-coding credentials. 1. Hard-coded credentials are hard to maintain when mixed in with application code. 2. It is particularly hard to update hard-coded credentials when they are used amongst different classes. 3. Granting a developer access to the codebase means granting knowledge of credentials, and thus keeping a two-level access is not possible. 4. Using different credentials for different environments is troublesome and error-prone.", "parent_source": "community", "severity": "`ERROR`", "languages": "Apex"}, {"identifier": "insecure-http-request", "message": "The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.", "parent_source": "community", "severity": "`ERROR`", "languages": "Apex"}, {"identifier": "system-debug", "message": "In addition to debug statements potentially logging data excessively, debug statements also contribute to longer transactions and consume Apex CPU time even when debug logs are not being captured.", "parent_source": "community", "severity": "`WARNING`", "languages": "Apex"}, {"identifier": "bad-crypto", "message": "The rule makes sure you are using randomly generated IVs and keys for Crypto calls. Hard-coding these values greatly compromises the security of encrypted data.", "parent_source": "community", "severity": "`ERROR`", "languages": "Apex"}, {"identifier": "specify-sharing-level", "message": "Every Apex class should have an explicit sharing mode declared. Use the `with sharing` or `without sharing` keywords on a class to specify whether sharing rules must be enforced. Use the `inherited sharing` keyword on an Apex class to run the class in the sharing mode of the class that called it.", "parent_source": "community", "severity": "`WARNING`", "languages": "Apex"}, {"identifier": "soql-injection-unescaped-param", "message": "If a dynamic query must be used,leverage nFORCE Query Builder. In other programming languages, the related flaw is known as SQL injection. Apex doesn't use SQL, but uses its own database query language, SOQL. SOQL is much simpler and more limited in functionality than SQL. The risks are much lower for SOQL injection than for SQL injection, but the attacks are nearly identical to traditional SQL injection. SQL/SOQL injection takes user-supplied input and uses those values in a dynamic SOQL query. If the input isn't validated, it can include SOQL commands that effectively modify the SOQL statement and trick the application into performing unintended commands.", "parent_source": "community", "severity": "`ERROR`", "languages": "Apex"}, {"identifier": "soql-injection-unescaped-url-param", "message": "If a dynamic query must be used,leverage nFORCE Query Builder. In other programming languages, the related flaw is known as SQL injection. Apex doesn't use SQL, but uses its own database query language, SOQL. SOQL is much simpler and more limited in functionality than SQL. The risks are much lower for SOQL injection than for SQL injection, but the attacks are nearly identical to traditional SQL injection. SQL/SOQL injection takes user-supplied input and uses those values in a dynamic SOQL query. If the input isn't validated, it can include SOQL commands that effectively modify the SOQL statement and trick the application into performing unintended commands.", "parent_source": "community", "severity": "`ERROR`", "languages": "Apex"}, {"identifier": "apex-csrf-static-constructor", "message": "Having DML operations in Apex class constructor or initializers can have unexpected side effects: By just accessing a page, the DML statements would be executed and the database would be modified. Just querying the database is permitted.", "parent_source": "community", "severity": "`ERROR`", "languages": "Generic"}, {"identifier": "apex-csrf-constructor", "message": "Having DML operations in Apex class constructor or initializers can have unexpected side effects: By just accessing a page, the DML statements would be executed and the database would be modified. Just querying the database is permitted.", "parent_source": "community", "severity": "`ERROR`", "languages": "Apex"}, {"identifier": "dml-native-statements", "message": "Native Salesforce DML operations execute in system context, ignoring the current user's permissions, field-level security, organization-wide defaults, position in the role hierarchy, and sharing rules. Be mindful when using native Salesforce DML operations.", "parent_source": "community", "severity": "`WARNING`", "languages": "Apex"}, {"identifier": "jwt-scala-hardcode", "message": "Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)", "parent_source": "community", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala-slick-sql-non-literal", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Avoid using `#$variable` and use `$variable` in `sql\"...\"` strings instead.", "parent_source": "community", "severity": "`ERROR`", "languages": "Scala"}, {"identifier": "scala-slick-overrideSql-literal", "message": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Avoid using non literal values in `overrideSql(...)`.", "parent_source": "community", "severity": "`ERROR`", "languages": "Scala"}, {"identifier": "scala-jwt-hardcoded-secret", "message": "Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)", "parent_source": "community", "severity": "`ERROR`", "languages": "Scala"}, {"identifier": "conf-insecure-cookie-settings", "message": "Session cookie `Secure` flag is explicitly disabled. The `secure` flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the `Secure` flag by setting `secure` to `true` in configuration file.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "tainted-html-response", "message": "Detected a request with potential user-input going into an `Ok()` response. This bypasses any view or template environments, including HTML escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities. Consider using a view technology such as Twirl which automatically escapes HTML views.", "parent_source": "community", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "tainted-slick-sqli", "message": "Detected a tainted SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Avoid using using user input for generating SQL strings.", "parent_source": "community", "severity": "`ERROR`", "languages": "Scala"}, {"identifier": "twirl-html-var", "message": "Raw html content controlled by a variable detected. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. Try to avoid using `Html()` or consider properly sanitizing input data.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "webservice-ssrf", "message": "A parameter being passed directly into `WSClient` most likely lead to SSRF. This could allow an attacker to send data to their own server, potentially exposing sensitive data sent with this request. They could also probe internal servers or other resources that the server runnig this code can access. Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode the correct host.", "parent_source": "community", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "conf-csrf-headers-bypass", "message": "Possibly bypassable CSRF configuration found. CSRF is an attack that forces an end user to execute unwanted actions on a web application in which they\u2019re currently authenticated. Make sure that Content-Type black list is configured and CORS filter is turned on.", "parent_source": "community", "severity": "`ERROR`", "languages": "Generic"}, {"identifier": "tainted-sql-from-http-request", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.", "parent_source": "community", "severity": "`ERROR`", "languages": "Scala"}, {"identifier": "positive-number-index-of", "message": "Flags scala code that look for values that are greater than 0. This ignores the first element, which is most likely a bug. Instead, use indexOf with -1. If the intent is to check the inclusion of a value, use the contains method instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "dispatch-ssrf", "message": "A parameter being passed directly into `url` most likely lead to SSRF. This could allow an attacker to send data to their own server, potentially exposing sensitive data sent with this request. They could also probe internal servers or other resources that the server runnig this code can access. Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode the correct host.", "parent_source": "community", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "path-traversal-fromfile", "message": "Flags cases of possible path traversal. If an unfiltered parameter is passed into 'fromFile', file from an arbitrary filesystem location could be read. This could lead to sensitive data exposure and other provles. Instead, sanitize the user input instead of performing direct string concatenation.", "parent_source": "community", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "dangerous-seq-run", "message": "Found dynamic content used for the external process. This is dangerous if arbitrary data can reach this function call because it allows a malicious actor to execute commands. Ensure your variables are not controlled by users or sufficiently sanitized.", "parent_source": "community", "severity": "`ERROR`", "languages": "Scala"}, {"identifier": "rsa-padding-set", "message": "Usage of RSA without OAEP (Optimal Asymmetric Encryption Padding) may weaken encryption. This could lead to sensitive data exposure. Instead, use RSA with `OAEPWithMD5AndMGF1Padding` instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "tainted-sql-string", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.", "parent_source": "community", "severity": "`ERROR`", "languages": "Scala"}, {"identifier": "scalaj-http-ssrf", "message": "A parameter being passed directly into `Http` most likely lead to SSRF. This could allow an attacker to send data to their own server, potentially exposing sensitive data sent with this request. They could also probe internal servers or other resources that the server runnig this code can access. Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode the correct host.", "parent_source": "community", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala-dangerous-process-run", "message": "Found dynamic content used for the external process. This is dangerous if arbitrary data can reach this function call because it allows a malicious actor to execute commands. Use `Seq(...)` for dynamically generated commands.", "parent_source": "community", "severity": "`ERROR`", "languages": "Scala"}, {"identifier": "sax-dtd-enabled", "message": "XML processor being instantiated without calling the `setFeature` functions that are generally used for disabling entity processing. User controlled data in XML Parsers can result in XML Internal Entity Processing vulnerabilities like the disclosure of confidential data, denial of service, Server Side Request Forgery (SSRF), port scanning. Make sure to disable entity processing functionality.", "parent_source": "community", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "insecure-random", "message": "Flags the use of a predictable random value from `scala.util.Random`. This can lead to vulnerabilities when used in security contexts, such as in a CSRF token, password reset token, or any other secret value. To fix this, use java.security.SecureRandom instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scalajs-eval", "message": "`eval()` function evaluates JavaScript code represented as a string. Executing JavaScript from a string is an enormous security risk. It is far too easy for a bad actor to run arbitrary code when you use `eval()`. Do not use eval(). Alternatively: Ensure evaluated content is not definable by external sources. If it\u2019s not possible, strip everything except alphanumeric characters from an input provided for the command string and arguments.", "parent_source": "community", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "documentbuilder-dtd-enabled", "message": "Document Builder being instantiated without calling the `setFeature` functions that are generally used for disabling entity processing. User controlled data in XML Document builder can result in XML Internal Entity Processing vulnerabilities like the disclosure of confidential data, denial of service, Server Side Request Forgery (SSRF), port scanning. Make sure to disable entity processing functionality.", "parent_source": "community", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "xmlinputfactory-dtd-enabled", "message": "XMLInputFactory being instantiated without calling the setProperty functions that are generally used for disabling entity processing. User controlled data in XML Document builder can result in XML Internal Entity Processing vulnerabilities like the disclosure of confidential data, denial of service, Server Side Request Forgery (SSRF), port scanning. Make sure to disable entity processing functionality.", "parent_source": "community", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "io-source-ssrf", "message": "A parameter being passed directly into `fromURL` most likely lead to SSRF. This could allow an attacker to send data to their own server, potentially exposing sensitive data sent with this request. They could also probe internal servers or other resources that the server runnig this code can access. Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode the correct host.", "parent_source": "community", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "dangerous-shell-run", "message": "Found dynamic content used for the external process. This is dangerous if arbitrary data can reach this function call because it allows a malicious actor to execute commands. Ensure your variables are not controlled by users or sufficiently sanitized.", "parent_source": "community", "severity": "`ERROR`", "languages": "Scala"}, {"identifier": "scalac-debug", "message": "Scala applications built with `debug` set to true in production may leak debug information to attackers. Debug mode also affects performance and reliability. Remove it from configuration.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "dangerous-execution", "message": "Detected non-static script inside otto VM. Audit the input to 'VM.Run'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code.", "parent_source": "community", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "tainted-sql-string", "message": "Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as Sequelize which will protect your queries.", "parent_source": "community", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "database-sqli", "message": "Detected SQL statement that is tainted by `$EVENT` object. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use prepared statements with the 'Prepare' and 'PrepareContext' calls.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "hardcoded-jwt-key", "message": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "jwt-go-none-algorithm", "message": "Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.", "parent_source": "community", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "jwt-go-parse-unverified", "message": "Detected the decoding of a JWT token without a verify step. Don't use `ParseUnverified` unless you know what you're doing This method parses the token but doesn't validate the signature. It's only ever useful in cases where you know the signature is valid (because it has been checked previously in the stack) and you want to extract values from it.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "gorm-dangerous-method-usage", "message": "Detected usage of dangerous method $METHOD which does not escape inputs (see link in references). If the argument is user-controlled, this can lead to SQL injection. When using $METHOD function, do not trust user-submitted data and only allow approved list of input (possibly, use an allowlist approach).", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "channel-guarded-with-mutex", "message": "Detected a channel guarded with a mutex. Channels already have an internal mutex, so this is unnecessary. Remove the mutex. See https://hackmongo.com/page/golang-antipatterns/#guarded-channel for more information.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "hidden-goroutine", "message": "Detected a hidden goroutine. Function invocations are expected to synchronous, and this function will execute asynchronously because all it does is call a goroutine. Instead, remove the internal goroutine and call the function using 'go'.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "useless-if-conditional", "message": "Detected an if block that checks for the same condition on both branches (`$X`). The second condition check is useless as it is the same as the first, and therefore can be removed from the code,", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "useless-if-body", "message": "Detected identical statements in the if body and the else body of an if-statement. This will lead to the same code being executed no matter what the if-expression evaluates to. Instead, remove the if statement.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "use-filepath-join", "message": "`path.Join(...)` always joins using a forward slash. This may cause issues on Windows or other systems using a different delimiter. Use `filepath.Join(...)` instead which uses OS-specific path separators.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "eqeq-is-bad", "message": "Detected useless comparison operation `$X == $X` or `$X != $X`. This will always return 'True' or 'False' and therefore is not necessary. Instead, remove this comparison operation or use another comparison expression that is not deterministic.", "parent_source": "community", "severity": "`INFO`", "languages": "Go"}, {"identifier": "hardcoded-eq-true-or-false", "message": "Detected useless if statement. 'if (True)' and 'if (False)' always result in the same behavior, and therefore is not necessary in the code. Remove the 'if (False)' expression completely or just the 'if (True)' comparison depending on which expression is in the code.", "parent_source": "community", "severity": "`INFO`", "languages": "Go"}, {"identifier": "exported_loop_pointer", "message": "`$VALUE` is a loop pointer that may be exported from the loop. This pointer is shared between loop iterations, so the exported reference will always point to the last loop value, which is likely unintentional. To fix, copy the pointer to a new pointer within the loop.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "incorrect-default-permission", "message": "Detected file permissions that are set to more than `0600` (user/owner can read and write). Setting file permissions to higher than `0600` is most likely unnecessary and violates the principle of least privilege. Instead, set permissions to be `0600` or less for os.Chmod, os.Mkdir, os.OpenFile, os.MkdirAll, and ioutil.WriteFile", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "integer-overflow-int16", "message": "Detected conversion of the result of a strconv.Atoi command to an int16. This could lead to an integer overflow, which could possibly result in unexpected behavior and even privilege escalation. Instead, use `strconv.ParseInt`.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "integer-overflow-int32", "message": "Detected conversion of the result of a strconv.Atoi command to an int32. This could lead to an integer overflow, which could possibly result in unexpected behavior and even privilege escalation. Instead, use `strconv.ParseInt`.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "potential-dos-via-decompression-bomb", "message": "Detected a possible denial-of-service via a zip bomb attack. By limiting the max bytes read, you can mitigate this attack. `io.CopyN()` can specify a size. Refer to https://bomb.codes/ to learn more about this attack and other ways to mitigate it.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "path-traversal-inside-zip-extraction", "message": "File traversal when extracting zip archive", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "filepath-clean-misuse", "message": "`Clean` is not intended to sanitize against path traversal attacks. This function is for finding the shortest path name equivalent to the given input. Using `Clean` to sanitize file reads may expose this application to path traversal attacks, where an attacker could access arbitrary files on the server. To fix this easily, write this: `filepath.FromSlash(path.Clean(\"/\"+strings.Trim(req.URL.Path, \"/\")))` However, a better solution is using the `SecureJoin` function in the package `filepath-securejoin`. See https://pkg.go.dev/github.com/cyphar/filepath-securejoin#section-readme.", "parent_source": "community", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "bad-tmp-file-creation", "message": "File creation in shared tmp directory without using ioutil.Tempfile", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "dangerous-syscall-exec", "message": "Detected non-static command inside Exec. Audit the input to 'syscall.Exec'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code.", "parent_source": "community", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "reflect-makefunc", "message": "'reflect.MakeFunc' detected. This will sidestep protections that are normally afforded by Go's type system. Audit this call and be sure that user input cannot be used to affect the code generated by MakeFunc; otherwise, you will have a serious security vulnerability.", "parent_source": "community", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "dangerous-command-write", "message": "Detected non-static command inside Write. Audit the input to '$CW.Write'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code.", "parent_source": "community", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "dangerous-exec-command", "message": "Detected non-static command inside Command. Audit the input to 'exec.Command'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code.", "parent_source": "community", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "unsafe-reflect-by-name", "message": "If an attacker can supply values that the application then uses to determine which method or field to invoke, the potential exists for the attacker to create control flow paths through the application that were not intended by the application developers. This attack vector may allow the attacker to bypass authentication or access control checks or otherwise cause the application to behave in an unexpected manner.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "md5-used-as-password", "message": "It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as bcrypt. You can use the `golang.org/x/crypto/bcrypt` package.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "use-of-unsafe-block", "message": "Using the unsafe package in Go gives you low-level memory management and many of the strengths of the C language, but also steps around the type safety of Go and can lead to buffer overflows and possible arbitrary code execution by an attacker. Only use this package if you absolutely know what you're doing.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "dangerous-exec-cmd", "message": "Detected non-static command inside exec.Cmd. Audit the input to 'exec.Cmd'. If unverified user data can reach this call site, this is a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary code.", "parent_source": "community", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "parsing-external-entities-enabled", "message": "Detected enabling of \"XMLParseNoEnt\", which allows parsing of external entities and can lead to XXE if user controlled data is parsed by the library. Instead, do not enable \"XMLParseNoEnt\" or be sure to adequately sanitize user-controlled data when it is being parsed by this library.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "pg-orm-sqli", "message": "Detected string concatenation with a non-literal variable in a go-pg ORM SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, do not use strings concatenated with user-controlled input. Instead, use parameterized statements.", "parent_source": "community", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "pg-sqli", "message": "Detected string concatenation with a non-literal variable in a go-pg SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries instead of string concatenation. You can use parameterized queries like so: '(SELECT ? FROM table, data1)'", "parent_source": "community", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "gosql-sqli", "message": "Detected string concatenation with a non-literal variable in a \"database/sql\" Go SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries or prepared statements instead. You can use prepared statements with the 'Prepare' and 'PrepareContext' calls.", "parent_source": "community", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "pgx-sqli", "message": "Detected string concatenation with a non-literal variable in a pgx Go SQL statement. This could lead to SQL injection if the variable is user-controlled and not properly sanitized. In order to prevent SQL injection, use parameterized queries instead. You can use parameterized queries like so: (`SELECT $1 FROM table`, `data1)", "parent_source": "community", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "unescaped-data-in-htmlattr", "message": "Found a formatted template string passed to 'template. HTMLAttr()'. 'template.HTMLAttr()' does not escape contents. Be absolutely sure there is no user-controlled data in this template or validate and sanitize the data before passing it into the template.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "unescaped-data-in-url", "message": "Found a formatted template string passed to 'template.URL()'. 'template.URL()' does not escape contents, and this could result in XSS (cross-site scripting) and therefore confidential data being stolen. Sanitize data coming into this function or make sure that no user-controlled input is coming into the function.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "unescaped-data-in-js", "message": "Found a formatted template string passed to 'template.JS()'. 'template.JS()' does not escape contents. Be absolutely sure there is no user-controlled data in this template.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "dynamic-httptrace-clienttrace", "message": "Detected a potentially dynamic ClientTrace. This occurred because semgrep could not find a static definition for '$TRACE'. Dynamic ClientTraces are dangerous because they deserialize function code to run when certain Request events occur, which could lead to code being run without your knowledge. Ensure that your ClientTrace is statically defined.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "use-tls", "message": "Found an HTTP server without TLS. Use 'http.ListenAndServeTLS' instead. See https://golang.org/pkg/net/http/#ListenAndServeTLS for more information.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "cookie-missing-httponly", "message": "A session cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie which mitigates XSS attacks. Set the 'HttpOnly' flag by setting 'HttpOnly' to 'true' in the Cookie.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "pprof-debug-exposure", "message": "The profiling 'pprof' endpoint is automatically exposed on /debug/pprof. This could leak information about the server. Instead, use `import \"net/http/pprof\"`. See https://www.farsightsecurity.com/blog/txt-record/go-remote-profiling-20161028/ for more information and mitigation.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "formatted-template-string", "message": "Found a formatted template string passed to 'template.HTML()'. 'template.HTML()' does not escape contents. Be absolutely sure there is no user-controlled data in this template. If user data can reach this template, you may have a XSS vulnerability.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "fs-directory-listing", "message": "Detected usage of 'http.FileServer' as handler: this allows directory listing and an attacker could navigate through directories looking for sensitive files. Be sure to disable directory listing or restrict access to specific directories/files.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "cookie-missing-secure", "message": "A session cookie was detected without setting the 'Secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'Secure' flag by setting 'Secure' to 'true' in the Options struct.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "avoid-bind-to-all-interfaces", "message": "Detected a network listener listening on 0.0.0.0 or an empty string. This could unexpectedly expose the server publicly as it binds to all available interfaces. Instead, specify another IP address that is not 0.0.0.0 nor the empty string.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "wip-xss-using-responsewriter-and-printf", "message": "Found data going from url query parameters into formatted data written to ResponseWriter. This could be XSS and should not be done. If you must do this, ensure your data is sanitized or escaped.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "string-formatted-query", "message": "String-formatted SQL query detected. This could lead to SQL injection if the string is not sanitized properly. Audit this call to ensure the SQL is not manipulable by external data.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "no-fprintf-to-responsewriter", "message": "Detected 'Fprintf' or similar writing to 'http.ResponseWriter'. This bypasses HTML escaping that prevents cross-site scripting vulnerabilities. Instead, use the 'html/template' package to render data to users.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "no-printf-in-responsewriter", "message": "Detected 'printf' or similar in 'http.ResponseWriter.write()'. This bypasses HTML escaping that prevents cross-site scripting vulnerabilities. Instead, use the 'html/template' package to render data to users.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "no-interpolation-js-template-string", "message": "Detected template variable interpolation in a JavaScript template string. This is potentially vulnerable to cross-site scripting (XSS) attacks because a malicious actor has control over JavaScript but without the need to use escaped characters. Instead, obtain this variable outside of the template string and ensure your template is properly escaped.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "unsafe-template-type", "message": "Semgrep could not determine that the argument to 'template.HTML()' is a constant. 'template.HTML()' and similar does not escape contents. Be absolutely sure there is no user-controlled data in this template. If user data can reach this template, you may have a XSS vulnerability. Instead, do not use this function and use 'template.Execute()'.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "no-direct-write-to-responsewriter", "message": "Detected directly writing or similar in 'http.ResponseWriter.write()'. This bypasses HTML escaping that prevents cross-site scripting vulnerabilities. Instead, use the 'html/template' package and render data using 'template.Execute()'.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "no-io-writestring-to-responsewriter", "message": "Detected 'io.WriteString()' writing directly to 'http.ResponseWriter'. This bypasses HTML escaping that prevents cross-site scripting vulnerabilities. Instead, use the 'html/template' package to render data to users.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "import-text-template", "message": "When working with web applications that involve rendering user-generated  content, it's important to properly escape any HTML content to prevent  Cross-Site Scripting (XSS) attacks. In Go, the `text/template` package does  not automatically escape HTML content, which can leave your application  vulnerable to these types of attacks. To mitigate this risk, it's  recommended to use the `html/template` package instead, which provides  built-in functionality for HTML escaping. By using `html/template` to render  your HTML content, you can help to ensure that your web application is more  secure and less susceptible to XSS vulnerabilities.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "no-interpolation-in-tag", "message": "Detected template variable interpolation in an HTML tag. This is potentially vulnerable to cross-site scripting (XSS) attacks because a malicious actor has control over HTML but without the need to use escaped characters. Use explicit tags instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "use-of-md5", "message": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "use-of-sha1", "message": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "use-of-DES", "message": "Detected DES cipher algorithm which is insecure. The algorithm is considered weak and has been deprecated. Use AES instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "use-of-rc4", "message": "Detected RC4 cipher algorithm which is insecure. The algorithm has many known vulnerabilities. Use AES instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "math-random-used", "message": "Do not use `math/rand`. Use `crypto/rand` instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "use-of-weak-rsa-key", "message": "RSA keys should be at least 2048 bits", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "ssl-v3-is-insecure", "message": "SSLv3 is insecure because it has known vulnerabilities. Starting with go1.14, SSLv3 will be removed. Instead, use 'tls.VersionTLS13'.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "insecure-module-used", "message": "The package `net/http/cgi` is on the import blocklist.  The package is vulnerable to httpoxy attacks (CVE-2015-5386). It is recommended to use `net/http` or a web framework to build a web application instead.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "tls-with-insecure-cipher", "message": "Detected an insecure CipherSuite via the 'tls' module. This suite is considered weak. Use the function 'tls.CipherSuites()' to get a list of good cipher suites. See https://golang.org/pkg/crypto/tls/#InsecureCipherSuites for why and what other cipher suites to use.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "missing-ssl-minversion", "message": "`MinVersion` is missing from this TLS configuration.  By default, TLS 1.2 is currently used as the minimum when acting as a client, and TLS 1.0 when acting as a server. General purpose web applications should default to TLS 1.3 with all other protocols disabled.  Only where it is known that a web server must support legacy clients with unsupported an insecure browsers (such as Internet Explorer 10), it may be necessary to enable TLS 1.0 to provide support. Add `MinVersion: tls.VersionTLS13' to the TLS configuration to bump the minimum version to TLS 1.3.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "avoid-ssh-insecure-ignore-host-key", "message": "Disabled host key verification detected. This allows man-in-the-middle attacks. Use the 'golang.org/x/crypto/ssh/knownhosts' package to do host key verification. See https://skarlso.github.io/2019/02/17/go-ssh-with-host-key-verification/ to learn more about the problem and how to fix it.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "raw-html-format", "message": "Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. Use the `html/template` package which will safely render HTML instead, or inspect that the HTML is rendered safely.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "tainted-sql-string", "message": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`db.Query(\"SELECT * FROM t WHERE id = ?\", id)`) or a safe library.", "parent_source": "community", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "tainted-url-host", "message": "A request was found to be crafted from user-input `$REQUEST`. This can lead to Server-Side Request Forgery (SSRF) vulnerabilities, potentially exposing sensitive data. It is recommend where possible to not allow user-input to craft the base request, but to be treated as part of the path or query parameter. When user-input is necessary to craft the request, it is recommended to follow OWASP best practices to prevent abuse, including using an allowlist.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "session-cookie-missing-secure", "message": "A session cookie was detected without setting the 'Secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'Secure' flag by setting 'Secure' to 'true' in the Options struct.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "session-cookie-missing-httponly", "message": "A session cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie which mitigates XSS attacks. Set the 'HttpOnly' flag by setting 'HttpOnly' to 'true' in the Options struct.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "websocket-missing-origin-check", "message": "The Origin header in the HTTP WebSocket handshake is used to guarantee that the connection accepted by the WebSocket is from a trusted origin domain. Failure to enforce can lead to Cross Site Request Forgery (CSRF). As per \"gorilla/websocket\" documentation: \"A CheckOrigin function should carefully validate the request origin to prevent cross-site request forgery.\"", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "handler-assignment-from-multiple-sources", "message": "Variable $VAR is assigned from two different sources: '$Y' and '$R'. Make sure this is intended, as this could cause logic bugs if they are treated as they are the same object.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "grpc-server-insecure-connection", "message": "Found an insecure gRPC server without 'grpc.Creds()' or options with credentials. This allows for a connection without encryption to this server. A malicious attacker could tamper with the gRPC message, which could compromise the machine. Include credentials derived from an SSL certificate in order to create a secure gRPC connection. You can create credentials using 'credentials.NewServerTLSFromFile(\"cert.pem\", \"cert.key\")'.", "parent_source": "community", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "grpc-client-insecure-connection", "message": "Found an insecure gRPC connection using 'grpc.WithInsecure()'. This creates a connection without encryption to a gRPC server. A malicious attacker could tamper with the gRPC message, which could compromise the machine. Instead, establish a secure connection with an SSL certificate using the 'grpc.WithTransportCredentials()' function. You can create a create credentials using a 'tls.Config{}' struct with 'credentials.NewTLS()'. The final fix looks like this: 'grpc.WithTransportCredentials(credentials.NewTLS(<config>))'.", "parent_source": "community", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "go-insecure-templates", "message": "usage of insecure template types. They are documented as a security risk. See https://golang.org/pkg/html/template/#HTML.", "parent_source": "community", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "go-ssti", "message": "A server-side template injection occurs when an attacker is able to use native template syntax to inject a malicious payload into a template, which is then executed server-side. When using \"html/template\" always check that user inputs are validated and sanitized before included within the template.", "parent_source": "community", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "python_django_rule-django-extra-used", "message": "SQL Injection is a critical vulnerability that can lead to data or system compromise. By\ndynamically generating SQL query strings, user input may be able to influence the logic of\nthe SQL statement. This could lead to an adversary accessing information they should\nnot have access to, or in some circumstances, being able to execute OS functionality or code.\n\nReplace all dynamically generated SQL queries with parameterized queries. In situations where\ndynamic queries must be created, never use direct user input, but instead use a map or\ndictionary of valid values and resolve them using a user supplied key.\n\nFor example, some database drivers do not allow parameterized queries for `>` or `<` comparison\noperators. In these cases, do not use a user supplied `>` or `<` value, but rather have the\nuser\nsupply a `gt` or `lt` value. The alphabetical values are then used to look up the `>` and `<`\nvalues to be used in the construction of the dynamic query. The same goes for other queries\nwhere\ncolumn or table names are required but cannot be parameterized.\n\nThe `QuerySet.extra` API method will be deprecated as it a source of SQL Injection\nvulnerabilities and other problems. This method is especially risky as callers\nwill need to do their own escaping of any parameters that come from user-supplied\ninformation.\n\nTo remediate this issue, do not use `extra` but use other `QuerySet` methods to achieve\nthe same goals. If for some reason this is not feasible, consider using the `RawSQL` method\nand making sure that all arguments, including user-supplied ones, are only used in\n`params`\n\n\nWhile not recommended due to [potential SQL\nInjection](https://docs.djangoproject.com/en/4.2/ref/models/expressions/#raw-sql-expressions),\nbelow is an example using `RawSQL`,\npassing in user-supplied data as a `param` which will escape the input:\n```\n# If dealing with integer based user input, restrict the values to integers only using the\n# path configuration: path('<int:user_supplied_id>/someview/', views.some_view,\nname='someview'),\n\n# views.py\ndef some_view(request, user_supplied_id):\n  # Never use string interpolation in the `sql` parameter.\n  # Never quote the `%s` string format such as `... where id='%s'` as this could lead to SQL\nInjection.\n  # Pass the user supplied data only in the `params` parameter.\n  for obj in DBObject.objects.all().annotate(\n      val=RawSQL(sql=\"select id from some_secondary_table where id=%s\",\nparams=[user_supplied_id])):\n    # Work with the results from the query\n    # ...\n```\n\nFor more information on QuerySet see:\n- https://docs.djangoproject.com/en/4.2/ref/models/querysets/#queryset-api\n\nFor more information on SQL Injection see OWASP:\n- https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_django_rule-django-rawsql-used", "message": "SQL Injection is a critical vulnerability that can lead to data or system compromise. By\ndynamically generating SQL query strings, user input may be able to influence the logic of\nthe SQL statement. This could lead to an adversary accessing information they should\nnot have access to, or in some circumstances, being able to execute OS functionality or code.\n\nReplace all dynamically generated SQL queries with parameterized queries. In situations where\ndynamic queries must be created, never use direct user input, but instead use a map or\ndictionary of valid values and resolve them using a user supplied key.\n\nFor example, some database drivers do not allow parameterized queries for `>` or `<` comparison\noperators. In these cases, do not use a user supplied `>` or `<` value, but rather have the\nuser\nsupply a `gt` or `lt` value. The alphabetical values are then used to look up the `>` and `<`\nvalues to be used in the construction of the dynamic query. The same goes for other queries\nwhere\ncolumn or table names are required but cannot be parameterized.\n\nTo remediate this issue, do not use `raw` or `RawSQL` but use other `QuerySet` methods to\nachieve\nthe same goals. If for some reason this is not feasible, ensure calls including user-supplied\ndata\npass it in to the `params` parameter of the `RawSQL` method.\n\nWhile not recommended due to [potential SQL\nInjection](https://docs.djangoproject.com/en/4.2/ref/models/expressions/#raw-sql-expressions),\nbelow is an example using `RawSQL`,\npassing in user-supplied data as a `param` which will escape the input:\n```\n# If dealing with integer based user input, restrict the values to integers only using the\n# path configuration: path('<int:user_supplied_id>/someview/', views.some_view,\nname='someview'),\n\n# views.py\ndef some_view(request, user_supplied_id):\n  # Never use string interpolation in the `sql` parameter.\n  # Never quote the `%s` string format such as `... where id='%s'` as this could lead to SQL\nInjection.\n  # Pass the user supplied data only in the `params` parameter.\n  for obj in DBObject.objects.all().annotate(\n      val=RawSQL(sql=\"select id from some_secondary_table where id=%s\",\nparams=[user_supplied_id])):\n    # Work with the results from the query\n    # ...\n```\n\nFor more information on QuerySet see:\n- https://docs.djangoproject.com/en/4.2/ref/models/querysets/#queryset-api\n\nFor more information on SQL Injection see OWASP:\n- https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "python_xml_rule-expatreader", "message": "The application was found using the `xml.sax.expatreader` package for processing XML. Python's\ndefault XML processors suffer from various XML parsing vulnerabilities\nand care must be taken when handling XML data. Additionally, depending on the\nversion of Python, more critical vulnerabilities such as eXternal XML Entity\ninjection maybe exploitable.\n\nThe `xml.sax` package suffers from the following security risks as of Python 3.7.1:\n* Billion laughs / exponential entity expansion - May allow an adversary to cause\n  a Denial of Service (DoS) against the application parsing arbitrary XML.\n* Quadratic blowup entity expansion - Similar to above, but requires a larger input\n  to cause the Denial of Service.\n\nTo remediate the above issues, consider using the\n[defusedxml](https://pypi.org/project/defusedxml/)\nlibrary when processing untrusted XML.\n\nExample parsing an XML document using defusedxml:\n```\nfrom defusedxml.ElementTree import parse\n\n# Parse the inventory.xml file\net = parse('inventory.xml')\n# Get the root element\nroot = et.getroot()\n# Work with the root element\n# ...\n```\n\nFor more information on the various XML parsers and their vulnerabilities please see:\n- https://docs.python.org/3/library/xml.html#xml-vulnerabilities\n\nFor more information on XML security see OWASP's guide:\n- https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#python\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_xml_rule-element", "message": "The application was found using the `xml.etree` package for processing XML.\nPythons default xml processors suffer from various XML parsing vulnerabilities\nand care must be taken when handling XML data. Additionally, depending on the\nversion of Python, more critical vulnerabilities such as eXternal XML Entity\ninjection maybe exploitable.\n\nThe `etree` package suffers from the following security risks as of Python 3.7.1:\n* Billion laughs / exponential entity expansion - May allow an adversary to cause\n  a Denial of Service (DoS) against the application parsing arbitrary XML.\n* Quadratic blowup entity expansion - Similar to above, but requires a larger input\n  to cause the Denial of Service.\n\nTo remediate the above issues, consider using the\n[defusedxml](https://pypi.org/project/defusedxml/)\nlibrary when processing untrusted XML.\n\nExample parsing an XML document using defusedxml:\n```\nfrom defusedxml.ElementTree import parse\n\n# Parse the inventory.xml file\net = parse('inventory.xml')\n# Get the root element\nroot = et.getroot()\n# Work with the root element\n# ...\n```\n\nFor more information on the various XML parsers and their vulnerabilities please see:\n- https://docs.python.org/3/library/xml.html#xml-vulnerabilities\n\nFor more information on XML security see OWASP's guide:\n- https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#python\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_xml_rule-pulldom", "message": "The application was found using the `xml.dom.pulldom` package for processing XML. Python's\ndefault XML processors suffer from various XML parsing vulnerabilities\nand care must be taken when handling XML data. Additionally, depending on the\nversion of Python, more critical vulnerabilities such as eXternal XML Entity\ninjection maybe exploitable.\n\nThe `xml.dom.pulldom` package suffers from the following security risks as of Python 3.7.1:\n* Billion laughs / exponential entity expansion - May allow an adversary to cause\n  a Denial of Service (DoS) against the application parsing arbitrary XML.\n* Quadratic blowup entity expansion - Similar to above, but requires a larger input\n  to cause the Denial of Service.\n\nTo remediate the above issues, consider using the\n[defusedxml](https://pypi.org/project/defusedxml/)\nlibrary when processing untrusted XML.\n\nExample parsing an XML document using defusedxml:\n```\nfrom defusedxml.ElementTree import parse\n\n# Parse the inventory.xml file\net = parse('inventory.xml')\n# Get the root element\nroot = et.getroot()\n# Work with the root element\n# ...\n```\n\nFor more information on the various XML parsers and their vulnerabilities please see:\n- https://docs.python.org/3/library/xml.html#xml-vulnerabilities\n\nFor more information on XML security see OWASP's guide:\n- https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#python\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_xml_rule-expatbuilder", "message": "The application was found using the `xml.dom.expatbuilder` which calls the `xml.dom.minidom`\npackage for processing XML. Python's default XML processors suffer from various XML parsing\nvulnerabilities\nand care must be taken when handling XML data. Additionally, depending on the\nversion of Python, more critical vulnerabilities such as eXternal XML Entity\ninjection maybe exploitable.\n\nThe `xml.dom.minidom` package suffers from the following security risks as of Python 3.7.1:\n* Billion laughs / exponential entity expansion - May allow an adversary to cause\n  a Denial of Service (DoS) against the application parsing arbitrary XML.\n* Quadratic blowup entity expansion - Similar to above, but requires a larger input\n  to cause the Denial of Service.\n\nTo remediate the above issues, consider using the\n[defusedxml](https://pypi.org/project/defusedxml/)\nlibrary when processing untrusted XML.\n\nExample parsing an XML document using defusedxml:\n```\nfrom defusedxml.ElementTree import parse\n\n# Parse the inventory.xml file\net = parse('inventory.xml')\n# Get the root element\nroot = et.getroot()\n# Work with the root element\n# ...\n```\n\nFor more information on the various XML parsers and their vulnerabilities please see:\n- https://docs.python.org/3/library/xml.html#xml-vulnerabilities\n\nFor more information on XML security see OWASP's guide:\n- https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#python\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_xml_rule-minidom", "message": "The application was found using the `xml.dom.minidom` package for processing XML. Python's\ndefault XML processors suffer from various XML parsing vulnerabilities\nand care must be taken when handling XML data. Additionally, depending on the\nversion of Python, more critical vulnerabilities such as eXternal XML Entity\ninjection maybe exploitable.\n\nThe `xml.dom.minidom` package suffers from the following security risks as of Python 3.7.1:\n* Billion laughs / exponential entity expansion - May allow an adversary to cause\n  a Denial of Service (DoS) against the application parsing arbitrary XML.\n* Quadratic blowup entity expansion - Similar to above, but requires a larger input\n  to cause the Denial of Service.\n\nTo remediate the above issues, consider using the\n[defusedxml](https://pypi.org/project/defusedxml/)\nlibrary when processing untrusted XML.\n\nExample parsing an XML document using defusedxml:\n```\nfrom defusedxml.ElementTree import parse\n\n# Parse the inventory.xml file\net = parse('inventory.xml')\n# Get the root element\nroot = et.getroot()\n# Work with the root element\n# ...\n```\n\nFor more information on the various XML parsers and their vulnerabilities please see:\n- https://docs.python.org/3/library/xml.html#xml-vulnerabilities\n\nFor more information on XML security see OWASP's guide:\n- https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#python\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_xml_rule-sax", "message": "The application was found using the `xml.sax` package for processing XML.\nPython's default XML processors suffer from various XML parsing vulnerabilities\nand care must be taken when handling XML data. Additionally, depending on the\nversion of Python, more critical vulnerabilities such as eXternal XML Entity\ninjection maybe exploitable.\n\nThe `xml.sax` package suffers from the following security risks as of Python 3.7.1:\n* Billion laughs / exponential entity expansion - May allow an adversary to cause\n  a Denial of Service (DoS) against the application parsing arbitrary XML.\n* Quadratic blowup entity expansion - Similar to above, but requires a larger input\n  to cause the Denial of Service.\n\nTo remediate the above issues, consider using the\n[defusedxml](https://pypi.org/project/defusedxml/)\nlibrary when processing untrusted XML.\n\nExample parsing an XML document using defusedxml:\n```\nfrom defusedxml.ElementTree import parse\n\n# Parse the inventory.xml file\net = parse('inventory.xml')\n# Get the root element\nroot = et.getroot()\n# Work with the root element\n# ...\n```\n\nFor more information on the various XML parsers and their vulnerabilities please see:\n- https://docs.python.org/3/library/xml.html#xml-vulnerabilities\n\nFor more information on XML security see OWASP's guide:\n- https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#python\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_xml_rule-etree", "message": "The application was found using the `lxml.etree` package for processing XML.\nPython's default XML processors suffer from various XML parsing vulnerabilities\nand care must be taken when handling XML data. Additionally, depending on the\nversion of Python, more critical vulnerabilities such as eXternal XML Entity\ninjection maybe exploitable.\n\nThe `etree` package suffers from the following security risks as of Python 3.7.1:\n* Billion laughs / exponential entity expansion - May allow an adversary to cause\n  a Denial of Service (DoS) against the application parsing arbitrary XML.\n* Quadratic blowup entity expansion - Similar to above, but requires a larger input\n  to cause the Denial of Service.\n\nTo remediate the above issues, consider using the\n[defusedxml](https://pypi.org/project/defusedxml/)\nlibrary when processing untrusted XML.\n\nExample parsing an XML document using defusedxml:\n```\nfrom defusedxml.ElementTree import parse\n\n# Parse the inventory.xml file\net = parse('inventory.xml')\n# Get the root element\nroot = et.getroot()\n# Work with the root element\n# ...\n```\n\nFor more information on the various XML parsers and their vulnerabilities please see:\n- https://docs.python.org/3/library/xml.html#xml-vulnerabilities\n\nFor more information on XML security see OWASP's guide:\n- https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#python\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_xml_rule-celement", "message": "The application was found using the `xml.etree` package for processing XML.\nPythons default xml processors suffer from various XML parsing vulnerabilities\nand care must be taken when handling XML data. Additionally, depending on the\nversion of Python, more critical vulnerabilities such as eXternal XML Entity\ninjection maybe exploitable.\n\nThe `etree` package suffers from the following security risks as of Python 3.7.1:\n* Billion laughs / exponential entity expansion - May allow an adversary to cause\n  a Denial of Service (DoS) against the application parsing arbitrary XML.\n* Quadratic blowup entity expansion - Similar to above, but requires a larger input\n  to cause the Denial of Service.\n\nTo remediate the above issues, consider using the\n[defusedxml](https://pypi.org/project/defusedxml/)\nlibrary when processing untrusted XML.\n\nExample parsing an XML document using defusedxml:\n```\nfrom defusedxml.ElementTree import parse\n\n# Parse the inventory.xml file\net = parse('inventory.xml')\n# Get the root element\nroot = et.getroot()\n# Work with the root element\n# ...\n```\n\nFor more information on the various XML parsers and their vulnerabilities please see:\n- https://docs.python.org/3/library/xml.html#xml-vulnerabilities\n\nFor more information on XML security see OWASP's guide:\n- https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#python\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_escaping_rule-use-of-mako-templates", "message": "The application was found using mako templates without `default_filters` being passed to the\n`Template` or `TemplateLookup` constructors. If using in the context of HTML, this could lead\nto Cross-Site Scripting (XSS) attacks when rendering with\nuser-supplied input.\n\nUnfortunately, Jinja2 does not support context-aware escaping, meaning it is insufficient to\nprotect against\nXSS for the various web contexts. It is important to encode the data depending on the specific\ncontext\nit\nis used in. There are at least six context types:\n\n- Inside HTML tags `<div>context 1</div>`\n- Inside attributes: `<div class=\"context 2\"></div>`\n- Inside event attributes `<button onclick=\"context 3\">button</button>`\n- Inside script blocks: `<script>var x = \"context 4\"</script>`\n- Unsafe element HTML assignment: `element.innerHTML = \"context 5\"`\n- Inside URLs: `<iframe src=\"context 6\"></iframe><a href=\"context 6\">link</a>`\n\nScript blocks alone have multiple ways they need to be encoded. Extra care must be taken if\nuser input\nis ever output inside of script tags.\n\nUser input that is displayed within the application must be encoded, sanitized or validated\nto ensure it cannot be treated as HTML or executed as Javascript code. Care must also be\ntaken\nto not mix server-side templating with client-side templating, as the server-side templating\nwill\nnot encode things like {{ 7*7 }} which may execute client-side templating features.\n\nIt is _NOT_ advised to encode user input prior to inserting into a data store. The data will\nneed to be\nencoded depending on context of where it is output. It is much safer to force the displaying\nsystem to\nhandle the encoding and not attempt to guess how it should be encoded.\n\nTo handle different contexts, one approach would be to write custom mako filters. Below is\nan example\nthat escapes or encodes links and potentially malicious script, note this does not include\nother contexts\nsuch as CSS or attributes:\n```\n# filters.py module:\n\ndef escape_link(value):\n    bad_link = \"#JinjatmplZ\"\n    # Block any values that start with // as that could be used to inject\n    # links to third party pages see:\nhttps://en.wikipedia.org/wiki/Wikipedia:Protocol-relative_URL\n    if value.startswith('//'):\n        return bad_link\n\n    # Only allow relative links\n    # if you want to allow links that start with http or ws replace with below:\n    # if not value.startswith('/'): and not value.startswith('http') and not\nvalue.startswith('ws')\n    if not value.startswith('/'):\n        return bad_link\n\n    return value\n\n# Create a replacement table\njs_replacement = str.maketrans({\n    '\\0':    \"\\\\u0000\",\n    '\\t': \"\\\\t\",\n    '\\n': \"\\\\n\",\n    '\\v': \"\\\\u000b\",\n    '\\f': \"\\\\f`\",\n    '\\r': \"\\\\r\",\n    '\"':  \"\\\\u0022\",\n    '`':  \"\\\\u0060\",\n    '&':  \"\\\\u0026\",\n    '\\'': \"\\\\u0027\",\n    '+':  \"\\\\u002b\",\n    '/':  \"\\\\/\",\n    '<':  \"\\\\u003c\",\n    '>':  \"\\\\u003e\",\n    '\\\\': \"\\\\\\\\\",\n    '(': \"\\\\u0028\",\n    ')': \"\\\\u0029\",\n})\n\ndef escape_js(value):\n    # Escape the input for use in <script> context, USE WITH CAUTION\n    # It is strongly recommended to never pass user-supplied input to\n    # the JavaScript context.\n\n    # Translate any potential characters using our translation table\n    return value.translate(js_replacement)\n\n#####################################################################\n# main module:                                                      #\n#####################################################################\nfrom mako.template import Template\n# Define our template, note the calls to our custom filters depending\n# on context\ntemplate_text = \"\"\"\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <title>My Webpage</title>\n</head>\n<body>\n    <h1>My Webpage</h1>\n    ${html_context}\n    <a href=\"${link_context | escape_link}\">link</a>\n    <script>${script_context | escape_js}</script>\n</body>\n</html>\n\"\"\"\n# Load our template with default filters and our imported filters for\n# usage in template files\nt = Template(template_text,\n            # By default enable the html filter with 'h'\n            default_filters=['h'],\n            # Import our custom filters\n            imports=[\"from filters import escape_link, escape_js\"])\n\n# Render our template\nprint(t.render(html_context=\"<img src=x onerror=alert(1)>\",\n    link_context=\"/# onclick=alert(1)<script>alert(1)</script>\",\n    script_context=\"alert(1)<img src=x onerror=alert(1)>\",)\n)\n```\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_escaping_rule-django", "message": "Cross Site Scripting (XSS) is an attack which exploits a web application or system to treat\nuser input\nas markup or script code. It is important to encode the data depending on the specific context\nit\nis used in. There are at least six context types:\n\n- Inside HTML tags `<div>context 1</div>`\n- Inside attributes: `<div class=\"context 2\"></div>`\n- Inside event attributes `<button onclick=\"context 3\">button</button>`\n- Inside script blocks: `<script>var x = \"context 4\"</script>`\n- Unsafe element HTML assignment: `element.innerHTML = \"context 5\"`\n- Inside URLs: `<iframe src=\"context 6\"></iframe><a href=\"context 6\">link</a>`\n\nScript blocks alone have multiple ways they need to be encoded. Extra care must be taken if\nuser input\nis ever output inside of script tags.\n\nUser input that is displayed within the application must be encoded, sanitized or validated\nto ensure it cannot be treated as HTML or executed as Javascript code. Care must also be\ntaken\nto not mix server-side templating with client-side templating, as the server-side templating\nwill\nnot encode things like {{ 7*7 }} which may execute client-side templating features.\n\nIt is _NOT_ advised to encode user input prior to inserting into a data store. The data will\nneed to be\nencoded depending on context of where it is output. It is much safer to force the displaying\nsystem to\nhandle the encoding and not attempt to guess how it should be encoded.\n\nConsider using\n[format_html](https://docs.djangoproject.com/en/4.2/ref/utils/#django.utils.html.format_html)\ninstead of\nthe `django.utils.safestring` methods.\n\nExample using `format_html`:\n```\n# Use format_html to create an HTML link, using href as the parameter\n# which will be encoded automatically\nformat_html(\"<li><a href='{}'>Some Link</a></li>\", href)\n```\n\nFor more information on XSS see OWASP:\n- https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_escaping_rule-jinja2-autoescape-false", "message": "The application was found using Jinja2 `Environment` without autoescaping enabled. If using in\nthe context of HTML this could lead to Cross-Site Scripting (XSS) attacks when rendering with\nuser-supplied input.\n\nUnfortunately, Jinja2 does not support context-aware escaping, meaning it is insufficient to\nprotect against\nXSS for the various web contexts. It is important to encode the data depending on the specific\ncontext\nit\nis used in. There are at least six context types:\n\n- Inside HTML tags `<div>context 1</div>`\n- Inside attributes: `<div class=\"context 2\"></div>`\n- Inside event attributes `<button onclick=\"context 3\">button</button>`\n- Inside script blocks: `<script>var x = \"context 4\"</script>`\n- Unsafe element HTML assignment: `element.innerHTML = \"context 5\"`\n- Inside URLs: `<iframe src=\"context 6\"></iframe><a href=\"context 6\">link</a>`\n\nScript blocks alone have multiple ways they need to be encoded. Extra care must be taken if\nuser input\nis ever output inside of script tags.\n\nUser input that is displayed within the application must be encoded, sanitized or validated\nto ensure it cannot be treated as HTML or executed as Javascript code. Care must also be\ntaken\nto not mix server-side templating with client-side templating, as the server-side templating\nwill\nnot encode things like {{ 7*7 }} which may execute client-side templating features.\n\nIt is _NOT_ advised to encode user input prior to inserting into a data store. The data will\nneed to be\nencoded depending on context of where it is output. It is much safer to force the displaying\nsystem to\nhandle the encoding and not attempt to guess how it should be encoded.\n\nTo handle different contexts, one approach would be to write custom Jinja2 filters. Below is\nan example\nthat escapes or encodes links and potentially malicious script, note this does not include\nother contexts\nsuch as CSS or attributes:\n```\nfrom jinja2 import Environment, select_autoescape, FileSystemLoader\nfrom jinja2 import pass_eval_context\nfrom markupsafe import Markup, escape\n\n@pass_eval_context\ndef escape_link(eval_ctx, value):\n    bad_link = \"#JinjatmplZ\"\n    # Block any values that start with // as that could be used to inject\n    # links to third party pages see:\nhttps://en.wikipedia.org/wiki/Wikipedia:Protocol-relative_URL\n    if value.startswith('//'):\n        return bad_link\n\n    # Only allow relative links\n    # if you want to allow links that start with http or ws replace with below:\n    # if not value.startswith('/'): and not value.startswith('http') and not\nvalue.startswith('ws')\n    if not value.startswith('/'):\n        return bad_link\n\n    # Alternatively, you could only call escape if autoescape is true\n    # if eval_ctx.autoescape:\n    #    return escape(value)\n    # else\n    #    return value\n\n    return escape(value)\n\n# Create a replacement table\njs_replacement = str.maketrans({\n        '\\0':    \"\\\\u0000\",\n        '\\t': \"\\\\t\",\n        '\\n': \"\\\\n\",\n        '\\v': \"\\\\u000b\",\n        '\\f': \"\\\\f`\",\n        '\\r': \"\\\\r\",\n        '\"':  \"\\\\u0022\",\n        '`':  \"\\\\u0060\",\n        '&':  \"\\\\u0026\",\n        '\\'': \"\\\\u0027\",\n        '+':  \"\\\\u002b\",\n        '/':  \"\\\\/\",\n        '<':  \"\\\\u003c\",\n        '>':  \"\\\\u003e\",\n        '\\\\': \"\\\\\\\\\",\n        '(': \"\\\\u0028\",\n        ')': \"\\\\u0029\",\n    })\n\n@pass_eval_context\ndef escape_js(eval_ctx, value):\n    \"\"\"\n    Escape the input for use in <script> context, USE WITH CAUTION\n    It is strongly recommended to _never_ pass user-supplied input to\n    the JavaScript context. This may still be unsafe depending where\n    used, it does not consider characters used  in regular expressions\n    for example.\n    \"\"\"\n\n    #if eval_ctx.autoescape:\n    #    value = escape(value)\n    # Escape by default\n    value = escape(value)\n    # Translate any potential characters using our translation table\n    return value.translate(js_replacement)\n\n# Create our environment, setting autoescape to use the default\n# select_autoescape function\nenv = Environment(\n    loader=FileSystemLoader(os.getcwd()+\"/template\"),\n    autoescape=select_autoescape,\n)\n# Add an escape link filter to be used in our template\nenv.filters[\"escape_link\"] = escape_link\nenv.filters[\"escape_js\"] = escape_js\n# Load our template file\ntemplate = env.get_template(\"mytemplate.html\")\n# Render with different variables which call our filters\nprint(template.render(\n    html_context=\"<img src=x onerror=alert(1)>\",\n    link_context=\"/# onclick=alert(1)<script>alert(1)</script>\",\n    script_context=\"alert(1);alert`1`\",)\n)\n\n# Sample template:\n\"\"\"\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <title>My Webpage</title>\n</head>\n<body>\n    <h1>My Webpage</h1>\n    {{ html_context }}\n    <a href=\"{{ link_context | escape_link }}\">link</a>\n    <script>{{ script_context | escape_js }}</script>\n</body>\n</html>\n\"\"\"\n```\n\nFor more information on autoescape see:\n- https://jinja.palletsprojects.com/en/3.1.x/api/#autoescaping\n\nFor more information on XSS see OWASP:\n- https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_ftp_rule-ftplib", "message": "The application was found using an FTP library. As FTP does not provide encryption, it is\nstrongly recommended that any file transfers be done over a more secure transport such as\nSSH.\n\nThe [paramiko](https://www.paramiko.org/) library can be used with an SCP module to allow\nsecure file transfers.\n\nExample using `paramiko` SSH client and the `scp` module:\n```\nimport paramiko\nimport scp\n\n# Create an SSH client\nwith paramiko.SSHClient() as ssh:\n    # Load the system host keys so we can confirm the\n    # host we are connecting to is legitimate\n    ssh.load_system_host_keys('/home/appuser/.ssh/known_hosts')\n\n    # Connect to the remote host using our SSH private key\n    ssh.connect(hostname='example.org',\n                port=22,\n                username='appuser',\n                key_filename='/home/appuser/.ssh/private_key')\n\n    # Create an SCP client with the ssh transport and copy files\n    with scp.SCPClient(ssh.get_transport()) as secure_copy:\n        secure_copy.get('remote/test.file', 'local/test.file')\n        secure_copy.put('local/some.file', 'remote/some.file')\n```\n\nFor more information on the paramiko module see:\n- https://www.paramiko.org/\n\nFor more information on the scp module see:\n- https://github.com/jbardin/scp.py\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_telnet_rule-import-telnib", "message": "The application was found using a telnet library. As telnet does not provide encryption, it is\nstrongly recommended that communications use a more secure transport such as\nSSH.\n\nThe [paramiko](https://www.paramiko.org/) library can be used to initiate SSH connections.\n\nExample using `paramiko` SSH client:\n```\nimport paramiko\nimport scp\n\n# Create an SSH client\nwith paramiko.SSHClient() as ssh:\n    # Load the system host keys so we can confirm the\n    # host we are connecting to is legitimate\n    ssh.load_system_host_keys('/home/appuser/.ssh/known_hosts')\n\n    # Connect to the remote host using our SSH private key\n    ssh.connect(hostname='example.org',\n                port=22,\n                username='appuser',\n                key_filename='/home/appuser/.ssh/private_key')\n    # Work with the connection\n```\n\nFor more information on the paramiko module see:\n- https://www.paramiko.org/\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "python_file-permissions_rule-general-bad-permission", "message": "The application was found setting file permissions to overly permissive values. Consider\nusing the following values if the application user is the only process to access\nthe file:\n\n- 0400 - read only access to the file\n- 0200 - write only access to the file\n- 0600 - read/write access to the file\n\nExample creating a file with read/write permissions for the application user:\n```\n# Use octal values to set 0o600 (read/write access to the file) for the current\n# user\nos.chmod('somefile.txt', 0o600)\n```\n\nFor all other values please see:\nhttps://en.wikipedia.org/wiki/File-system_permissions#Numeric_notation\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_assert_rule-assert-used", "message": "The application was found using `assert` in non-test code. Usually reserved for debug and test\ncode, the `assert`\nfunction is commonly used to test conditions before continuing execution. However, enclosed\ncode will be removed\nwhen compiling Python code to optimized byte code. Depending on the assertion and subsequent\nlogic, this could\nlead to undefined behavior of the application or application crashes.\n\nTo remediate this issue, remove the `assert` calls. If necessary, replace them with either `if`\nconditions or\n`try/except` blocks.\n\nExample using `try/except` instead of `assert`:\n```\n# Below try/except is equal to the assert statement of:\n# assert user.is_authenticated(), \"user must be authenticated\"\ntry:\n    if not user.is_authenticated():\n        raise AuthError(\"user must be authenticated\")\nexcept AuthError as e:\n    # Handle error\n    # ...\n    # Return, do not continue processing\n    return\n```\n", "parent_source": "gitlab", "severity": "`INFO`", "languages": "Python"}, {"identifier": "python_exec_rule-start-process-partial-path", "message": "Starting a process with a partial executable path\n", "parent_source": "gitlab", "severity": "`INFO`", "languages": "Python"}, {"identifier": "python_exec_rule-paramiko-calls", "message": "Unverified SSL context detected. This will permit insecure connections without `verifyingSSL`\ncertificates. Use `ssl.create_default_context()` instead.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_exec_rule-subprocess-popen-shell-true", "message": "Found `subprocess` function `$FUNC` with `shell=True`. This is dangerous because this call will\nspawn the command using a shell process. Doing so propagates current shell settings and\nvariables,\nwhich makes it much easier for a malicious actor to execute commands. Use `shell=False`\ninstead.\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "python_exec_rule-os-popen2", "message": "Starting a process with a shell; seems safe, but may be changed in the future, consider\nrewriting without shell\n", "parent_source": "gitlab", "severity": "`INFO`", "languages": "Python"}, {"identifier": "python_exec_rule-linux-command-wildcard-injection", "message": "Detected use of the wildcard character in a system call that spawns a shell.This subjects the\nwildcard to normal shell expansion, which can have unintended consequencesif there exist any\nnon-standard file names. Consider a file named `-e sh script.sh`.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_exec_rule-import-subprocess", "message": "Consider possible security implications associated with subprocess module.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_exec_rule-os-path", "message": "Starting a process with a shell; seems safe, but may be changed in the future, consider\nrewriting without shell\n", "parent_source": "gitlab", "severity": "`INFO`", "languages": "Python"}, {"identifier": "python_exec_rule-exec-used", "message": "The application was found calling the `exec` function with a non-literal variable. If the\nvariable comes from user-supplied input, an adversary could compromise the entire system by\nexecuting arbitrary python code.\n\nTo remediate this issue, remove all calls to `exec` and consider alternative methods for\nexecuting\nthe necessary business logic. There is almost no safe method of calling `eval` with\nuser-supplied input.\n\nIf the application only needs to convert strings into objects, consider using `json.loads`.\nIn some cases `ast.literal_eval` is recommended, but this should be avoided as it can still\nsuffer from other issues such as the ability for malicious code to crash the python\ninterpreter or application.\n\nExample using `json.loads`` to load in arbitrary data to create data structures:\n```\n# User supplied data as a blob of JSON\nuser_supplied_data = \"\"\"{\"user\": \"test\", \"metadata\": [1,2,3]}\"\"\"\n# Load the JSON\nuser_object = json.loads(user_supplied_data)\n# Manually add protected properties _after_ loading, never before\nuser_object[\"is_admin\"] = False\n# Work with the object\n```\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_exec_rule-subprocess-call-array", "message": "subprocess call - check for execution of untrusted input\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_exec_rule-start-process-with-no-shell", "message": "Found dynamic content when spawning a process. This is dangerous if externaldata can reach this\nfunction call because it allows a malicious actor toexecute commands. Ensure no external data\nreaches here.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_exec_rule-subprocess-shell-TRUE", "message": "subprocess call - check for execution of untrusted input\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_exec_rule-subprocess-call", "message": "Python possesses many mechanisms to invoke an external executable. However,\ndoing so may present a security issue if appropriate care is not taken to\nsanitize any user provided or variable input. This plugin test is part of a\nfamily of tests built to check for process spawning and warn appropriately.\nSpecifically, this test looks for the spawning of a subprocess without the\nuse of a command shell. This type of subprocess invocation is not\nvulnerable to shell injection attacks, but care should still be taken to\nensure validity of input.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_exec_rule-start-process-path", "message": "Starting a process with a partial executable path\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "python_urlopen_rule-urllib-urlopen1", "message": "The application was found passing in a non-literal value to the `urllib` methods which issue\nrequests. `urllib` supports the `file://` scheme, which may allow an adversary who can control\nthe URL value to read arbitrary files on the file system.\n\nTo remediate this issue either hardcode the URLs being used in urllib or use the `requests`\nmodule instead.\n\nExample using the `requests` module to issue an HTTPS request:\n```\nimport requests\n# Issue a GET request to https://example.com with a timeout of 10 seconds\nresponse = requests.get('https://example.com', timeout=10)\n# Work with the response object\n# ...\n```\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_ssh_rule-ssl-nohost-key-verification", "message": "The application was found to ignore host keys. Host keys are important as\nthey provide assurance that the client can prove that the host is trusted.\nBy ignoring these host keys, it is impossible for the client to validate the\nconnection is to a trusted host.\n\nTo remediate this issue, remove the call to `set_missing_host_key_policy(...)` which\nsets the host key policy. Instead, load key files using either `load_system_host_keys`\nor `load_host_keys` to only allow known good hosts. By not setting a host key policy\nfor unknown hosts, `paramiko`'s default policy is to use `RejectPolicy`.\n\nExample configuration connecting to a known, trusted host, and not allowing connections\nto unknown hosts:\n```\nimport paramiko\n\n# Create an SSH client\nwith paramiko.SSHClient() as ssh:\n    # Load the system host keys so we can confirm the\n    # host we are connecting to is legitimate\n    ssh.load_system_host_keys('/home/appuser/.ssh/known_hosts')\n\n    # Connect to the remote host using our SSH private key\n    ssh.connect(hostname='example.org',\n                port=22,\n                username='appuser',\n                key_filename='/home/appuser/.ssh/private_key')\n```\n\nFor more information on `set_missing_host_key_policy` see:\n- https://docs.paramiko.org/en/stable/api/client.html#paramiko.client.SSHClient.set_missing_host_key_policy\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "python_ssl_rule-ssl-no-version", "message": "The application was found calling `ssl.wrap_socket` without a TLS protocol version specified.\nAdditionally, `ssl.wrap_socket` has been deprecated since Python 3.7. It is strongly\nrecommended\nthat newer applications use TLS 1.2 or 1.3 and `SSLContext.wrap_socket`.\n\nTo remediate this issue, create a new TLS context and pass in `ssl.PROTOCOL_TLS_CLIENT`\nfor clients or `ssl.PROTOCOL_TLS_SERVER` for servers to the `ssl.SSLContext(...)` `protocol=`\nargument. When converting the socket to a TLS socket, use the new `SSLContext.wrap_socket`\nmethod instead.\n\n\nExample creating a TLS 1.3 client socket connection by using a newer version of Python\n(3.11.4) and\nthe SSL module:\n```\nimport ssl\nimport socket\n\n# Create our initial socket\nwith socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:\n    # Connect the socket\n    sock.connect(('www.example.org', 443))\n\n    # Create a new SSLContext with protocol set to ssl.PROTOCOL_TLS_CLIENT\n    # This will auto-select the highest grade TLS protocol version (1.3)\n    context = ssl.SSLContext(protocol=ssl.PROTOCOL_TLS_CLIENT)\n    # Load our a certificates for server certificate authentication\n    context.load_verify_locations('cert.pem')\n    # Create our TLS socket, and validate the server hostname matches\n    with context.wrap_socket(sock, server_hostname=\"www.example.org\") as tls_sock:\n        # Send some bytes over the socket (HTTP request in this case)\\\n        data = bytes('GET / HTTP/1.1\\r\\nHost: example.org\\r\\n\\r\\n', 'utf-8')\n        sent_bytes = tls_sock.send(data)\n        # Validate number of sent bytes\n        # ...\n        # Read the response\n        resp = tls_sock.recv()\n        # Work with the response\n        # ...\n```\n\nFor more information on the ssl module see:\n- https://docs.python.org/3/library/ssl.html\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_ssl_rule-ssl-with-bad-version", "message": "The application was found calling an SSL module with SSL or TLS protocols that have known\ndeficiencies.\nIt is strongly recommended that newer applications use TLS 1.2 or 1.3 and\n`SSLContext.wrap_socket`.\n\nIf using the `pyOpenSSL` module, please note that it has been deprecated and the Python\nCryptographic Authority\nstrongly suggests moving to use the [pyca/cryptography](https://github.com/pyca/cryptography)\nmodule instead.\n\nTo remediate this issue for the `ssl` module, create a new TLS context and pass in\n`ssl.PROTOCOL_TLS_CLIENT` for clients or `ssl.PROTOCOL_TLS_SERVER` for servers to the\n`ssl.SSLContext(...)` `protocol=`\nargument. When converting the socket to a TLS socket, use the new `SSLContext.wrap_socket`\nmethod instead.\n\nExample creating a TLS 1.3 client socket connection by using a newer version of Python\n(3.11.4) and\nthe SSL module:\n```\nimport ssl\nimport socket\n\n# Create our initial socket\nwith socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:\n    # Connect the socket\n    sock.connect(('www.example.org', 443))\n\n    # Create a new SSLContext with protocol set to ssl.PROTOCOL_TLS_CLIENT\n    # This will auto-select the highest grade TLS protocol version (1.3)\n    context = ssl.SSLContext(protocol=ssl.PROTOCOL_TLS_CLIENT)\n    # Load our a certificates for server certificate authentication\n    context.load_verify_locations('cert.pem')\n    # Create our TLS socket, and validate the server hostname matches\n    with context.wrap_socket(sock, server_hostname=\"www.example.org\") as tls_sock:\n        # Send some bytes over the socket (HTTP request in this case)\\\n        data = bytes('GET / HTTP/1.1\\r\\nHost: example.org\\r\\n\\r\\n', 'utf-8')\n        sent_bytes = tls_sock.send(data)\n        # Validate number of sent bytes\n        # ...\n        # Read the response\n        resp = tls_sock.recv()\n        # Work with the response\n        # ...\n```\n\nFor more information on the ssl module see:\n- https://docs.python.org/3/library/ssl.html\n\nFor more information on pyca/cryptography and openssl see:\n- https://cryptography.io/en/latest/openssl/\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "python_ssl_rule-req-no-certvalid", "message": "The application was found using the `requests` module without configuring a timeout value for\nconnections. The `verify=False` argument has been set, which effectively disables the\nvalidation\nof server certificates.\n\nThis allows for an adversary who is in between the application and the target host to intercept\npotentially sensitive information or transmit malicious data.\n\nTo remediate this issue either remove the `verify=False` argument, or set `verify=True`to each\n`requests` call.\n\nExample verifying server certificates for an HTTP GET request:\n```\n# Issue a GET request to https://example.com with a timeout of 10 seconds and verify the\n# server certificate explicitly.\nresponse = requests.get('https://example.com', timeout=10, verify=True)\n# Work with the response object\n# ...\n```\n\nFor more information on using the requests module see:\n- https://requests.readthedocs.io/en/latest/api/\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "python_ssl_rule-unverified-context", "message": "The application was found creating a SSL context using the `_create_unverified_context`.\nThis effectively disables the validation of server certificates.\n\nThis allows for an adversary who is in between the application and the target host to intercept\npotentially sensitive information or transmit malicious data.\n\nTo remediate this issue remove the call to `_create_unverified_context` and either create a\ndefault\ncontext using `ssl.create_default_context` or create a context with TLS 1.3.\n\nExample creating a TLS 1.3 client socket connection by using a newer version of Python\n(3.11.4) and\nthe SSL module:\n```\nimport ssl\nimport socket\n\n# Create our initial socket\nwith socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:\n    # Connect the socket\n    sock.connect(('www.example.org', 443))\n\n    # Create a new SSLContext with protocol set to ssl.PROTOCOL_TLS_CLIENT\n    # This will auto-select the highest grade TLS protocol version (1.3)\n    context = ssl.SSLContext(protocol=ssl.PROTOCOL_TLS_CLIENT)\n    # Load our a certificates for server certificate authentication\n    context.load_verify_locations('cert.pem')\n    # Create our TLS socket, and validate the server hostname matches\n    with context.wrap_socket(sock, server_hostname=\"www.example.org\") as tls_sock:\n        # Send some bytes over the socket (HTTP request in this case)\\\n        data = bytes('GET / HTTP/1.1\\r\\nHost: example.org\\r\\n\\r\\n', 'utf-8')\n        sent_bytes = tls_sock.send(data)\n        # Validate number of sent bytes\n        # ...\n        # Read the response\n        resp = tls_sock.recv()\n        # Work with the response\n        # ...\n```\n\nUnverified SSL context detected. This will permit insecure connections without `verifyingSSL`\ncertificates. Use `ssl.create_default_context()` instead.\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "python_random_rule-random", "message": "Depending on the context, generating weak random numbers may expose cryptographic functions,\nwhich rely on these numbers, to be exploitable. When generating numbers for sensitive values\nsuch as tokens, nonces, and cryptographic keys, it is recommended that the `secrets` module\nbe used instead.\n\nExample using the secrets module:\n```\nimport secrets\n\n# Generate a secure random 64 byte array\nrandom_bytes = secrets.token_bytes(64)\nprint(random_bytes)\n\n# Generate a secure random 64 byte array as a hex string\nrandom_bytes_hex = secrets.token_hex(64)\n\n# Generate a secure random 64 byte array base64 encoded for use in URLs\nrandom_string = secrets.token_urlsafe(64)\n```\n\nFor more information on the `secrets` module see:\n- https://docs.python.org/3/library/secrets.html\n", "parent_source": "gitlab", "severity": "`INFO`", "languages": "Python"}, {"identifier": "python_requests_rule-request-without-timeout", "message": "The application was found using the `requests` module without configuring a timeout value for\nconnections. This could lead to uncontrolled resource consumption where the application could\nrun out of\nsocket descriptors, effectively causing a Denial of Service (DoS).\n\nTo remediate this issue, pass in a `timeout=` argument to each `requests` call.\n\nExample using a timeout for an HTTP GET request:\n```\n# Issue a GET request to https://example.com with a timeout of 10 seconds\nresponse = requests.get('https://example.com', timeout=10)\n# Work with the response object\n# ...\n```\n\nFor more information on using the requests module see:\n- https://requests.readthedocs.io/en/latest/api/\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_snmp_rule-insecure-snmp-version", "message": "Pysnmp was detected using versions SNMPv1 or SNMPv2. SNPMv1 and SNMPv2 are insecure\nand should no longer be used as they do not offer encryption.\n\nIf possible, query SNMP devices using SNMPv3 instead.\n\nExample querying a device using SNMPv3 with SHA-AES:\n```\nfrom pysnmp.hlapi import *\n# Create the snpm iterator\niterator = getCmd(\n    SnmpEngine(),\n    # Configure using SHA AES\n    UsmUserData('usr-sha-aes', 'authkey1', 'privkey1',\n                authProtocol=USM_AUTH_HMAC96_SHA,\n                privProtocol=USM_PRIV_CFB128_AES),\n    UdpTransportTarget(('demo.snmplabs.com', 161)),\n    ContextData(),\n    ObjectType(ObjectIdentity('SNMPv2-MIB', 'sysDescr', 0))\n)\n```\n\nFor more information on using SNMPv3 with `Pysnmp` see:\n- https://pysnmp.readthedocs.io/en/latest/examples/hlapi/v3arch/asyncore/sync/manager/cmdgen/snmp-versions.html#snmpv3-auth-sha-privacy-aes128\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_snmp_rule-snmp-weak-cryptography", "message": "Pysnmp was detected using SNMPv3 without authentication or encryption protections enabled.\nWhen calling `UsmUserData`, the first argument should be in the format of\n`usr-<authtype>-<encryption type>`.\n\nTo remediate this issue, the `UsmUserData` should be configured with `usr-sha-aes` for\nSHA authentication and AES encryption.\n\nExample querying a device using SNMPv3 with SHA-AES:\n```\nfrom pysnmp.hlapi import *\n# Create the snpm iterator\niterator = getCmd(\n    SnmpEngine(),\n    # Configure using SHA AES\n    UsmUserData('usr-sha-aes', 'authkey1', 'privkey1',\n                authProtocol=USM_AUTH_HMAC96_SHA,\n                privProtocol=USM_PRIV_CFB128_AES),\n    UdpTransportTarget(('demo.snmplabs.com', 161)),\n    ContextData(),\n    ObjectType(ObjectIdentity('SNMPv2-MIB', 'sysDescr', 0))\n)\n```\n\nFor more information on using SNMPv3 with `Pysnmp` see:\n- https://pysnmp.readthedocs.io/en/latest/examples/hlapi/v3arch/asyncore/sync/manager/cmdgen/snmp-versions.html#snmpv3-auth-sha-privacy-aes128\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_sql_rule-hardcoded-sql-expression", "message": "SQL Injection is a critical vulnerability that can lead to data or system compromise. By\ndynamically generating SQL query strings, user input may be able to influence the logic of\nthe SQL statement. This could lead to an adversary accessing information they should\nnot have access to, or in some circumstances, being able to execute OS functionality or code.\n\nReplace all dynamically generated SQL queries with parameterized queries. In situations where\ndynamic queries must be created, never use direct user input, but instead use a map or\ndictionary of valid values and resolve them using a user supplied key.\n\nFor example, some database drivers do not allow parameterized queries for `>` or `<` comparison\noperators. In these cases, do not use a user supplied `>` or `<` value, but rather have the\nuser\nsupply a `gt` or `lt` value. The alphabetical values are then used to look up the `>` and `<`\nvalues to be used in the construction of the dynamic query. The same goes for other queries\nwhere\ncolumn or table names are required but cannot be parameterized.\n\nExample using `PreparedStatement` queries:\n```\nimport sqlite3\n\n# Create a new database (in memory)\ncon = sqlite3.connect(\":memory:\")\n# Get a cursor from the connection\ncur = con.cursor()\n# Create a tuple of the value to be used in the parameterized query\nparams = ('user-input',)\n# execute the statement, passing in the params for the value\ncur.execute(\"select name from sqlite_master where name = ?\", params)\n# work with the result\nresult = cur.fetchall()\n```\n\nFor more information on SQL Injection see OWASP:\nhttps://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_log_rule-logging-config-insecure-listen", "message": "The application was found calling the `logging.config.listen`` function, which provides the\nability to listen for\nexternal configuration files over a socket server. This listen socket parses part of the\nconfiguration and calls\n`eval` on the supplied configuration file. A local user, or an adversary who is able to\nexploit\na Server Side Request Forgery (SSRF) attack to communicate over localhost, would be able to\nexecute arbitrary\ncode by passing in a logging config that contains python code.\n\nTo remediate the issue, remove the call to `logging.config.listen` method.\n\nFor more information on the listen functionality see:\n- https://docs.python.org/3/library/logging.config.html#logging.config.listen\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_bind-all-interfaces_rule-general-bindall-interfaces", "message": "Binding to all network interfaces can potentially open up a service to\ntraffic on unintended interfaces, that may not be properly documented or\nsecured. By passing \"0.0.0.0\", \"::\" or an empty string as the address to the `socket.bind`\nfunction,\nthe application will bind to all interfaces.\n\nConsider passing in the interface ip address through an environment variable,\nconfiguration file, or by determining the primary interface(s) IP address.\n\nExample getting the IP address from an environment variable `IP_ADDRESS`:\n```\n# Get the IP_ADDRESS env variable, or bind to\n# 127.0.0.1 if it is not set\naddress = os.getenv(\"IP_ADDRESS\", \"127.0.0.1\")\n# Create an internet socket\nsock = socket.socket(socket.AF_INET)\n# Set the port to listen on\nport = 9777\n# Bind to the address and port combination\nsock.bind((address, port))\n# Listen for connections\nsock.listen()\n# Handle the connection\n```\n", "parent_source": "gitlab", "severity": "`INFO`", "languages": "Python"}, {"identifier": "python_files_rule-tarfile-unsafe-members", "message": "The application may be vulnerable to a path traversal if it extracts untrusted archive files.\nThis vulnerability is colloquially known as 'Zip Slip'. Archive files may contain folders\nwhich,\nwhen extracted, may write outside of the intended directory. This is exploited by including\npath traversal characters such as `../../other/directory` to overwrite or place files in system\nor application directories.\n\nExtra care must be taken when extracting archive files as there are numerous concerns:\n\n- If possible, generate unique filenames instead of using the archives file names, as it may be\npossible for users to overwrite files if the filenames are the same.\n- Validate file paths are written with a prefixed, known trusted directory.\n- Only process regular files and not symbolic links, as some applications may attempt to\nread/follow\nthe symbolic link, leading to arbitrary file read / write vulnerabilities.\n\nExample of securely processing an archive file:\n```\nimport tarfile\nimport uuid\n# import os\n\ntar = tarfile.open('some.tar')\n\n# Max number of allowed files in our archive\nmax_files = 10\n# Max size for all files in archive\nmax_size = 1024 * 1024 * 10 # 10MB\n# Max size per file in archive\nmax_file_size = 1024 * 1024 # 1MB\n\n# Validate number of files in archive\nif len(tar.getmembers()) > max_files:\n    raise Exception(\"Too many files in archive\")\n\ntotal_size = 0\n# Loop over all files to see if we exceed max size\n# if so, do not process any of them.\nfor f in tar.getmembers():\n    total_size += f.size\n    if total_size >= max_size:\n        raise Exception(\"Archive files exceeded max file size\")\n\n# Iterate over files now that we know the total size is within limits\nfor f in tar.getmembers():\n    # Internally this calls TarInfo.isreg() which ensures\n    # the file is a regular file and not a sym link or directory\n    if not f.isfile():\n        continue\n\n    # Optional, set a limit on each file size\n    if f.size > max_file_size:\n        raise Exception(f\"File {f.name} too large: {f.size}\")\n\n    # If original names are required, ensure that only the\n    # filename is used:\n    # filename = os.path.basename(f.name)\n\n    # More secure, generate a UUID4 value instead\n    filename = uuid.uuid4().hex\n\n    # Reset the archive filename to the basename\n    # Newer versions of python (3.11.4+) should use:\n    # new_tar = old_tar.replace(name=...new name...)\n    f.name = filename\n\n    # Extract the file into a restricted directory, with our\n    # own user's attributes, not the file from the archive\n    tar.extract(f, '/opt/app/restricted/', set_attrs=False)\n```\n\nFor more information on tarfile see:\n- https://docs.python.org/3/library/tarfile.html\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "python_eval_rule-eval", "message": "The application was found calling the `eval` function with a non-literal variable. If the\nvariable comes from user-supplied input, an adversary could compromise the entire system by\nexecuting arbitrary python code.\n\nTo remediate this issue, remove all calls to `eval` and consider alternative methods for\nexecuting\nthe necessary business logic. There is almost no safe method of calling `eval` with\nuser-supplied input.\n\nIf the application only needs to convert strings into objects, consider using `json.loads`.\nIn some cases `ast.literal_eval` is recommended, but this should be avoided as it can still\nsuffer from other issues such as the ability for malicious code to crash the python\ninterpreter or application.\n\nExample using `json.loads`` to load in arbitrary data to create data structures:\n```\n# User supplied data as a blob of JSON\nuser_supplied_data = \"\"\"{\"user\": \"test\", \"metadata\": [1,2,3]}\"\"\"\n# Load the JSON\nuser_object = json.loads(user_supplied_data)\n# Manually add protected properties _after_ loading, never before\nuser_object[\"is_admin\"] = False\n# Work with the object\n```\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_flask_rule-app-debug", "message": "The Flask application is running with `debug=True` configured. By enabling this option, certain\nexceptions or errors could cause sensitive information to be leaked in HTTP responses.\n\nAdditionally, it is not recommended to run a Flask application using `Flask.run(...)` in\nproduction. Instead, a WSGI server such as\n[gunicorn](https://flask.palletsprojects.com/en/2.3.x/deploying/gunicorn/)\nor [waitress](https://flask.palletsprojects.com/en/2.3.x/deploying/waitress/) be used instead.\n\nFor more information on deployment options for Flask applications see:\n- https://flask.palletsprojects.com/en/2.3.x/deploying/\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_tmpdir_rule-mktemp-q", "message": "The application was found creating temporary files with the insecure `mktemp` method.\nDepending on how the application uses this temporary file, an attacker may be able to create\nsymlinks that point to other files prior to the application creating or writing\nto the target file, leading to unintended files being created or overwritten.\n\nTo remediate this issue consider using `tempfile.TemporaryFile` instead.\n\nExample using `tempfile.TemporaryFile` to write a file:\n```\nimport tempfile\n\n# Open a new temporary file using a context manager\nwith tempfile.TemporaryFile() as fp:\n    # Write some data to the temporary file\n    fp.write(b'Some data')\n    # Seek back to beginning of file\n    fp.seek(0)\n    # Read it\n    data = fp.read()\n# File is automatically closed/removed once we exit the with context\n```\n\nFor more information on alternative tempfile functions see:\n- https://docs.python.org/3/library/tempfile.html\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "python_tmpdir_rule-hardcodedtmp", "message": "The application was found creating files in shared system temporary directories\n(`/tmp` or `/var/tmp`) without using the `tempfile.TemporaryFile` function. Depending\non how the application uses this temporary file, an attacker may be able to create\nsymlinks that point to other files prior to the application creating or writing\nto the target file, leading to unintended files being created or overwritten.\n\nExample using `tempfile.TemporaryFile` to write a file:\n```\nimport tempfile\n\n# Open a new temporary file using a context manager\nwith tempfile.TemporaryFile() as fp:\n    # Write some data to the temporary file\n    fp.write(b'Some data')\n    # Seek back to beginning of file\n    fp.seek(0)\n    # Read it\n    data = fp.read()\n# File is automatically closed/removed once we exit the with context\n```\n\nFor more information on alternative tempfile functions see:\n- https://docs.python.org/3/library/tempfile.html\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_deserialization_rule-dill", "message": "The application was found using `dill` which is vulnerable to deserialization attacks.\nDeserialization attacks exploit the process of reading serialized data and turning it back\ninto an object. By constructing malicious objects and serializing them, an adversary may\nattempt to:\n\n- Inject code that is executed upon object construction, which occurs during the\ndeserialization process.\n- Exploit mass assignment by including fields that are not normally a part of the serialized\ndata but are read in during deserialization.\n\nConsider safer alternatives such as serializing data in the JSON format. Ensure any format\nchosen allows\nthe application to specify exactly which object types are allowed to be deserialized.\n\nTo protect against mass assignment, only allow deserialization of the specific fields that are\nrequired. If this is not easily done, consider creating an intermediary type that\ncan be serialized with only the necessary fields exposed.\n\nExample JSON deserializer using an intermediary type that is validated against a schema to\nensure\nit is safe from mass assignment:\n```\nimport jsonschema\n\n# Create a schema to validate our user-supplied input against\n# an intermediary object\nintermediary_schema = {\n    \"type\" : \"object\",\n    \"properties\" :  {\n        \"name\": {\"type\" : \"string\"}\n    },\n    \"required\": [\"name\"],\n    # Protect against random properties being added to the object\n    \"additionalProperties\": False,\n}\n# If a user attempted to add \"'is_admin': True\" it would cause a validation error\nintermediary_object = {'name': 'test user'}\n\ntry:\n    # Validate the user supplied intermediary object against our schema\n    jsonschema.validate(instance=intermediary_object, schema=intermediary_schema)\n    user_object = {'user':\n        {\n            # Assign the deserialized data from intermediary object\n            'name': intermediary_object['name'],\n            # Add in protected data in object definition (or set it from a class constructor)\n            'is_admin': False,\n        }\n    }\n    # Work with the user_object\nexcept jsonschema.exceptions.ValidationError as ex:\n    # Gracefully handle validation errors\n    # ...\n```\n\nFor more details on deserialization attacks in general, see OWASP's guide:\n- https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_deserialization_rule-shelve", "message": "The application was found using `shelve` which is vulnerable to deserialization attacks as\nit calls `pickle` internally.\nDeserialization attacks exploit the process of reading serialized data and turning it back\ninto an object. By constructing malicious objects and serializing them, an adversary may\nattempt to:\n\n- Inject code that is executed upon object construction, which occurs during the\ndeserialization process.\n- Exploit mass assignment by including fields that are not normally a part of the serialized\ndata but are read in during deserialization.\n\nConsider safer alternatives such as serializing data in the JSON format. Ensure any format\nchosen allows\nthe application to specify exactly which object types are allowed to be deserialized.\n\nTo protect against mass assignment, only allow deserialization of the specific fields that are\nrequired. If this is not easily done, consider creating an intermediary type that\ncan be serialized with only the necessary fields exposed.\n\nExample JSON deserializer using an intermediary type that is validated against a schema to\nensure\nit is safe from mass assignment:\n```\nimport jsonschema\n\n# Create a schema to validate our user-supplied input against\n# an intermediary object\nintermediary_schema = {\n    \"type\" : \"object\",\n    \"properties\" :  {\n        \"name\": {\"type\" : \"string\"}\n    },\n    \"required\": [\"name\"],\n    # Protect against random properties being added to the object\n    \"additionalProperties\": False,\n}\n# If a user attempted to add \"'is_admin': True\" it would cause a validation error\nintermediary_object = {'name': 'test user'}\n\ntry:\n    # Validate the user supplied intermediary object against our schema\n    jsonschema.validate(instance=intermediary_object, schema=intermediary_schema)\n    user_object = {'user':\n        {\n            # Assign the deserialized data from intermediary object\n            'name': intermediary_object['name'],\n            # Add in protected data in object definition (or set it from a class constructor)\n            'is_admin': False,\n        }\n    }\n    # Work with the user_object\nexcept jsonschema.exceptions.ValidationError as ex:\n    # Gracefully handle validation errors\n    # ...\n```\n\nFor more details on deserialization attacks in general, see OWASP's guide:\n- https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_deserialization_rule-marshal", "message": "The application was found using `dill` which is vulnerable to deserialization attacks.\nDeserialization attacks exploit the process of reading serialized data and turning it back\ninto an object. By constructing malicious objects and serializing them, an adversary may\nattempt to:\n\n- Inject code that is executed upon object construction, which occurs during the\ndeserialization process.\n- Exploit mass assignment by including fields that are not normally a part of the serialized\ndata but are read in during deserialization.\n\nConsider safer alternatives such as serializing data in the JSON format. Ensure any format\nchosen allows\nthe application to specify exactly which object types are allowed to be deserialized.\n\nTo protect against mass assignment, only allow deserialization of the specific fields that are\nrequired. If this is not easily done, consider creating an intermediary type that\ncan be serialized with only the necessary fields exposed.\n\nExample JSON deserializer using an intermediary type that is validated against a schema to\nensure\nit is safe from mass assignment:\n```\nimport jsonschema\n\n# Create a schema to validate our user-supplied input against\n# an intermediary object\nintermediary_schema = {\n    \"type\" : \"object\",\n    \"properties\" :  {\n        \"name\": {\"type\" : \"string\"}\n    },\n    \"required\": [\"name\"],\n    # Protect against random properties being added to the object\n    \"additionalProperties\": False,\n}\n# If a user attempted to add \"'is_admin': True\" it would cause a validation error\nintermediary_object = {'name': 'test user'}\n\ntry:\n    # Validate the user supplied intermediary object against our schema\n    jsonschema.validate(instance=intermediary_object, schema=intermediary_schema)\n    user_object = {'user':\n        {\n            # Assign the deserialized data from intermediary object\n            'name': intermediary_object['name'],\n            # Add in protected data in object definition (or set it from a class constructor)\n            'is_admin': False,\n        }\n    }\n    # Work with the user_object\nexcept jsonschema.exceptions.ValidationError as ex:\n    # Gracefully handle validation errors\n    # ...\n```\n\nFor more details on deserialization attacks in general, see OWASP's guide:\n- https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_deserialization_rule-pickle", "message": "The application was found using `pickle` which is vulnerable to deserialization attacks.\nDeserialization attacks exploit the process of reading serialized data and turning it back\ninto an object. By constructing malicious objects and serializing them, an adversary may\nattempt to:\n\n- Inject code that is executed upon object construction, which occurs during the\ndeserialization process.\n- Exploit mass assignment by including fields that are not normally a part of the serialized\ndata but are read in during deserialization.\n\nConsider safer alternatives such as serializing data in the JSON format. Ensure any format\nchosen allows\nthe application to specify exactly which object types are allowed to be deserialized.\n\nTo protect against mass assignment, only allow deserialization of the specific fields that are\nrequired. If this is not easily done, consider creating an intermediary type that\ncan be serialized with only the necessary fields exposed.\n\nExample JSON deserializer using an intermediary type that is validated against a schema to\nensure\nit is safe from mass assignment:\n```\nimport jsonschema\n\n# Create a schema to validate our user-supplied input against\n# an intermediary object\nintermediary_schema = {\n    \"type\" : \"object\",\n    \"properties\" :  {\n        \"name\": {\"type\" : \"string\"}\n    },\n    \"required\": [\"name\"],\n    # Protect against random properties being added to the object\n    \"additionalProperties\": False,\n}\n# If a user attempted to add \"'is_admin': True\" it would cause a validation error\nintermediary_object = {'name': 'test user'}\n\ntry:\n    # Validate the user supplied intermediary object against our schema\n    jsonschema.validate(instance=intermediary_object, schema=intermediary_schema)\n    user_object = {'user':\n        {\n            # Assign the deserialized data from intermediary object\n            'name': intermediary_object['name'],\n            # Add in protected data in object definition (or set it from a class constructor)\n            'is_admin': False,\n        }\n    }\n    # Work with the user_object\nexcept jsonschema.exceptions.ValidationError as ex:\n    # Gracefully handle validation errors\n    # ...\n```\n\nFor more details on deserialization attacks in general, see OWASP's guide:\n- https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_deserialization_rule-cpickle", "message": "The application was found using `cPickle` which is vulnerable to deserialization attacks.\nDeserialization attacks exploit the process of reading serialized data and turning it back\ninto an object. By constructing malicious objects and serializing them, an adversary may\nattempt to:\n\n- Inject code that is executed upon object construction, which occurs during the\ndeserialization process.\n- Exploit mass assignment by including fields that are not normally a part of the serialized\ndata but are read in during deserialization.\n\nConsider safer alternatives such as serializing data in the JSON format. Ensure any format\nchosen allows\nthe application to specify exactly which object types are allowed to be deserialized.\n\nTo protect against mass assignment, only allow deserialization of the specific fields that are\nrequired. If this is not easily done, consider creating an intermediary type that\ncan be serialized with only the necessary fields exposed.\n\nExample JSON deserializer using an intermediary type that is validated against a schema to\nensure\nit is safe from mass assignment:\n```\nimport jsonschema\n\n# Create a schema to validate our user-supplied input against\n# an intermediary object\nintermediary_schema = {\n    \"type\" : \"object\",\n    \"properties\" :  {\n        \"name\": {\"type\" : \"string\"}\n    },\n    \"required\": [\"name\"],\n    # Protect against random properties being added to the object\n    \"additionalProperties\": False,\n}\n# If a user attempted to add \"'is_admin': True\" it would cause a validation error\nintermediary_object = {'name': 'test user'}\n\ntry:\n    # Validate the user supplied intermediary object against our schema\n    jsonschema.validate(instance=intermediary_object, schema=intermediary_schema)\n    user_object = {'user':\n        {\n            # Assign the deserialized data from intermediary object\n            'name': intermediary_object['name'],\n            # Add in protected data in object definition (or set it from a class constructor)\n            'is_admin': False,\n        }\n    }\n    # Work with the user_object\nexcept jsonschema.exceptions.ValidationError as ex:\n    # Gracefully handle validation errors\n    # ...\n```\n\nFor more details on deserialization attacks in general, see OWASP's guide:\n- https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_deserialization_rule-yaml-load", "message": "The application was found using an unsafe version of `yaml` load which is vulnerable to\ndeserialization attacks. Deserialization attacks exploit the process of reading serialized\ndata and turning it back\ninto an object. By constructing malicious objects and serializing them, an adversary may\nattempt to:\n\n- Inject code that is executed upon object construction, which occurs during the\ndeserialization process.\n- Exploit mass assignment by including fields that are not normally a part of the serialized\ndata but are read in during deserialization.\n\nTo remediate this issue, use `safe_load()` or call `yaml.load()` with the `Loader` argument\nset to\n`yaml.SafeLoader`.\n\nExample loading YAML using `safe_load`:\n```\nimport yaml\n\n# Use safe_load to load data into an intermediary object\nintermediary_object = yaml.safe_load(\"\"\"user:\n    name: 'test user'\"\"\"\n)\n# Create our real object, copying over only the necessary fields\nuser_object = {'user': {\n        # Assign the deserialized data from intermediary object\n        'name': intermediary_object['user']['name'],\n        # Add in protected data in object definition (or set it from a class constructor)\n        'is_admin': False,\n    }\n}\n# Work with user_object\n# ...\n```\n\nFor more details on deserialization attacks in general, see OWASP's guide:\n- https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "python_crypto_rule-crypto-cipher-rc2", "message": "DES, TripleDES, RC2 and RC4 are all considered broken or insecure cryptographic algorithms.\nNewer algorithms apply message integrity to validate ciphertext has not been tampered\nwith. Consider using `ChaCha20Poly1305` instead as it is easier and faster than the\nalternatives such as `AES-256-GCM`.\n\nFor older applications that don't have support for `ChaCha20Poly1305`,\n`AES-256-GCM` is recommended, however it has many drawbacks:\n- Slower than `ChaCha20Poly1305`.\n- Catastrophic failure if nonce values are reused.\n\nNote that the `Crypto` and `Cryptodome` Python packages are no longer recommended for\nnew applications, instead consider using the [cryptography](https://cryptography.io/) package.\n\nExample using `ChaCha20Poly1305`:\n```\nimport os\n# Import ChaCha20Poly1305 from cryptography\nfrom cryptography.hazmat.primitives.ciphers.aead import ChaCha20Poly1305\n# Our plaintext to encrypt\nplain_text = b\"Secret text to encrypt\"\n# We do not require authenticated but unencrypted data, so set to None\naad = None\n# Generate a secure key\nkey = ChaCha20Poly1305.generate_key()\n# Create a new ChaCha20Poly1305 instance with our secure key\nchacha = ChaCha20Poly1305(key)\n# Note: nonce values _must_ be regenerated every time they are used.\nnonce = os.urandom(12)\n# Encrypt our plaintext\ncipher_text = chacha.encrypt(nonce, plain_text, aad)\n# Decrypt the plain text using the nonce and cipher_text\nchacha.decrypt(nonce, cipher_text, aad)\n```\n\nExample using `AESGCM`:\n```\nimport os\n# Import AESGCM from cryptography\nfrom cryptography.hazmat.primitives.ciphers.aead import AESGCM\n# Our plaintext to encrypt\nplain_text = b\"Secret text to encrypt\"\n# We do not require authenticated but unencrypted data, so set to None\naad = None\n# Generate a secure key\nkey = AESGCM.generate_key(bit_length=128)\n# Create a new AESGCM instance with our secure key\naesgcm = AESGCM(key)\n# Note: nonce values _must_ be regenerated every time they are used.\nnonce = os.urandom(12)\n# Encrypt our plaintext\ncipher_text = aesgcm.encrypt(nonce, plain_text, aad)\n# Decrypt the plain text using the nonce and cipher_text\naesgcm.decrypt(nonce, cipher_text, aad)\n```\n\nFor more information on the cryptography module see:\n- https://cryptography.io/en/latest/\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_crypto_rule-crypto-hazmat-cipher-arc4", "message": "DES, TripleDES, RC2 and RC4 are all considered broken or insecure cryptographic algorithms.\nNewer algorithms apply message integrity to validate ciphertext has not been tampered\nwith. Consider using `ChaCha20Poly1305` instead as it is easier and faster than the\nalternatives such as `AES-256-GCM`.\n\nFor older applications that don't have support for `ChaCha20Poly1305`,\n`AES-256-GCM` is recommended, however it has many drawbacks:\n- Slower than `ChaCha20Poly1305`.\n- Catastrophic failure if nonce values are reused.\n\nExample using `ChaCha20Poly1305`:\n```\nimport os\n# Import ChaCha20Poly1305 from cryptography\nfrom cryptography.hazmat.primitives.ciphers.aead import ChaCha20Poly1305\n# Our plaintext to encrypt\nplain_text = b\"Secret text to encrypt\"\n# We do not require authenticated but unencrypted data, so set to None\naad = None\n# Generate a secure key\nkey = ChaCha20Poly1305.generate_key()\n# Create a new ChaCha20Poly1305 instance with our secure key\nchacha = ChaCha20Poly1305(key)\n# Note: nonce values _must_ be regenerated every time they are used.\nnonce = os.urandom(12)\n# Encrypt our plaintext\ncipher_text = chacha.encrypt(nonce, plain_text, aad)\n# Decrypt the plain text using the nonce and cipher_text\nchacha.decrypt(nonce, cipher_text, aad)\n```\n\nExample using `AESGCM`:\n```\nimport os\n# Import AESGCM from cryptography\nfrom cryptography.hazmat.primitives.ciphers.aead import AESGCM\n# Our plaintext to encrypt\nplain_text = b\"Secret text to encrypt\"\n# We do not require authenticated but unencrypted data, so set to None\naad = None\n# Generate a secure key\nkey = AESGCM.generate_key(bit_length=128)\n# Create a new AESGCM instance with our secure key\naesgcm = AESGCM(key)\n# Note: nonce values _must_ be regenerated every time they are used.\nnonce = os.urandom(12)\n# Encrypt our plaintext\ncipher_text = aesgcm.encrypt(nonce, plain_text, aad)\n# Decrypt the plain text using the nonce and cipher_text\naesgcm.decrypt(nonce, cipher_text, aad)\n```\n\nFor more information on the cryptography module see:\n- https://cryptography.io/en/latest/\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_crypto_rule-import-pycrypto", "message": "The application was detected importing `pycrypto`. This package has been deprecated as it\ncontains\nsecurity vulnerabilities.\n\nTo remediate this issue, consider using the [cryptography](https://cryptography.io/)\npackage instead.\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "python_crypto_rule-hash-md2", "message": "The application was found using an insecure or risky digest or signature algorithm. MD2, MD5\nand SHA1 hash algorithms have been found to be vulnerable to producing collisions.\n\nThis means\nthat two different values, when hashed, can lead to the same hash value. If the application is\ntrying\nto use these hash methods for storing passwords, then it is recommended to switch to a\npassword hashing\nalgorithm such as Argon2id or PBKDF2.\n\nNote that the `Crypto` and `Cryptodome` Python packages are no longer recommended for\nnew applications, instead consider using the [cryptography](https://cryptography.io/) package.\n\nExample of creating a SHA-384 hash using the `cryptography` package:\n```\nfrom cryptography.hazmat.primitives import hashes\n# Create a SHA384 digest\ndigest = hashes.Hash(hashes.SHA384())\n# Update the digest with some initial data\ndigest.update(b\"some data to hash\")\n# Add more data to the digest\ndigest.update(b\"some more data\")\n# Finalize the digest as bytes\nresult = digest.finalize()\n```\n\nFor more information on secure password storage see OWASP:\n- https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html\n\nFor more information on the cryptography module see:\n- https://cryptography.io/en/latest/\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_crypto_rule-crypto-cipher-xor", "message": "The application was found using the `xor` algorithm, which can be trivially decoded.\nNewer algorithms apply message integrity to validate ciphertext has not been tampered\nwith. Consider using `ChaCha20Poly1305` instead as it is easier and faster than the\nalternatives such as `AES-256-GCM`.\n\nFor older applications that don't have support for `ChaCha20Poly1305`,\n`AES-256-GCM` is recommended, however it has many drawbacks:\n- Slower than `ChaCha20Poly1305`.\n- Catastrophic failure if nonce values are reused.\n\nNote that the `Crypto` and `Cryptodome` Python packages are no longer recommended for\nnew applications, instead consider using the [cryptography](https://cryptography.io/) package.\n\nExample using `ChaCha20Poly1305`:\n```\nimport os\n# Import ChaCha20Poly1305 from cryptography\nfrom cryptography.hazmat.primitives.ciphers.aead import ChaCha20Poly1305\n# Our plaintext to encrypt\nplain_text = b\"Secret text to encrypt\"\n# We do not require authenticated but unencrypted data, so set to None\naad = None\n# Generate a secure key\nkey = ChaCha20Poly1305.generate_key()\n# Create a new ChaCha20Poly1305 instance with our secure key\nchacha = ChaCha20Poly1305(key)\n# Note: nonce values _must_ be regenerated every time they are used.\nnonce = os.urandom(12)\n# Encrypt our plaintext\ncipher_text = chacha.encrypt(nonce, plain_text, aad)\n# Decrypt the plain text using the nonce and cipher_text\nchacha.decrypt(nonce, cipher_text, aad)\n```\n\nExample using `AESGCM`:\n```\nimport os\n# Import AESGCM from cryptography\nfrom cryptography.hazmat.primitives.ciphers.aead import AESGCM\n# Our plaintext to encrypt\nplain_text = b\"Secret text to encrypt\"\n# We do not require authenticated but unencrypted data, so set to None\naad = None\n# Generate a secure key\nkey = AESGCM.generate_key(bit_length=128)\n# Create a new AESGCM instance with our secure key\naesgcm = AESGCM(key)\n# Note: nonce values _must_ be regenerated every time they are used.\nnonce = os.urandom(12)\n# Encrypt our plaintext\ncipher_text = aesgcm.encrypt(nonce, plain_text, aad)\n# Decrypt the plain text using the nonce and cipher_text\naesgcm.decrypt(nonce, cipher_text, aad)\n```\n\nFor more information on the cryptography module see:\n- https://cryptography.io/en/latest/\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_crypto_rule-hash-sha1", "message": "The application was found using an insecure or risky digest or signature algorithm. MD2, MD4,\n MD5  and SHA1 hash algorithms have been found to be vulnerable to producing collisions.\n\nThis means\nthat two different values, when hashed, can lead to the same hash value. If the application is\ntrying\nto use these hash methods for storing passwords, then it is recommended to switch to a\npassword hashing\nalgorithm such as Argon2id or PBKDF2.\n\nNote that the `Crypto` and `Cryptodome` Python packages are no longer recommended for\nnew applications, instead consider using the [cryptography](https://cryptography.io/) package.\n\nExample of creating a SHA-384 hash using the `cryptography` package:\n```\nfrom cryptography.hazmat.primitives import hashes\n# Create a SHA384 digest\ndigest = hashes.Hash(hashes.SHA384())\n# Update the digest with some initial data\ndigest.update(b\"some data to hash\")\n# Add more data to the digest\ndigest.update(b\"some more data\")\n# Finalize the digest as bytes\nresult = digest.finalize()\n```\n\nFor more information on secure password storage see OWASP:\n- https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html\n\nFor more information on the cryptography module see:\n- https://cryptography.io/en/latest/\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_crypto_rule-crypto-encrypt-ec", "message": "The application was found using an insufficient curve size for the Elliptical\nCryptography (EC) asymmetric algorithm. NIST recommends using a key size of\n224 or greater.\n\nTo remediate this issue, replace the current key size with `ec.SECP384R1`,\n\nExample using `ec.SECP384R1`:\n```\nfrom cryptography.hazmat.primitives.asymmetric import ec\n# Generate an EC private key using SECP384R1\nprivate_key = ec.generate_private_key(\n    ec.SECP384R1()\n)\n# Work with/sign data using the key\n# ...\n```\n\nFor more information on the cryptography module's EC section see:\n- https://cryptography.io/en/latest/hazmat/primitives/asymmetric/ec/\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "python_crypto_rule-crypto-cipher-rc4", "message": "DES, TripleDES, RC2 and RC4 are all considered broken or insecure cryptographic algorithms.\nNewer algorithms apply message integrity to validate ciphertext has not been tampered\nwith. Consider using `ChaCha20Poly1305` instead as it is easier and faster than the\nalternatives such as `AES-256-GCM`.\n\nFor older applications that don't have support for `ChaCha20Poly1305`,\n`AES-256-GCM` is recommended, however it has many drawbacks:\n- Slower than `ChaCha20Poly1305`.\n- Catastrophic failure if nonce values are reused.\n\nNote that the `Crypto` and `Cryptodome` Python packages are no longer recommended for\nnew applications, instead consider using the [cryptography](https://cryptography.io/) package.\n\nExample using `ChaCha20Poly1305`:\n```\nimport os\n# Import ChaCha20Poly1305 from cryptography\nfrom cryptography.hazmat.primitives.ciphers.aead import ChaCha20Poly1305\n# Our plaintext to encrypt\nplain_text = b\"Secret text to encrypt\"\n# We do not require authenticated but unencrypted data, so set to None\naad = None\n# Generate a secure key\nkey = ChaCha20Poly1305.generate_key()\n# Create a new ChaCha20Poly1305 instance with our secure key\nchacha = ChaCha20Poly1305(key)\n# Note: nonce values _must_ be regenerated every time they are used.\nnonce = os.urandom(12)\n# Encrypt our plaintext\ncipher_text = chacha.encrypt(nonce, plain_text, aad)\n# Decrypt the plain text using the nonce and cipher_text\nchacha.decrypt(nonce, cipher_text, aad)\n```\n\nExample using `AESGCM`:\n```\nimport os\n# Import AESGCM from cryptography\nfrom cryptography.hazmat.primitives.ciphers.aead import AESGCM\n# Our plaintext to encrypt\nplain_text = b\"Secret text to encrypt\"\n# We do not require authenticated but unencrypted data, so set to None\naad = None\n# Generate a secure key\nkey = AESGCM.generate_key(bit_length=128)\n# Create a new AESGCM instance with our secure key\naesgcm = AESGCM(key)\n# Note: nonce values _must_ be regenerated every time they are used.\nnonce = os.urandom(12)\n# Encrypt our plaintext\ncipher_text = aesgcm.encrypt(nonce, plain_text, aad)\n# Decrypt the plain text using the nonce and cipher_text\naesgcm.decrypt(nonce, cipher_text, aad)\n```\n\nFor more information on the cryptography module see:\n- https://cryptography.io/en/latest/\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_crypto_rule-crypto.hazmat-hash-sha1", "message": "The application was found using an insecure or risky digest or signature algorithm. MD2, MD5\nand SHA1 hash algorithms have been found to be vulnerable to producing collisions.\n\nThis means\nthat two different values, when hashed, can lead to the same hash value. If the application is\ntrying\nto use these hash methods for storing passwords, then it is recommended to switch to a\npassword hashing\nalgorithm such as Argon2id or PBKDF2.\nIt is strongly recommended that a standard digest algorithm be chosen instead as implementing\na custom algorithm is prone to error.\n\nExample of creating a SHA-384 hash using the `cryptography` package:\n```\nfrom cryptography.hazmat.primitives import hashes\n# Create a SHA384 digest\ndigest = hashes.Hash(hashes.SHA384())\n# Update the digest with some initial data\ndigest.update(b\"some data to hash\")\n# Add more data to the digest\ndigest.update(b\"some more data\")\n# Finalize the digest as bytes\nresult = digest.finalize()\n```\n\nFor more information on secure password storage see OWASP:\n- https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html\n\nFor more information on the cryptography module see:\n- https://cryptography.io/en/latest/\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_crypto_rule-crypto-cipher-des", "message": "DES, TripleDES, RC2 and RC4 are all considered broken or insecure cryptographic algorithms.\nNewer algorithms apply message integrity to validate ciphertext has not been tampered\nwith. Consider using `ChaCha20Poly1305` instead as it is easier and faster than the\nalternatives such as `AES-256-GCM`.\n\nFor older applications that don't have support for `ChaCha20Poly1305`,\n`AES-256-GCM` is recommended, however it has many drawbacks:\n- Slower than `ChaCha20Poly1305`.\n- Catastrophic failure if nonce values are reused.\n\nNote that the `Crypto` and `Cryptodome` Python packages are no longer recommended for\nnew applications, instead consider using the [cryptography](https://cryptography.io/) package.\n\nExample using `ChaCha20Poly1305`:\n```\nimport os\n# Import ChaCha20Poly1305 from cryptography\nfrom cryptography.hazmat.primitives.ciphers.aead import ChaCha20Poly1305\n# Our plaintext to encrypt\nplain_text = b\"Secret text to encrypt\"\n# We do not require authenticated but unencrypted data, so set to None\naad = None\n# Generate a secure key\nkey = ChaCha20Poly1305.generate_key()\n# Create a new ChaCha20Poly1305 instance with our secure key\nchacha = ChaCha20Poly1305(key)\n# Note: nonce values _must_ be regenerated every time they are used.\nnonce = os.urandom(12)\n# Encrypt our plaintext\ncipher_text = chacha.encrypt(nonce, plain_text, aad)\n# Decrypt the plain text using the nonce and cipher_text\nchacha.decrypt(nonce, cipher_text, aad)\n```\n\nExample using `AESGCM`:\n```\nimport os\n# Import AESGCM from cryptography\nfrom cryptography.hazmat.primitives.ciphers.aead import AESGCM\n# Our plaintext to encrypt\nplain_text = b\"Secret text to encrypt\"\n# We do not require authenticated but unencrypted data, so set to None\naad = None\n# Generate a secure key\nkey = AESGCM.generate_key(bit_length=128)\n# Create a new AESGCM instance with our secure key\naesgcm = AESGCM(key)\n# Note: nonce values _must_ be regenerated every time they are used.\nnonce = os.urandom(12)\n# Encrypt our plaintext\ncipher_text = aesgcm.encrypt(nonce, plain_text, aad)\n# Decrypt the plain text using the nonce and cipher_text\naesgcm.decrypt(nonce, cipher_text, aad)\n```\n\nFor more information on the cryptography module see:\n- https://cryptography.io/en/latest/\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_crypto_rule-crypto.hazmat-hash-md5", "message": "The application was found using an insecure or risky digest or signature algorithm. MD2, MD5\nand SHA1 hash algorithms have been found to be vulnerable to producing collisions.\n\nThis means\nthat two different values, when hashed, can lead to the same hash value. If the application is\ntrying\nto use these hash methods for storing passwords, then it is recommended to switch to a\npassword hashing\nalgorithm such as Argon2id or PBKDF2.\nIt is strongly recommended that a standard digest algorithm be chosen instead as implementing\na custom algorithm is prone to errors.\n\nExample of creating a SHA-384 hash using the `cryptography` package:\n```\nfrom cryptography.hazmat.primitives import hashes\n# Create a SHA384 digest\ndigest = hashes.Hash(hashes.SHA384())\n# Update the digest with some initial data\ndigest.update(b\"some data to hash\")\n# Add more data to the digest\ndigest.update(b\"some more data\")\n# Finalize the digest as bytes\nresult = digest.finalize()\n```\n\nFor more information on secure password storage see OWASP:\n- https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html\n\nFor more information on the cryptography module see:\n- https://cryptography.io/en/latest/\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_crypto_rule-hash-md5", "message": "The application was found using an insecure or risky digest or signature algorithm. MD2, MD4,\n MD5  and SHA1 hash algorithms have been found to be vulnerable to producing collisions.\n\nThis means\nthat two different values, when hashed, can lead to the same hash value. If the application is\ntrying\nto use these hash methods for storing passwords, then it is recommended to switch to a\npassword hashing\nalgorithm such as Argon2id or PBKDF2.\n\nNote that the `Crypto` and `Cryptodome` Python packages are no longer recommended for\nnew applications, instead consider using the [cryptography](https://cryptography.io/) package.\n\nExample of creating a SHA-384 hash using the `cryptography` package:\n```\nfrom cryptography.hazmat.primitives import hashes\n# Create a SHA384 digest\ndigest = hashes.Hash(hashes.SHA384())\n# Update the digest with some initial data\ndigest.update(b\"some data to hash\")\n# Add more data to the digest\ndigest.update(b\"some more data\")\n# Finalize the digest as bytes\nresult = digest.finalize()\n```\n\nFor more information on secure password storage see OWASP:\n- https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html\n\nFor more information on the cryptography module see:\n- https://cryptography.io/en/latest/\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_crypto_rule-crypto-hazmat-cipher-blowfish", "message": "The Blowfish encryption algorithm was meant as a drop-in replacement for DES and was created in\n1993. Smaller key sizes may make the ciphertext vulnerable to [birthday\nattacks](https://en.wikipedia.org/wiki/Birthday_attack). While no known attacks against\nBlowfish\nexist, it should never be used to encrypt files over 4GB in size. If possible consider\nusing ChaCha20Poly1305 or AES-GCM instead of Blowfish.\n\nFor older applications that don't have support for `ChaCha20Poly1305`, `AES-256-GCM` is\nrecommended, however it has many drawbacks:\n  - Slower than `ChaCha20Poly1305`.\n  - Catastrophic failure if nonce values are reused.\n\nExample using `ChaCha20Poly1305`:\n```\nimport os\n# Import ChaCha20Poly1305 from cryptography\nfrom cryptography.hazmat.primitives.ciphers.aead import ChaCha20Poly1305\n# Our plaintext to encrypt\nplain_text = b\"Secret text to encrypt\"\n# We do not require authenticated but unencrypted data, so set to None\naad = None\n# Generate a secure key\nkey = ChaCha20Poly1305.generate_key()\n# Create a new ChaCha20Poly1305 instance with our secure key\nchacha = ChaCha20Poly1305(key)\n# Note: nonce values _must_ be regenerated every time they are used.\nnonce = os.urandom(12)\n# Encrypt our plaintext\ncipher_text = chacha.encrypt(nonce, plain_text, aad)\n# Decrypt the plain text using the nonce and cipher_text\nchacha.decrypt(nonce, cipher_text, aad)\n```\n\nExample using `AESGCM`:\n```\nimport os\n# Import AESGCM from cryptography\nfrom cryptography.hazmat.primitives.ciphers.aead import AESGCM\n# Our plaintext to encrypt\nplain_text = b\"Secret text to encrypt\"\n# We do not require authenticated but unencrypted data, so set to None\naad = None\n# Generate a secure key\nkey = AESGCM.generate_key(bit_length=128)\n# Create a new AESGCM instance with our secure key\naesgcm = AESGCM(key)\n# Note: nonce values _must_ be regenerated every time they are used.\nnonce = os.urandom(12)\n# Encrypt our plaintext\ncipher_text = aesgcm.encrypt(nonce, plain_text, aad)\n# Decrypt the plain text using the nonce and cipher_text\naesgcm.decrypt(nonce, cipher_text, aad)\n```\n\nFor more information on the cryptography module see:\n- https://cryptography.io/en/latest/\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_crypto_rule-cipher-modes", "message": "Cryptographic algorithms provide many different modes of operation, only some of which provide\nmessage integrity. Without message integrity it could be possible for an adversary to attempt\nto tamper with the ciphertext which could lead to compromising the encryption key. Newer\nalgorithms\napply message integrity to validate ciphertext has not been tampered with.\n\nInstead of using an algorithm that requires configuring a cipher mode, an algorithm\nthat has built-in message integrity should be used. Consider using `ChaCha20Poly1305` or\n`AES-256-GCM` instead.\n\nFor older applications that don't have support for `ChaCha20Poly1305`, `AES-256-GCM` is\nrecommended, however it has many drawbacks:\n  - Slower than `ChaCha20Poly1305`.\n  - Catastrophic failure if nonce values are reused.\n\nExample using `ChaCha20Poly1305`:\n```\nimport os\n# Import ChaCha20Poly1305 from cryptography\nfrom cryptography.hazmat.primitives.ciphers.aead import ChaCha20Poly1305\n# Our plaintext to encrypt\nplain_text = b\"Secret text to encrypt\"\n# We do not require authenticated but unencrypted data, so set to None\naad = None\n# Generate a secure key\nkey = ChaCha20Poly1305.generate_key()\n# Create a new ChaCha20Poly1305 instance with our secure key\nchacha = ChaCha20Poly1305(key)\n# Note: nonce values _must_ be regenerated every time they are used.\nnonce = os.urandom(12)\n# Encrypt our plaintext\ncipher_text = chacha.encrypt(nonce, plain_text, aad)\n# Decrypt the plain text using the nonce and cipher_text\nchacha.decrypt(nonce, cipher_text, aad)\n```\n\nExample using `AESGCM`:\n```\nimport os\n# Import AESGCM from cryptography\nfrom cryptography.hazmat.primitives.ciphers.aead import AESGCM\n# Our plaintext to encrypt\nplain_text = b\"Secret text to encrypt\"\n# We do not require authenticated but unencrypted data, so set to None\naad = None\n# Generate a secure key\nkey = AESGCM.generate_key(bit_length=128)\n# Create a new AESGCM instance with our secure key\naesgcm = AESGCM(key)\n# Note: nonce values _must_ be regenerated every time they are used.\nnonce = os.urandom(12)\n# Encrypt our plaintext\ncipher_text = aesgcm.encrypt(nonce, plain_text, aad)\n# Decrypt the plain text using the nonce and cipher_text\naesgcm.decrypt(nonce, cipher_text, aad)\n```\n\nFor more information on the cryptography module see:\n- https://cryptography.io/en/latest/\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_crypto_rule-crypto-encrypt-dsa-rsa", "message": "The application is generating an RSA key that is less than the recommended 2048 bits.\nThe National Institute of Standards and Technology (NIST) deprecated signing Digital\nCertificates that contained RSA Public Keys of 1024 bits in December 2010. While\n1024-bit RSA keys have not been factored yet, advances in compute may make it possible\nin the near future.\n\nConsider upgrading to the newer asymmetric algorithm such as `X25519` which handles\nthe complexities of generating key pairs and choosing correct key sizes for you:\n```\nfrom cryptography.hazmat.primitives.asymmetric.x25519 import X25519PrivateKey\n\n# Generate a private key for use in the exchange.\nprivate_key = X25519PrivateKey.generate()\n# Work with private key/exchange with a peer's\n# public key to created a shared and derived key\n# ...\n```\n\nOtherwise use a key size greater than 2048 when generating RSA keys:\n```\nfrom cryptography.hazmat.primitives.asymmetric import rsa\n# Generate a private key of 4096 bits\nprivate_key = rsa.generate_private_key(\n    # do not change the exponent value from 65537\n    public_exponent=65537,\n    key_size=4096,\n)\n# Work with the private key to sign/encrypt data\n# ...\n```\n\nFor more information on using the cryptography module see:\n- https://cryptography.io/en/latest\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "python_crypto_rule-crypto-hash-md5", "message": "The application was found using an insecure or risky digest or signature algorithm. MD5\nand SHA1 hash algorithms have been found to be vulnerable to producing collisions.\n\nThis means\nthat two different values, when hashed, can lead to the same hash value. If the application is\ntrying\nto use these hash methods for storing passwords, then it is recommended to switch to a\npassword hashing\nalgorithm such as Argon2id or PBKDF2.\nIt is strongly recommended that a standard digest algorithm be chosen instead as implementing\na custom algorithm is prone to errors.\n\nNote that the `Crypto` and `Cryptodome` Python packages are no longer recommended for\nnew applications, instead consider using the [cryptography](https://cryptography.io/) package.\n\nExample of creating a SHA-384 hash using the `cryptography` package:\n```\nfrom cryptography.hazmat.primitives import hashes\n# Create a SHA384 digest\ndigest = hashes.Hash(hashes.SHA384())\n# Update the digest with some initial data\ndigest.update(b\"some data to hash\")\n# Add more data to the digest\ndigest.update(b\"some more data\")\n# Finalize the digest as bytes\nresult = digest.finalize()\n```\n\nFor more information on secure password storage see OWASP:\n- https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html\n\nFor more information on the cryptography module see:\n- https://cryptography.io/en/latest/\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_crypto_rule-hashlib-new-insecure-functions", "message": "The application was found using an insecure or risky digest or signature algorithm. MD2, MD4,\nMD5  and SHA1 hash algorithms have been found to be vulnerable to producing collisions.\n\nThis means\nthat two different values, when hashed, can lead to the same hash value. If the application is\ntrying\nto use these hash methods for storing passwords, then it is recommended to switch to a\npassword hashing\nalgorithm such as Argon2id or PBKDF2.\nIt is strongly recommended that a standard digest algorithm be chosen instead as implementing\na custom algorithm is prone to errors.\n\nExample using `hashlib.sha384()` to create a SHA384 hash:\n```\nimport hashlib\n# Create a SHA384 digest\ndigest = hashlib.sha384()\n# Update the digest with some initial data\ndigest.update(b\"some data to hash\")\n# Add more data to the digest\ndigest.update(b\"some more data\")\n# Finalize the digest as bytes\ndigest.digest()\n```\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_crypto_rule-crypto-hazmat-cipher-idea", "message": "The IDEA encryption algorithm was meant as a drop-in replacement for DES and was created in\n1991. A number of [vulnerabilities and\nexploits](https://en.wikipedia.org/wiki/International_Data_Encryption_Algorithm#Security) have\nbeen identified to work against IDEA and\nit is no longer recommended. If possible consider\nusing ChaCha20Poly1305 or AES-GCM instead of Blowfish.\n\nFor older applications that don't have support for `ChaCha20Poly1305`, `AES-256-GCM` is\nrecommended, however it has many drawbacks:\n  - Slower than `ChaCha20Poly1305`.\n  - Catastrophic failure if nonce values are reused.\n\nExample using `ChaCha20Poly1305`:\n```\nimport os\n# Import ChaCha20Poly1305 from cryptography\nfrom cryptography.hazmat.primitives.ciphers.aead import ChaCha20Poly1305\n# Our plaintext to encrypt\nplain_text = b\"Secret text to encrypt\"\n# We do not require authenticated but unencrypted data, so set to None\naad = None\n# Generate a secure key\nkey = ChaCha20Poly1305.generate_key()\n# Create a new ChaCha20Poly1305 instance with our secure key\nchacha = ChaCha20Poly1305(key)\n# Note: nonce values _must_ be regenerated every time they are used.\nnonce = os.urandom(12)\n# Encrypt our plaintext\ncipher_text = chacha.encrypt(nonce, plain_text, aad)\n# Decrypt the plain text using the nonce and cipher_text\nchacha.decrypt(nonce, cipher_text, aad)\n```\n\nExample using `AESGCM`:\n```\nimport os\n# Import AESGCM from cryptography\nfrom cryptography.hazmat.primitives.ciphers.aead import AESGCM\n# Our plaintext to encrypt\nplain_text = b\"Secret text to encrypt\"\n# We do not require authenticated but unencrypted data, so set to None\naad = None\n# Generate a secure key\nkey = AESGCM.generate_key(bit_length=128)\n# Create a new AESGCM instance with our secure key\naesgcm = AESGCM(key)\n# Note: nonce values _must_ be regenerated every time they are used.\nnonce = os.urandom(12)\n# Encrypt our plaintext\ncipher_text = aesgcm.encrypt(nonce, plain_text, aad)\n# Decrypt the plain text using the nonce and cipher_text\naesgcm.decrypt(nonce, cipher_text, aad)\n```\n\nFor more information on the cryptography module see:\n- https://cryptography.io/en/latest/\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_crypto_rule-hash-md4", "message": "The application was found using an insecure or risky digest or signature algorithm. MD2, MD4,\n MD5  and SHA1 hash algorithms have been found to be vulnerable to producing collisions.\n\nThis means\nthat two different values, when hashed, can lead to the same hash value. If the application is\ntrying\nto use these hash methods for storing passwords, then it is recommended to switch to a\npassword hashing\nalgorithm such as Argon2id or PBKDF2.\n\nNote that the `Crypto` and `Cryptodome` Python packages are no longer recommended for\nnew applications, instead consider using the [cryptography](https://cryptography.io/) package.\n\nExample of creating a SHA-384 hash using the `cryptography` package:\n```\nfrom cryptography.hazmat.primitives import hashes\n# Create a SHA384 digest\ndigest = hashes.Hash(hashes.SHA384())\n# Update the digest with some initial data\ndigest.update(b\"some data to hash\")\n# Add more data to the digest\ndigest.update(b\"some more data\")\n# Finalize the digest as bytes\nresult = digest.finalize()\n```\n\nFor more information on secure password storage see OWASP:\n- https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html\n\nFor more information on the cryptography module see:\n- https://cryptography.io/en/latest/\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_crypto_rule-crypto-cipher-blowfish", "message": "The Blowfish encryption algorithm was meant as a drop-in replacement for DES and was created in\n1993. Smaller key sizes may make the ciphertext vulnerable to [birthday\nattacks](https://en.wikipedia.org/wiki/Birthday_attack). While no known attacks against\nBlowfish\nexist, it should never be used to encrypt files over 4GB in size. If possible consider\nusing ChaCha20Poly1305 or AES-GCM instead of Blowfish.\n\nFor older applications that don't have support for `ChaCha20Poly1305`, `AES-256-GCM` is\nrecommended, however it has many drawbacks:\n  - Slower than `ChaCha20Poly1305`.\n  - Catastrophic failure if nonce values are reused.\n\nNote that the `Crypto` and `Cryptodome` Python packages are no longer recommended for\nnew applications, instead consider using the [cryptography](https://cryptography.io/) package.\n\nExample using `ChaCha20Poly1305`:\n```\nimport os\n# Import ChaCha20Poly1305 from cryptography\nfrom cryptography.hazmat.primitives.ciphers.aead import ChaCha20Poly1305\n# Our plaintext to encrypt\nplain_text = b\"Secret text to encrypt\"\n# We do not require authenticated but unencrypted data, so set to None\naad = None\n# Generate a secure key\nkey = ChaCha20Poly1305.generate_key()\n# Create a new ChaCha20Poly1305 instance with our secure key\nchacha = ChaCha20Poly1305(key)\n# Note: nonce values _must_ be regenerated every time they are used.\nnonce = os.urandom(12)\n# Encrypt our plaintext\ncipher_text = chacha.encrypt(nonce, plain_text, aad)\n# Decrypt the plain text using the nonce and cipher_text\nchacha.decrypt(nonce, cipher_text, aad)\n```\n\nExample using `AESGCM`:\n```\nimport os\n# Import AESGCM from cryptography\nfrom cryptography.hazmat.primitives.ciphers.aead import AESGCM\n# Our plaintext to encrypt\nplain_text = b\"Secret text to encrypt\"\n# We do not require authenticated but unencrypted data, so set to None\naad = None\n# Generate a secure key\nkey = AESGCM.generate_key(bit_length=128)\n# Create a new AESGCM instance with our secure key\naesgcm = AESGCM(key)\n# Note: nonce values _must_ be regenerated every time they are used.\nnonce = os.urandom(12)\n# Encrypt our plaintext\ncipher_text = aesgcm.encrypt(nonce, plain_text, aad)\n# Decrypt the plain text using the nonce and cipher_text\naesgcm.decrypt(nonce, cipher_text, aad)\n```\n\nFor more information on the cryptography module see:\n- https://cryptography.io/en/latest/\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "python_crypto_rule-crypto-hash-sha1", "message": "The application was found using an insecure or risky digest or signature algorithm. MD5\nand SHA1 hash algorithms have been found to be vulnerable to producing collisions.\n\nThis means\nthat two different values, when hashed, can lead to the same hash value. If the application is\ntrying\nto use these hash methods for storing passwords, then it is recommended to switch to a\npassword hashing\nalgorithm such as Argon2id or PBKDF2.\nIt is strongly recommended that a standard digest algorithm be chosen instead as implementing\na custom algorithm is prone to errors.\n\nNote that the `Crypto` and `Cryptodome` Python packages are no longer recommended for\nnew applications, instead consider using the [cryptography](https://cryptography.io/) package.\n\nExample of creating a SHA-384 hash using the `cryptography` package:\n```\nfrom cryptography.hazmat.primitives import hashes\n# Create a SHA384 digest\ndigest = hashes.Hash(hashes.SHA384())\n# Update the digest with some initial data\ndigest.update(b\"some data to hash\")\n# Add more data to the digest\ndigest.update(b\"some more data\")\n# Finalize the digest as bytes\nresult = digest.finalize()\n```\n\nFor more information on secure password storage see OWASP:\n- https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html\n\nFor more information on the cryptography module see:\n- https://cryptography.io/en/latest/\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "c_access_rule-umask", "message": "The umask function call sets the process's file mode creation mask. umask values determine\nwhat permissions a file should be created with and who can read or write to these files.\nEnsure that umask is given most restrictive possible setting depending on the context,\nusually 066 or 077, for more information please see:\nhttps://en.wikipedia.org/wiki/Umask#Mask_effect.\n", "parent_source": "gitlab", "severity": "`INFO`", "languages": "C"}, {"identifier": "c_access_rule-RpcImpersonateClient-ImpersonateLoggedOnUser", "message": "These functions may be used to either drop or change account privileges. If the calls\nfail, the process will continue to run with the privileges assigned to it on start. Depending\non\nthe logic of the application, this may allow attackers to abuse the system due to privileges\nnever\nbeing changed to a different access level.\n\nAlways ensure return values of this function are checked to determine if the application should\ncontinue to operate.\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "C"}, {"identifier": "c_buffer_rule-getenv-curl-getenv", "message": "This function's return value should be treated as untrusted input as it could be\nmodified by an attacker. Possible risks include:\n\n- The value being too large and causing buffer overflows\n- Files under the attacker's control being used maliciously\n- Files outside of an attacker's control becoming accessible, depending on\naccess privileges.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "C"}, {"identifier": "c_buffer_rule-StrCat-StrCatA", "message": "The `StrCat` family of functions do not guarantee the final string to be null terminated.\nConsider using one of the following alternatives: `StringCbCat`, `StringCbCatEx`,\n`StringCbCatN`, `StringCbCatNEx`, `StringCchCat`, `StringCchCatEx`, `StringCchCatN`, or\n`StringCchCatNEx`.\n\nFor more information please see: https://learn.microsoft.com/en-us/windows/win32/api/strsafe/\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "C"}, {"identifier": "c_buffer_rule-strccpy-strcadd", "message": "The `strccpy` and `strcadd` functions do not allow the caller to check that the destination\nsize\nof the buffer will fit the input buffer prior to copying.\n\nFor more information please see:\nhttps://docs.oracle.com/cd/E18752_01/html/816-5172/streadd-3gen.html\n", "parent_source": "gitlab", "severity": "`INFO`", "languages": "C"}, {"identifier": "c_buffer_rule-gets--getts", "message": "The gets() function reads a line from stdin into the provided buffer\nuntil either a terminating newline or EOF. This terminating newline or\nEOF is replaced with a null byte `'\\0'`. No check for buffer overruns are\nperformed so it is recommended to use `fgets()` instead. Do note\nthat some platforms will continue reading data after a `'\\0'` is encountered.\n\nUsage of `fgets()` is not recommended for reading binary based files or inputs,\ninstead the `read` or `fread` functions should be used.\n\nFor more information please see: https://linux.die.net/man/3/fgets\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "C"}, {"identifier": "c_buffer_rule-g-get-home-dir", "message": "This function is synonymous with `getenv(\"HOME\")` and should be treated\nas untrusted input as it could be modified by an attacker. Possible risks\ninclude:\n\n- The value being too large and causing buffer overflows\n- Files under the attacker's control being used maliciously\n- Files outside of an attacker's control becoming accessible, depending on\naccess privileges.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "C"}, {"identifier": "c_buffer_rule-equal-mismatch", "message": "This function is often discouraged by most C++ coding standards in favor of its safer\nalternatives provided since C++14. Consider using a form of this function:\n(std::equal, std::mismatch or std::is_permutation) that checks the second iterator\nbefore potentially reading past its bounds.\n\nFor more information please see: https://en.cppreference.com/w/cpp/algorithm\n", "parent_source": "gitlab", "severity": "`INFO`", "languages": "C"}, {"identifier": "c_buffer_rule-getwd", "message": "`getwd` does not contain a parameter to limit how many characters can be copied into the\ndestination buffer. For portability and security reasons `getwd` has been deprecated in\nfavor of `getcwd`.\n\nFor more information please see: https://linux.die.net/man/3/getcwd\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "C"}, {"identifier": "c_buffer_rule-lstrcpyn-wcsncpy", "message": "The `lstrcpyn` family of functions do not always check for invalid pointers or check if there\nis sufficient space prior to copying. The count argument limits the number of characters copied\nbut does validate if the count will fit within the size of the destination buffer, leading to\npotential overflows.\n\nIf developing for C Runtime Library (CRT), more secure versions of these functions should be\nused, see:\nhttps://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/strncpy-s-strncpy-s-l-wcsncpy-s-wcsncpy-s-l-mbsncpy-s-mbsncpy-s-l?view=msvc-170\n", "parent_source": "gitlab", "severity": "`INFO`", "languages": "C"}, {"identifier": "c_buffer_rule-streadd-strecpy", "message": "The `strecpy` and `streadd` functions require that the destination buffer size be at least\nfour\ntimes the size of the source due to each character potentially becoming a `\\` and 3 digits.\n\nFor more information please see:\nhttps://docs.oracle.com/cd/E18752_01/html/816-5172/streadd-3gen.html\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "C"}, {"identifier": "c_buffer_rule-memcpy-CopyMemory", "message": "The `memcpy` family of functions require the developer to validate that the destination buffer\nis the same size or larger than the source buffer. Buffer overflows could be introduced if care\nis not taken to validate buffer sizes.\n\nIf developing for C Runtime Library (CRT), more secure versions of these functions should be\nused, see:\nhttps://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/memcpy-s-wmemcpy-s?view=msvc-170\n", "parent_source": "gitlab", "severity": "`INFO`", "languages": "C"}, {"identifier": "c_buffer_rule-strlen-wcslen", "message": "The `strlen` family of functions does not handle strings that are not null\nterminated. This can lead to buffer over reads and cause the application to\ncrash by accessing unintended memory locations. It is recommended that `strnlen`\nbe used instead as a `maxlen` value can be provided.\n\nFor more information please see: https://linux.die.net/man/3/strnlen\n\nIf developing for C Runtime Library (CRT), more secure versions of these functions should be\nused, see:\nhttps://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/strnlen-strnlen-s?view=msvc-170\n", "parent_source": "gitlab", "severity": "`INFO`", "languages": "C"}, {"identifier": "c_buffer_rule-lstrcatn-wcsncat", "message": "Consider using more secure alternatives such as `snprintf`, instead of the\n`wcsncat` family of functions.\n\nIf developing for C Runtime Library (CRT), more secure versions of these functions should be\nused, see:\nhttps://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/strncat-strncat-l-wcsncat-wcsncat-l-mbsncat-mbsncat-l?view=msvc-170\n", "parent_source": "gitlab", "severity": "`INFO`", "languages": "C"}, {"identifier": "c_buffer_rule-strtrns", "message": "This function is easy to misuse by not accounting for the space necessary when transforming\nstrings. Ensure that the destination buffer is large enough to fit the transformed output.\n\nFor more information please see:\nhttps://docs.oracle.com/cd/E36784_01/html/E36877/strtrns-3gen.html\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "C"}, {"identifier": "c_buffer_rule-lstrcat-wcscat", "message": "The `strcat` family of functions are unable to limit how many bytes are copied\nto the destination buffer. It is recommended to use more secure alternatives such as\n`snprintf`.\n\nIf developing for C Runtime Library (CRT), more secure versions of these functions should be\nused, see:\nhttps://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/strcat-s-wcscat-s-mbscat-s?view=msvc-170\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "C"}, {"identifier": "c_buffer_rule-strcat", "message": "The `strcat` family of functions are unable to limit how many bytes are copied\nto the destination buffer. It is recommended to use more secure alternatives such as\n`snprintf`.\n\nFor more information please see: https://linux.die.net/man/3/snprintf\n\nIf developing for C Runtime Library (CRT), more secure versions of these functions should be\nused, see:\nhttps://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/strcat-s-wcscat-s-mbscat-s?view=msvc-170\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "C"}, {"identifier": "c_buffer_rule-lstrcpy-wcscpy", "message": "The `lstrcpy` family of functions do not provide the ability to limit or check buffer\nsizes before copying to a destination buffer. This can lead to buffer overflows. Consider\nusing more secure alternatives such as `strncpy_s`.\n\nIf developing for C Runtime Library (CRT), more secure versions of these functions should be\nused, see:\nhttps://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/strncpy-s-strncpy-s-l-wcsncpy-s-wcsncpy-s-l-mbsncpy-s-mbsncpy-s-l?view=msvc-170\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "C"}, {"identifier": "c_buffer_rule-scanf-vscanf", "message": "Format specifiers can take optional field widths, which should be\nused to limit how many characters are copied into the target buffer.\n\nFor more information please see: https://linux.die.net/man/3/scanf\n\nExample:\n```\n  char buf[11] = {0};\n  scanf(\"%10s\", &buf); // buf = AAAAAAAAAA\\0\n```\n\nIf developing for C Runtime Library (CRT), more secure versions of these functions should be\nused, see:\nhttps://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/scanf-s-scanf-s-l-wscanf-s-wscanf-s-l?view=msvc-170\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "C"}, {"identifier": "c_buffer_rule-realpath", "message": "The `realpath` function should not be called with a destination buffer as it could\nlead to overflowing if the path is greater than PATH_LEN. It is instead recommended\nto call `realpath` with the destination buffer set to NULL and use the return value\nas the resolved path. Be sure to free the returned pointer as realpath will allocate\nthe buffer internally using `malloc`.\n\nFor more information see: https://linux.die.net/man/3/realpath\n\nExample:\n\n```\nchar const *symlink_path = \"/tmp/symlink\";\nchar *resolved_path = NULL;\n\nresolved_path = realpath(symlink_path, NULL);\nif (errno == 0) {\n  // ... use resolved_path...\n  free(resolved_path);\n}\n```\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "C"}, {"identifier": "c_buffer_rule-strcpy", "message": "The `strcpy` family of functions do not provide the ability to limit or check buffer\nsizes before copying to a destination buffer. This can lead to buffer overflows. Consider\nusing more secure alternatives such as `strncpy` and provide the correct limit to the\ndestination buffer and ensure the string is null terminated.\n\nFor more information please see: https://linux.die.net/man/3/strncpy\n\nIf developing for C Runtime Library (CRT), more secure versions of these functions should be\nused, see:\nhttps://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/strncpy-s-strncpy-s-l-wcsncpy-s-wcsncpy-s-l-mbsncpy-s-mbsncpy-s-l?view=msvc-170\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "C"}, {"identifier": "c_buffer_rule-MultiByteToWideChar", "message": "The input buffer is the number of bytes in the string, but the size\nof the output buffer is the number of characters. To avoid overflows, the\napplication must determine the correct buffer size which depends on the data type\nthe buffer receives.\n\nFor more information see:\nhttps://learn.microsoft.com/en-us/windows/win32/intl/security-considerations--international-features\n", "parent_source": "gitlab", "severity": "`INFO`", "languages": "C"}, {"identifier": "c_buffer_rule-strcpyA-strcpyW", "message": "The `StrCpy` family of functions do not guarantee the final string to be null terminated.\nConsider\nusing one of the following alternatives `StringCbCopy`, `StringCbCopyEx`, `StringCbCopyN`,\n`StringCbCopyNEx`, `StringCchCopy`, `StringCchCopyEx`, `StringCchCopyN`, or `StringCchCopyNEx`.\n\nIf developing for C Runtime Library (CRT), more secure versions of these functions should be\nused, see:\nhttps://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/strncpy-s-strncpy-s-l-wcsncpy-s-wcsncpy-s-l-mbsncpy-s-mbsncpy-s-l?view=msvc-170\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "C"}, {"identifier": "c_buffer_rule-fscanf-sscanf", "message": "Format specifiers can take optional field widths, which should be\nused to limit how many characters are copied into the target buffer.\n\nExample:\n```\n  const char str[20] = \"AAAAAAAAAAAAAAAAAAA\";\n  char buf[11] = {0};\n  sscanf(str, \"%10s\", &buf); // buf = AAAAAAAAAA\\0\n```\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "C"}, {"identifier": "c_buffer_rule-sprintf-vsprintf", "message": "Use sprintf_s, snprintf, or vsnprintf instead. The `sprintf` family of functions do not allow\ncallers to set limits on how many bytes the destination buffer can hold. Consider using more\nsecure alternatives such as `snprintf`.\n\nFor more information please see: https://linux.die.net/man/3/snprintf\n\nIf developing for C Runtime Library (CRT), more secure versions of these functions should be\nused, see:\nhttps://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/sprintf-s-sprintf-s-l-swprintf-s-swprintf-s-l?view=msvc-170\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "C"}, {"identifier": "c_buffer_rule-strncat", "message": "The `strncat` family of functions are easy to use incorrectly when calculating destination\nbuffer\nsizes. It is recommended to use more secure alternatives such as `snprintf`.\n\nFor more information please see: https://linux.die.net/man/3/snprintf\n\nIf developing for C Runtime Library (CRT), more secure versions of these functions should be\nused, see:\nhttps://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/strncat-s-strncat-s-l-wcsncat-s-wcsncat-s-l-mbsncat-s-mbsncat-s-l?view=msvc-170\n", "parent_source": "gitlab", "severity": "`INFO`", "languages": "C"}, {"identifier": "c_buffer_rule-getpw", "message": "The getpw() function is dangerous as it may overflow the provided\nbuffer when reading from the `/etc/passwd` file.  While the passwd file\nis not generally writeable, there are no protections offered by this function\nto protect from reading past the bounds of the destination buffer. This function\nis obsoleted by `getpwuid`.\n\nFor more information please see: https://linux.die.net/man/3/getpwuid\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "C"}, {"identifier": "c_buffer_rule-strncpy", "message": "The `strncpy` family of functions do not properly handle strings that are not null terminated.\nIt is recommended to use more secure alternatives such as `snprintf`.\n\nFor more information please see: https://linux.die.net/man/3/snprintf\n\nIf developing for C Runtime Library (CRT), more secure versions of these functions should be\nused, see:\nhttps://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/strncpy-s-strncpy-s-l-wcsncpy-s-wcsncpy-s-l-mbsncpy-s-mbsncpy-s-l?view=msvc-170\n", "parent_source": "gitlab", "severity": "`INFO`", "languages": "C"}, {"identifier": "c_buffer_rule-g-get-tmp-dir", "message": "This function is synonymous with `getenv(\"TMP\")` and should be treated\nas untrusted input as it could be modified by an attacker. Possible risks\ninclude:\n\n- The value being too large and causing buffer overflows\n- Files under the attacker's control being used maliciously\n- Files outside of an attacker's control becoming accessible, depending on\naccess privileges.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "C"}, {"identifier": "c_misc_rule-LoadLibraryEx", "message": "The `LoadLibraryEx` function is used to load DLLs dynamically. Depending on the filepath\nparameter,\nthe OS version, and the modes set for the process prior to calling LoadLibrary, DLL hijacking\nmay\nbe possible. Attackers can exploit this by placing DLL files with the same name in directories\nthat\nare searched before the legitimate DLL is.\n\nTo assist in preventing against this class of vulnerability consider:\n- Specifying a fully qualified path when using LoadLibraryEx.\n- Use the `LOAD_LIBRARY_SEARCH` flags with LoadLibraryEx or with SetDefaultDllDirectories.\n- If you use SetDefaultDllDirectories, be sure to use the AddDllDirectory or SetDllDirectory\n  functions to modify the list of directories.\n- Only use `SearchPath` if the `SetSearchPathMode` function is called with\n  `BASE_SEARCH_PATH_ENABLE_SAFE_SEARCHMODE`. (Note: this only moves the current directory to\n  the end of the SearchPath search list.)\n\nFor more information see the security remarks section of the MSDN documentation:\nhttps://learn.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-loadlibrarya#security-remarks\n\nFor general information securely loading dynamic link libraries, see the MSDN documentation:\nhttps://learn.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-security\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "C"}, {"identifier": "c_misc_rule-AddAccessAllowedAce", "message": "Make sure that you set inheritance by hand if you wish it to inherit.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "C"}, {"identifier": "c_misc_rule-SetSecurityDescriptorDacl", "message": "When `SetSecurityDescriptorDacl` is called with a null `pDacl` parameter and the\n`bDaclPresent` flag is `TRUE`, all access to the object is allowed. An attacker\ncould set the object to Deny all, which would include even the Administrator user(s).\n\nEither call `SetSecurityDescriptorDacl` with bDaclPresent as `FALSE`, or supply a valid\nnon-null `pDacl` parameter value.\n\nFor more information please see:\nhttps://learn.microsoft.com/en-us/windows/win32/api/securitybaseapi/nf-securitybaseapi-setsecuritydescriptordacl#remarks\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "C"}, {"identifier": "c_misc_rule-cuserid", "message": "`cuserid()` is poorly defined (e.g., some systems use the effective\nUID, like Linux, while others like System V use the real UID). Therefore, you can't trust\nwhat it does. The cuserid function was included in the 1988 version of POSIX, but removed\nfrom the 1990 version.  Also, if passed a non-null parameter, there's a risk of a buffer\noverflow if the passed-in buffer is not at least `L_cuserid` characters long.\n\nUse `getpwuid(geteuid())` and extract the desired information instead.\n\nFor more information please see: https://linux.die.net/man/3/getpwuid\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "C"}, {"identifier": "c_misc_rule-fopen-open", "message": "Usage of the `open` family of functions may hint at a potential Time Of Check Time Of Use\n(TOCTOU)\nvulnerability. An attacker may be able to modify the file being specified by the `open`\nfunction prior to the `open` function being called.\n\nPrior to calling `open`, use `lstat` to open the file and confirm the attributes\nare correct. Then use `open` to get a file descriptor to this file. Call `fstat` on the\n`open` file descriptor to confirm that `st_dev` and `st_ino` are equal between the two.\nIf they are, it is safe to read and operate on the file's contents.\n\nFor more information please see:\nhttps://wiki.sei.cmu.edu/confluence/display/c/FIO45-C.+Avoid+TOCTOU+race+conditions+while+accessing+files\n", "parent_source": "gitlab", "severity": "`INFO`", "languages": "C"}, {"identifier": "c_misc_rule-getlogin", "message": "The `getlogin` function suffers from many bugs or unknown behaviors depending on the\nsystem. Often, it gives only the first 8 characters of the login name. The user\ncurrently logged in on the controlling TTY of our program does not necessarily mean\nit is the user who started the process.\n\nUse getpwuid(geteuid()) and extract the desired information instead.\n\nFor more information please see: https://linux.die.net/man/3/getpwuid\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "C"}, {"identifier": "c_misc_rule-getpass", "message": "This function is obsolete and not portable. It was in SUSv2 but removed by POSIX.2. What\nit does exactly varies considerably between systems, particularly in where its prompt is\ndisplayed and where it gets its data. Some systems will write to stderr instead of stdout.\nSome will read from stdin if it can not be read from /dev/tty. In some systems the\nbuffer is static and limited to 127 characters, meaning the full password may not be returned\nproperly.\n\nIf you want to read input without terminal echoing enabled, see the description of the ECHO\nflag\nin the termios manual pager. If you ever read passwords from a terminal, be sure to zero the\npassword as soon as possible, to avoid leaving the cleartext password visible in the\nprocess' address space.\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "C"}, {"identifier": "c_misc_rule-LoadLibrary", "message": "The `LoadLibrary` function is used to load DLLs dynamically. Depending on the filepath\nparameter,\nthe OS version, and the modes set for the process prior to calling LoadLibrary, DLL hijacking\nmay\nbe possible. Attackers can exploit this by placing DLL files with the same name in directories\nthat\nare searched before the legitimate DLL is.\n\nTo assist in preventing against this class of vulnerability consider:\n- Specifying a fully qualified path when using LoadLibraryEx.\n- Use the `LOAD_LIBRARY_SEARCH` flags with LoadLibraryEx or with SetDefaultDllDirectories.\n- If you use SetDefaultDllDirectories, be sure to use the AddDllDirectory or SetDllDirectory\n  functions to modify the list of directories.\n- Only use `SearchPath` if the `SetSearchPathMode` function is called with\n  `BASE_SEARCH_PATH_ENABLE_SAFE_SEARCHMODE`. (Note: this only moves the current directory to\n  the end of the SearchPath search list.)\n\nFor more information see the security remarks section of the MSDN documentation:\nhttps://learn.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-loadlibrarya#security-remarks\n\nFor general information securely loading dynamic link libraries, see the MSDN documentation:\nhttps://learn.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-security\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "C"}, {"identifier": "c_race_rule-vfork", "message": "The `vfork` function is suffers from portability issues and is not recommended. In\nsome Linux systems `vfork` is vulnerable to a race condition while the child process\nis running as the user's UID but hasn't executed `execve`. The user may be able to send\nsignals to this process, which in `vfork` would not be sent to the parent process. As\na result a user may be able to cause a denial of service against the privileged process.\n\nUse `fork` instead and be aware of other potential Time Of Check Time Of Use (TOCTOU)\nvulnerabilities.\n\nFor more information please see:\nhttps://wiki.sei.cmu.edu/confluence/display/c/POS38-C.+Beware+of+race+conditions+when+using+fork+and+file+descriptors\n", "parent_source": "gitlab", "severity": "`INFO`", "languages": "C"}, {"identifier": "c_race_rule-access", "message": "Usage of the `access` function call hints at a potential Time Of Check Time Of Use (TOCTOU)\nvulnerability. Using the `access` function to check if a file exists and is readable before\nopening it, an attacker can create a race condition between the `access` call and\nopening the file. The attacker could replace the file with a different one or modify its\ncontent between the time the `access` function is called and the file is opened, thus\nbypassing the permission check.\n\nCall `setuid` to drop privileges on the process prior to opening any files. Instead of using\n`access`, use `lstat` prior to opening the file and confirm the attributes are correct. Then\nuse `open` to get a file descriptor to this file. Call `fstat` on the `open` file descriptor\nto confirm that `st_dev` and `st_ino` are equal between the two. If they are, it is safe to\nread and operate on the file's contents.\n\nFor more information please see:\nhttps://wiki.sei.cmu.edu/confluence/display/c/FIO45-C.+Avoid+TOCTOU+race+conditions+while+accessing+files\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "C"}, {"identifier": "c_race_rule-chown", "message": "Usage of the `chown` function call hints at a potential Time Of Check Time Of Use (TOCTOU)\nvulnerability. An attacker may be able to modify the file being specified by the `chmod`\nfunction prior to the `chown` function being called. Since `chown` will resolve symbolic links,\nan attacker may be able to exploit this fact to have files outside of their control modified.\n\nIt is recommended that the `fchown` or the `lchown` functions be used instead. The `fchown`\nfunction takes a file descriptor instead of a file. The `lchown` function does not follow\nsymbolic links. Ensure the opened file descriptor is pointing to the correct file or\ndirectory prior to executing `fchown` or any other file based operations.\n\nFor more information please see:\nhttps://wiki.sei.cmu.edu/confluence/display/c/FIO01-C.+Be+careful+using+functions+that+use+file+names+for+identification\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "C"}, {"identifier": "c_race_rule-chmod", "message": "Usage of the `chmod` function call hints at a potential Time Of Check Time Of Use (TOCTOU)\nvulnerability. An attacker may be able to modify the file being specified by the `chmod`\nfunction prior to the `chmod` function being called. Since `chmod` will resolve symbolic links,\nan attacker may be able to exploit this fact to have files outside of their control modified.\n\nIt is recommended that the `fchmod` function be used instead since this function takes\na file descriptor instead of a file. Ensure the opened file descriptor is pointing to\nthe correct file or directory prior to executing `fchmod` or any other file based operations.\n\nFor more information please see:\nhttps://wiki.sei.cmu.edu/confluence/display/c/FIO01-C.+Be+careful+using+functions+that+use+file+names+for+identification\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "C"}, {"identifier": "c_race_rule-readlink", "message": "Usage of the `readlink` function call hints at a potential Time Of Check Time Of Use (TOCTOU)\nvulnerability. An attacker may be able to modify the file being specified by the `readlink`\nfunction prior to the `readlink` function being called. Additionally, care must be taken\nthat the buffer provided is large enough to hold the contents of the file.\n\nInstead of using `readlink`, use `lstat` prior to opening the file and confirm the attributes\nare correct. Then use `open` to get a file descriptor to this file. Call `fstat` on the\n`open` file descriptor to confirm that `st_dev` and `st_ino` are equal between the two.\nIf they are, it is safe to read and operate on the file's contents.\n\nFor more information please see:\nhttps://wiki.sei.cmu.edu/confluence/display/c/FIO45-C.+Avoid+TOCTOU+race+conditions+while+accessing+files\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "C"}, {"identifier": "c_random_rule-drand48-erand48", "message": "The detected function is not sufficient at generating security-related random numbers,\nsuch as those used in key and nonce creation. Consider using the libsodium library's\n`randombytes_random` function instead. More information on libsodium's random number\ngenerators can be found here: https://libsodium.gitbook.io/doc/generating_random_data.\n\nIf FIPS validation is required, consider using OpenSSLs `RAND_bytes` family of functions after\nenabling the `FIPS_mode_set`.\n\nFor more information on OpenSSL random numbers please see:\nhttps://wiki.openssl.org/index.php/Random_Numbers\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "C"}, {"identifier": "c_free_rule-memalign", "message": "The `memalign` function may not check that the alignment argument is correct. Calling\nfree (on non Linux-based systems) may fail and in certain circumstances this failure\nmay be exploitable. This function has been deprecated in favor of `posix_memalign`.\n\nFor more information please see: https://linux.die.net/man/3/memalign\n", "parent_source": "gitlab", "severity": "`INFO`", "languages": "C"}, {"identifier": "c_shell_rule-system", "message": "It is generally not recommended to call out to the operating system to execute commands.\nWhen the application is executing file system based commands, user input should never be used\nin\nconstructing commands or command arguments. If possible, determine if a library can be used\ninstead to provide the same functionality. Otherwise, consider hard coding both the command\nand arguments to be used, or at the very least restricting which arguments can be passed\nto the command execution function.\n\nFor more information please see:\nhttps://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=87152177\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "C"}, {"identifier": "c_shell_rule-CreateProcessAsUser-CreateProcessWithLogon", "message": "Due to how `CreateProcess` parses spaces, an attacker may be able to exploit this function\nby creating a binary with the same name that is loaded first, depending on the search path\norder.\n\nEnsure that quotation marks around the executable path are used, such as:\n```\nCreateProcessAsUser(hToken, NULL, \"\\\"C:\\\\Program Files\\\\MyApp.exe\\\"\", ...)\n```\nFor more information, please see MSDNs documentation at:\nhttps://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessasusera#security-remarks\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "C"}, {"identifier": "c_shell_rule-CreateProcess", "message": "Due to how `CreateProcess` parses spaces, an attacker may be able to exploit this function\nby creating a binary with the same name that is loaded first, depending on the search path\norder.\n\nEnsure that quotation marks around the executable path are used, such as:\n```\nCreateProcessA(NULL, \"\\\"C:\\\\Program Files\\\\MyApp.exe\\\"\", ...)\n```\nFor more information, please see MSDNs documentation at:\nhttps://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessa#security-remarks\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "C"}, {"identifier": "c_shell_rule-execl-execlp", "message": "It is generally not recommended to call out to the operating system to execute commands.\nWhen the application is executing file system based commands, user input should never be used\nin\nconstructing commands or command arguments. If possible, determine if a library can be used\ninstead to provide the same functionality. Otherwise, consider hard coding both the command\nand arguments to be used, or at the very least restricting which arguments can be passed\nto the command execution function.\n\nPlease see the compliant solutions in the following page:\nhttps://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=87152177\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "C"}, {"identifier": "c_integer_rule-atoi-atol", "message": "The `atoi` family of functions can potentially overflow or underflow integer values. Consider\nusing `stroul` instead.\n\nFor more information please see:\nhttps://wiki.sei.cmu.edu/confluence/display/c/ERR34-C.+Detect+errors+when+converting+a+string+to+a+number\n", "parent_source": "gitlab", "severity": "`INFO`", "languages": "C"}, {"identifier": "c_tmpfile_rule-tmpnam-tempnam", "message": "There exists a possible race condition in between the time that `tempnam` or `tmpnam`\nreturns a pathname, and the time that the program opens it, another program might create\nthat pathname using `open`, or create it as a symbolic link.\n\nConsider using the `mkstemp` function instead, but be aware it also contains possible\nrisks. Ensure the process has called the `umask` function with restricted permissions prior\nto calling `mkstemp` and validate the permissions prior to using the file descriptor.\n\nFor more information on temporary files please see:\nhttps://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=87152425\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "C"}, {"identifier": "c_tmpfile_rule-GetTempFileName", "message": "The `GetTempFileName` function works by generating a randomly named file, creating the file\n(if it does not exist) and then closing it. An application wishing to use this temporary file\nwill need to reopen this file to begin working with it. This leads to a potential\nTime Of Check Time Of Use (TOCTOU) vulnerability, as an attacker could replace or modify\nthe contents of the file prior to it being used by the application.\n\nConsider generating a random filename and opening the file directly in a single `CreateFile`\nor `OpenFile` call.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "C"}, {"identifier": "c_tmpfile_rule-tmpfile", "message": "There exists a possible race condition in between the time that `tmpfile` returns\na pathname, and the time that the program opens it, another program might create\nthat pathname using `open`, or create it as a symbolic link.\n\nConsider using the `mkstemp` function instead, but be aware it also contains possible\nrisks. Ensure the process has called the `umask` function with restricted permissions prior\nto calling `mkstemp` and validate the permissions prior to using the file descriptor.\n\nFor more information on temporary files please see:\nhttps://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=87152425\n", "parent_source": "gitlab", "severity": "`INFO`", "languages": "C"}, {"identifier": "c_tmpfile_rule-mktemp", "message": "The `mktemp` function should no longer be used due to multiple flaws. Some implementations\ncreated random files by using known information like the process ID and a single letter. This\nallows for possible race conditions where an attacker could guess or manipulate these files\nprior to them being used.\n\nConsider using the `mkstemp` function instead, but be aware it also contains possible\nrisks. Ensure the process has called the `umask` function with restricted permissions prior\nto calling `mkstemp` and validate the permissions prior to using the file descriptor.\n\nFor more information on temporary files please see:\nhttps://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=87152425\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "C"}, {"identifier": "c_tmpfile_rule-mkstemp", "message": "Some older Unix-like systems, `mkstemp` would create temp files with 0666 permissions,\nmeaning the file created would be read/write access for all users.\n\nEnsure the process has called the `umask` function with restricted permissions prior\nto calling `mkstemp` and validate the permissions prior to using the file descriptor.\n\nFor more information on temporary files please see:\nhttps://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=87152425\n", "parent_source": "gitlab", "severity": "`INFO`", "languages": "C"}, {"identifier": "c_crypto_rule-EVP-des-ecb-EVP-des-cbc", "message": "The DES algorithm has not been recommended for over 15 years and was withdrawn from NIST (FIPS\n46-3) in 2005.\n\nConsider using libsodium's `crypto_secretbox_easy` authenticated encryption functions instead.\n\nFor more information please see:\n https://libsodium.gitbook.io/doc/secret-key_cryptography/secretbox.\n\nIf you must be FIPS compliant, consider using OpenSSLs AES or 3DES ciphers.\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "C"}, {"identifier": "c_crypto_rule-crypt-crypt-r", "message": "The crypt functions are not recommended due to the significantly small\nkey space. Modern hardware can crack crypt produced passwords relatively quickly.\n\nConsider using the Argon2id password hashing algorithm provided by libsodium.\nFor more information please see: https://libsodium.gitbook.io/doc/password_hashing.\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "C"}, {"identifier": "c_crypto_rule-EVP-rc4-40-EVP-rc2-40-cbc", "message": "The RC4 algorithm is vulnerable to many attacks and should no longer be used for encrypting\ndata streams.\n\nConsider using libsodium's `crypto_secretstream_xchacha20poly1305` stream cipher encryption\nfunctions instead. For more information please see:\nhttps://libsodium.gitbook.io/doc/secret-key_cryptography/secretstream\n\nIf you must be FIPS compliant, consider using OpenSSLs AES or 3DES ciphers.\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "C"}, {"identifier": "c_format_rule-snprintf-vsnprintf", "message": "Format string vulnerabilities allow an attacker to read or in some cases, potentially write\ndata to\nand from locations in the processes' memory. To prevent against format string attacks, do not\nallow\nusers or un-validated input to provide the format specification.\nConsider using a constant for the format specification, or strip all format\nspecifiers from the input prior to calling the `snprintf` family of functions.\n\nNote that some variations of this function do not always null terminate the strings.\n\nFor more information on using snprintf please see: https://linux.die.net/man/3/snprintf\n\nFor more information on format string attacks please see OWASP's attack guide:\nhttps://owasp.org/www-community/attacks/Format_string_attack\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "C"}, {"identifier": "c_format_rule-printf-vprintf", "message": "Format string vulnerabilities allow an attacker to read or in some cases, potentially write\ndata to\nand from locations in the processes' memory. To prevent against format string attacks, do not\nallow\nusers or un-validated input to provide the format specification.\nConsider using a constant for the format specification, or only allow specific\ncharacters to be provided to the format argument for the `printf` family of functions.\n\nFor more information please see: https://linux.die.net/man/3/fprintf\n\nFor more information on format string attacks please see OWASP's attack guide:\nhttps://owasp.org/www-community/attacks/Format_string_attack\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "C"}, {"identifier": "c_format_rule-syslog", "message": "Format string vulnerabilities allow an attacker to read or in some cases, potentially write\ndata to\nand from locations in the processes' memory. To prevent against format string attacks, do not\nallow\nusers or un-validated input to provide the format specification.\nConsider using a constant for the format specification, or strip all format\nspecifiers from the input prior to calling the `syslog` function.\n\nFor more information please see: https://capec.mitre.org/data/definitions/67.html\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "C"}, {"identifier": "c_format_rule-fprintf-vfprintf", "message": "Format string vulnerabilities allow an attacker to read or in some cases,\npotentially write data to\nand from locations in the processes' memory. To prevent against format\nstring attacks, do not allow\nusers or un-validated input to provide the format specification.\nConsider using a constant for the format specification, or only allow specific\ncharacters to be provided to the format argument for the `fprintf` family of functions.\n\nFor more information please see: https://linux.die.net/man/3/fprintf\n\nFor more information on format string attacks please see OWASP's attack\nguide: https://owasp.org/www-community/attacks/Format_string_attack\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "C"}, {"identifier": "c_obsolete_rule-ulimit", "message": "The ulimit function is obsolete and no longer recommended. Use `getrlimit(2)`,\n`setrlimit`, or `sysconf` instead.\n\nFor more information please see: https://linux.die.net/man/3/setrlimit\n", "parent_source": "gitlab", "severity": "`INFO`", "languages": "C"}, {"identifier": "c_obsolete_rule-usleep", "message": "The `usleep` function has been deprecated, use `nanosleep` or `setitimer` instead.\n\nFor more information please see: https://linux.die.net/man/3/setitimer\n", "parent_source": "gitlab", "severity": "`INFO`", "languages": "C"}, {"identifier": "c_obsolete_rule-gsignal-ssignal", "message": "The `gsignal` and `ssignal` functions are obsolete and no longer recommended. Consider\nusing the `raise` or `sigaction` functions instead for process signalling.\n\nFor more information please see: https://linux.die.net/man/3/sigaction\n", "parent_source": "gitlab", "severity": "`INFO`", "languages": "C"}, {"identifier": "java_xml_rule-SAMLIgnoreComments", "message": "SAML parses attestations as an XML document. By processing XML comments,\ncomment fields can end up modifying the interpretation of input fields.\nThis could allow an adversary to insert an XML comment to break up the attestation's\nusername or other fields, allowing an attacker to bypass authorization or authentication\nchecks.\n\nTo remediate this issue, when using `org.opensaml.xml.parse.BasicParserPool` ensure\n`setIgnoreComments(true)` is called.\n\nFor more information on how this issue can be exploited see:\nhttps://developer.okta.com/blog/2018/02/27/a-breakdown-of-the-new-saml-authentication-bypass-vulnerability\n\nFor more information on SAML security see OWASP:\nhttps://cheatsheetseries.owasp.org/cheatsheets/SAML_Security_Cheat_Sheet.html\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "java_xml_rule-XsltTransform", "message": "The application performs XSLT translation with potentially malicious input. An adversary who\nis able to influence the\nloaded\nXSL document could call XSL functions or exploit External XML Entity (XXE) attacks that allow\nfile\nretrieval or force the parser to connect to arbitrary servers to exfiltrate files. It is\nstrongly\nrecommended that an alternative approach is used to work with XML data.\n\nFor increased security, never process user-supplied XSL style sheets. If XSLT processing is\nabsolutely\nnecessary, ensure that `FEATURE_SECURE_PROCESSING` is enabled prior to processing the XSLT\nfile:\n```\n// Create a new TransformerFactory instance\nTransformerFactory transformerFactory = TransformerFactory.newInstance();\n// Enable the FEATURE_SECURE_PROCESSING feature\ntransformerFactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n// Read in the XML Source\nSource xmlSource = new StreamSource(new FileInputStream(\"hardcoded.xml\"));\n// Read in the XSL template file\nSource xslSource = new StreamSource(new FileInputStream(\"hardcoded.xsl\"));\n/// Create the transformer object to do the transformation\nTransformer transformer = transformerFactory.newTransformer(xslSource);\n// Create a Result object for output\nResult result = new StreamResult(System.out);\n// Execute the transformation process\ntransformer.transform(xmlSource, result);\n```\n\nFor more information on XML security see OWASP's guide:\nhttps://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#java\n\nFor more information on the secure processing feature see:\n- https://xml.apache.org/xalan-j/features.html#secureprocessing\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "java_xml_rule-XmlDecoder", "message": "Deserialization attacks exploit the process of reading serialized data and turning it back\ninto an object. By constructing malicious objects and serializing them, an adversary may\nattempt to:\n\n- Inject code that is executed upon object construction, which occurs during the\ndeserialization process.\n- Exploit mass assignment by including fields that are not normally a part of the serialized\ndata but are read in during deserialization.\n\nConsider safer alternatives such as serializing data in the JSON format. Ensure any format\nchosen allows\nthe application to specify exactly which object types are allowed to be deserialized.\nAdditionally, when\ndeserializing, never deserialize to base object types like `Object` and only cast to the exact\nobject\ntype that is expected.\n\nTo protect against mass assignment, only allow deserialization of the specific fields that are\nrequired. If this is not easily done, consider creating an intermediary type that\ncan be serialized with only the necessary fields exposed.\n\nDo note that `XMLEncoder` and `XMLDecoder` are not recommended. If the application must\nuse this serialization method, use a custom ClassLoader to prevent loading of arbitrary\nclasses:\n```\nXMLDecoder decoder = new XMLDecoder(inputStream, null, null, new ClassLoader() {\n    @Override\n    protected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {\n        if (!name.equals(NameOfBeanHere.class.getName()) &&\n!name.equals(XMLDecoder.class.getName())) {\n            throw new RuntimeException(\"Unauthorized deserialization attempt: \" + name);\n        }\n\n        throw new ClassNotFoundException(name);\n    }\n});\n```\n\nFor more information on XML security see OWASP's guide:\nhttps://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#java\n\nFor more details on deserialization attacks in general, see OWASP's guide:\nhttps://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html\n\nIt should be noted that [tools exist](https://github.com/frohoff/ysoserial) to\nautomatically create\nexploit code for these vulnerabilities.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "java_password_rule-ConstantDBPassword", "message": "A potential hard-coded password was identified in a database connection string.\nPasswords should not be stored directly in code\nbut loaded from secure locations such as a Key Management System (KMS).\n\nThe purpose of using a Key Management System is so access can be audited and keys easily\nrotated\nin the event of a breach. By hardcoding passwords, it will be extremely difficult to determine\nwhen or if, a key is compromised.\n\nThe recommendation on which KMS to use depends on the environment the application is running\nin:\n\n- For Google Cloud Platform consider [Cloud Key Management](https://cloud.google.com/kms/docs)\n- For Amazon Web Services consider [AWS Key Management](https://aws.amazon.com/kms/)\n- For on premise or other alternatives to cloud providers, consider [Hashicorp's\nVault](https://www.vaultproject.io/)\n- For other cloud providers, please see their documentation\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "java_password_rule-HardcodeKey", "message": "A potential cryptographic key was identified in a hard-coded string.\nCryptographic keys should not be stored directly in code\nbut loaded from secure locations such as a Key Management System (KMS).\n\nThe purpose of using a Key Management System is so access can be audited and keys easily\nrotated\nin the event of a breach. By hardcoding passwords, it will be extremely difficult to determine\nwhen or if, a key is compromised.\n\nThe recommendation on which KMS to use depends on the environment the application is running\nin:\n\n- For Google Cloud Platform consider [Cloud Key Management](https://cloud.google.com/kms/docs)\n- For Amazon Web Services consider [AWS Key Management](https://aws.amazon.com/kms/)\n- For on premise or other alternatives to cloud providers, consider [Hashicorp's\nVault](https://www.vaultproject.io/)\n- For other cloud providers, please see their documentation\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "java_password_rule-HardcodeKeyEquals", "message": "A potential hard-coded password was identified in a hard-coded string.\nPasswords should not be stored directly in code\nbut loaded from secure locations such as a Key Management System (KMS).\n\nThe purpose of using a Key Management System is so access can be audited and keys easily\nrotated\nin the event of a breach. By hardcoding passwords, it will be extremely difficult to determine\nwhen or if, a key is compromised.\n\nThe recommendation on which KMS to use depends on the environment the application is running\nin:\n\n- For Google Cloud Platform consider [Cloud Key Management](https://cloud.google.com/kms/docs)\n- For Amazon Web Services consider [AWS Key Management](https://aws.amazon.com/kms/)\n- For on premise or other alternatives to cloud providers, consider [Hashicorp's\nVault](https://www.vaultproject.io/)\n- For other cloud providers, please see their documentation\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "java_password_rule-HardcodePassword", "message": "A potential hard-coded password was identified in a hard-coded string.\nPasswords should not be stored directly in code\nbut loaded from secure locations such as a Key Management System (KMS).\n\nThe purpose of using a Key Management System is so access can be audited and keys easily\nrotated\nin the event of a breach. By hardcoding passwords, it will be extremely difficult to determine\nwhen or if, a key is compromised.\n\nThe recommendation on which KMS to use depends on the environment the application is running\nin:\n\n- For Google Cloud Platform consider [Cloud Key Management](https://cloud.google.com/kms/docs)\n- For Amazon Web Services consider [AWS Key Management](https://aws.amazon.com/kms/)\n- For on premise or other alternatives to cloud providers, consider [Hashicorp's\nVault](https://www.vaultproject.io/)\n- For other cloud providers, please see their documentation\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "java_password_rule-EmptyDBPassword", "message": "The application does not provide authentication when communicating a database\nserver. It is strongly recommended that the database server be configured with\nauthentication and restrict what queries users can execute.\n\nPlease see your database server's documentation on how to configure a password.\n\nAdditionally, passwords should not be stored directly in code\nbut loaded from secure locations such as a Key Management System (KMS).\n\nThe purpose of using a Key Management System is so access can be audited and keys easily\nrotated\nin the event of a breach. By hardcoding passwords, it will be extremely difficult to determine\nwhen or if, a key is compromised.\n\nThe recommendation on which KMS to use depends on the environment the application is running\nin:\n\n- For Google Cloud Platform consider [Cloud Key Management](https://cloud.google.com/kms/docs)\n- For Amazon Web Services consider [AWS Key Management](https://aws.amazon.com/kms/)\n- For on premise or other alternatives to cloud providers, consider [Hashicorp's\nVault](https://www.vaultproject.io/)\n- For other cloud providers, please see their documentation\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "java_smtp_rule-InsecureSmtp", "message": "The Apache commons mail client by default does not enable TLS server identity.\nThis allows for an adversary who is in between the application and the target host to intercept\npotentially sensitive information or transmit malicious data.\n\nEnable checking server identity by calling `Email.setSSLCheckServerIdentity(true)`\n\nExample email client that enables TLS and server identity:\n```\n// Create an email client\nEmail email = new SimpleEmail();\n// Configure the email hostname\nemail.setHostName(\"smtp.mail.example.com\");\n// Set the port\nemail.setSmtpPort(465);\n// Securely retrieve username and password values\nString username = getUserNameFromKMSorSecretStore();\nString password = getPasswordFromKMSorSecretStore();\n// Configure the Authenticator\nDefaultAuthenticator auth = new DefaultAuthenticator(username, password);\n// Set the authenticator\nemail.setAuthenticator(auth);\n// Ensure we use SSL on connect\nemail.setSSLOnConnect(true);\n// Ensure we validate server identity\nemail.setSSLCheckServerIdentity(true);\n// configure the rest of the email\nemail.setFrom(\"x@example.com\");\nemail.setSubject(\"TestMail\");\nemail.setMsg(\"This is a test mail ... :-)\");\nemail.addTo(\"y@example.com\");\nemail.send();\n```\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "java_smtp_rule-SmtpClient", "message": "The application was found calling `MimeMessage` methods without encoding\nnew line characters. Much like HTTP, Simple Mail Transfer Protocol (SMTP) is a\ntext based protocol that uses headers to convey additional directives for how\nemail messages should be treated. An adversary could potentially cause email\nmessages to be sent to unintended recipients by abusing the CC or BCC headers\nif they were able to inject them.\n\nTo mitigate this issue, `\\r\\n` (CRLF) character sequences must be escaped\nor encoded prior to being used in any of the `MimeMessage` methods.\n\nExample that escapes values that come from user input with\n[Apache Commons Text](https://commons.apache.org/proper/commons-text/):\n```\n// Create a MimeMessage with a javax.mail.Session\nMessage message = new MimeMessage(session);\n// Set the from address\nmessage.setFrom(new InternetAddress(\"source@example.com\"));\n// Set the to address\nmessage.setRecipients(Message.RecipientType.TO,new InternetAddress[] {new\nInternetAddress(\"destination@example.com\")});\n// Example user input\nString subject = \"potentially malicious data\";\nString headerValue = \"potentially malicious data\";\n// Use Apache Commons Text StringEscapeUtils.escapeJava to encode \\r\\n to \\\\r\\\\n.\nmessage.setSubject(StringEscapeUtils.escapeJava(subject));\n// Use Apache Commons Text StringEscapeUtils.escapeJava to encode \\r\\n to \\\\r\\\\n.\nmessage.addHeader(\"HeaderName\", StringEscapeUtils.escapeJava(header));\n// Use Apache Commons Text StringEscapeUtils.escapeJava to encode \\r\\n to \\\\r\\\\n.\nmessage.setDescription(StringEscapeUtils.escapeJava(\"some description\"));\n// Use Apache Commons Text StringEscapeUtils.escapeJava to encode \\r\\n to \\\\r\\\\n.\nmessage.setDisposition(StringEscapeUtils.escapeJava(\"some disposition\"));\n// Set the mail body text\nmessage.setText(\"Some email content.\");\n// Send the message\n```\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "java_inject_rule-CLRFInjectionLogs", "message": "The application was found to take data from user input and output it into a logger method.\nWhen data from\nan untrusted source is sent to a logger without validation, an attacker could forge log\nentries\nor include malicious content. If the log file is processed automatically, the attacker can\nrender the file unusable by corrupting the format of the file or injecting unexpected\ncharacters. An attacker may also inject code or other commands into the log file and take\nadvantage of a vulnerability in the log processing utility (e.g. command injection or XSS).\n\nTo mitigate this issue, encode values that come from user input with a package such as\n[Apache Commons Text](https://commons.apache.org/proper/commons-text/) to escape the input:\n```\npublic String escapeValue(String value) {\n  return StringEscapeUtils.escapeJava(value);\n}\n```\n\nFor more information on log injection see OWASP:\nhttps://owasp.org/www-community/attacks/Log_Injection\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "java_inject_rule-SqlInjection", "message": "SQL Injection is a critical vulnerability that can lead to data or system compromise. By\ndynamically generating SQL query strings, user input may be able to influence the logic of\nthe SQL statement. This could lead to an adversary accessing information they should\nnot have access to, or in some circumstances, being able to execute OS functionality or code.\n\nReplace all dynamically generated SQL queries with parameterized queries. In situations where\ndynamic queries must be created, never use direct user input, but instead use a map or\ndictionary of valid values and resolve them using a user supplied key.\n\nFor example, some database drivers do not allow parameterized queries for `>` or `<` comparison\noperators. In these cases, do not use a user supplied `>` or `<` value, but rather have the\nuser\nsupply a `gt` or `lt` value. The alphabetical values are then used to look up the `>` and `<`\nvalues to be used in the construction of the dynamic query. The same goes for other queries\nwhere\ncolumn or table names are required but cannot be parameterized.\n\nExample using `PreparedStatement` queries:\n```\n// Some userInput\nString userInput = \"someUserInput\";\n// Your connection string\nString url = \"...\";\n// Get a connection from the DB via the DriverManager\nConnection conn = DriverManager.getConnection(url);\n// Create a prepared statement\nPreparedStatement st = conn.prepareStatement(\"SELECT name FROM table where name=?\");\n// Set each parameters value by the index (starting from 1)\nst.setString(1, userInput);\n// Execute query and get the result set\nResultSet rs = st.executeQuery();\n// Iterate over results\nwhile (rs.next()) {\n    // Get result for this row at the provided column number (starting from 1)\n    String result = rs.getString(1);\n    // ...\n}\n// Close the ResultSet\nrs.close();\n// Close the PreparedStatement\nst.close();\n```\n\nFor more information on SQL Injection see OWASP:\nhttps://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "java_inject_rule-HttpParameterPollution", "message": "The application was found including unvalidated user input into a URL, which could lead to\nHTTP Parameter Pollution (HPP) or worse, Server Side Request Forgery (SSRF). This could\nallow an adversary to override the value of a URL or a request parameter.  HTTP Parameter\nPollution\n(HPP) attacks consist of injecting encoded query string delimiters into other existing\nparameters. If a web\napplication does not properly sanitize the user input, an adversary may modify the logic of\nthese\nrequests to other applications.\n\nTo remediate this issue, never allow user input directly into creation of a URL or URL\nparameter. Consider\nusing a map to look up user-supplied information and return exact values to be used in the\ngeneration of\nrequests.\n\nExample using a map to look up a key to be used in a HTTP request:\n```\nHashMap<String, String> lookupTable = new HashMap<>();\nlookupTable.put(\"key1\", \"value1\");\nlookupTable.put(\"key2\", \"value2\");\nString userInput = request.getParameter(\"key\");\n\n// Create a CloseableHttpClient, ideally any requests issued should be done\n// out-of-band from the servlet request itself (such as using a separate thread/scheduler\nsystem)\ntry (final CloseableHttpClient httpClient = HttpClients.createDefault()) {\n    // Lookup the value from our user input from our lookupTable\n    String value = lookupTable.getOrDefault(userInput, \"value1\");\n    // Construct the url, with the hardcoded url and only pass in the value from the\nlookupTable,\n    // not direct user input\n    final HttpGet httpget = new HttpGet(\"https://example.com/getId?key=\"+value);\n    // Execute the request\n    CloseableHttpResponse clientResponse = httpClient.execute(httpget);\n    // Read the response\n    byte[] responseData = clientResponse.getEntity().getContent().readAllBytes();\n    // Handle the response\n    // ...\n}\n```\n\nIf using a map is not possible, the user-supplied input must be encoded prior to use, and\nnever allow full\nURLs:\n```\n// Get user input\nString userInput = request.getParameter(\"key\");\n// Encode the string using java.net.URLEncoder with the UTF-8 character set\nString encodedString = java.net.URLEncoder.encode(userInput, StandardCharsets.UTF_8);\n// Create a CloseableHttpClient, ideally any requests issued should be done\n// out-of-band from the servlet request itself (such as using a separate thread/scheduler\nsystem)\ntry (final CloseableHttpClient httpClient = HttpClients.createDefault()) {\n  // Construct the url, with the hardcoded url and only pass in the encoded value, never a\nfull URL\n  final HttpGet httpget = new HttpGet(\"https://example.com/getId?key=\"+encodedString);\n  // Execute the request\n  CloseableHttpResponse clientResponse = httpClient.execute(httpget);\n  // Read the response\n  byte[] responseData = clientResponse.getEntity().getContent().readAllBytes();\n  // handle the response\n}\n```\n\nFor more information on SSRF see OWASP:\nhttps://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html\n\nFor more information on HTTP Parameter Pollution see:\nhttps://en.wikipedia.org/wiki/HTTP_parameter_pollution\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "java_inject_rule-CommandInjection", "message": "OS command injection is a critical vulnerability that can lead to a full system\ncompromise as it may allow an adversary to pass in arbitrary commands or arguments\nto be executed.\n\nUser input should never be used in constructing commands or command arguments\nto functions which execute OS commands. This includes filenames supplied by\nuser uploads or downloads.\n\nEnsure your application does not:\n\n- Use user-supplied information in the process name to execute.\n- Use user-supplied information in an OS command execution function which does\nnot escape shell meta-characters.\n- Use user-supplied information in arguments to OS commands.\n\nThe application should have a hardcoded set of arguments that are to be passed\nto OS commands. If filenames are being passed to these functions, it is\nrecommended that a hash of the filename be used instead, or some other unique\nidentifier. It is strongly recommended that a native library that implements\nthe same functionality be used instead of using OS system commands, due to the\nrisk of unknown attacks against third party commands.\n\nWhen specifying the OS command, ensure the application uses the full path\ninformation, otherwise the OS may attempt to look up which process to execute\nand could be vulnerable to untrusted search path vulnerabilities (CWE-426).\n\nExample of safely executing an OS command:\n```\npublic static void executeCommand(String userFileData) throws java.io.IOException {\n    // Generate a random filename, do not use user input\n    String fileName = UUID.randomUUID().toString();\n    // Create a Buffered/FileWriter\n    BufferedWriter writer = new BufferedWriter(new FileWriter(fileName));\n    // Write the user content to our random file\n    writer.write(userFileData);\n    // Close the file to flush contents\n    writer.close();\n    // Create the process builder with a hardcoded path to the binary, and our randomly\ngenerated filename\n    ProcessBuilder processBuilder = new ProcessBuilder(\"/opt/app/path\", fileName);\n    // Start the process\n    Process process = processBuilder.start();\n    // Handle/redirect output of process here\n    // ...\n}\n```\n\nFor more information on OS command injection, see OWASP's guide:\nhttps://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "java_inject_rule-FileDisclosure", "message": "The `org.springframework.web.servlet.ModelAndView` class and\n`HttpRequest.getRequestDispatcher()`'s `include` and `forward` methods may\npotentially allow access to restricted files if called with user-supplied input.\n\nFor Spring MVC, the ModelAndView class looks up a view by name to resolve a `.jsp`\nfile. If this view name comes from user-supplied input, it could be abused to attempt\nto return a JSP view that the user should not have access to.\n\nThe `HttpRequest.getRequestDispatcher()`'s `include` and `forward` methods will return\nany file that is resolvable within the web application context. This includes the `web.xml`\nfile, any compiled classes, `jsp` files, and additional JAR or WAR libraries that are\naccessible.\n\nNever pass user-supplied input directly to any of these methods. Use a lookup table or\nhardcode\nwhich views or paths the user should be directed to. Another option is to use a simple HTTP\nredirect by returning an empty response body with a 301 status code and a `Location` redirect\nheader. In Java servlets, this can be done by using the `response.sendRedirect(...)` method.\n\nExample using a lookup table to resolve a view from a Spring MVC application:\n```\n@RequestMapping(value=\"/mvc\", method=RequestMethod.GET)\npublic ModelAndView mvc(HttpServletRequest request, HttpServletResponse response, Model model)\n {\n  // Create a look up table or pull from a data source\n  HashMap<String, String> lookupTable = new HashMap<>();\n  lookupTable.put(\"key1\", \"view1\");\n  lookupTable.put(\"key2\", \"view2\");\n  // Get user input\n  String userInput = request.getParameter(\"key\");\n  // Look up view from the user input\n  String viewValue = lookupTable.getOrDefault(userInput, userInput);\n  // return the new model and view\n  return new ModelAndView(viewValue);\n}\n```\n\nExample using a redirect instead of a `RequestDispatcher`:\n```\n// Create a look up table or pull from a data source\nHashMap<String, String> lookupTable = new HashMap<>();\nlookupTable.put(\"key1\", \"/Resource1\");\nlookupTable.put(\"key2\", \"/Resource2\");\n// Get user input\nString userInput = request.getParameter(\"key\");\n// Look up resource to redirect to from the user input\nString redirectValue = lookupTable.getOrDefault(userInput, \"/Resource1\");\n// Redirect the user\nresponse.sendRedirect(redirectValue);\n```\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "java_inject_rule-CustomInjection", "message": "SQL Injection is a critical vulnerability that can lead to data or system compromise. By\ndynamically generating SQL query strings, user input may be able to influence the logic of\nthe SQL statement. This could lead to an adversary accessing information they should\nnot have access to, or in some circumstances, being able to execute OS functionality or code.\n\nReplace all dynamically generated SQL queries with parameterized queries. In situations where\ndynamic queries must be created, never use direct user input, but instead use a map or\ndictionary of valid values and resolve them using a user-supplied key.\n\nFor example, some database drivers do not allow parameterized queries for `>` or `<` comparison\noperators. In these cases, do not use a user supplied `>` or `<` value, but rather have the\nuser\nsupply a `gt` or `lt` value. The alphabetical values are then used to look up the `>` and `<`\nvalues to be used in the construction of the dynamic query. The same goes for other queries\nwhere\ncolumn or table names are required but cannot be parameterized.\n\nExample using `PreparedStatement` queries:\n```\n// Some userInput\nString userInput = \"someUserInput\";\n// Your connection string\nString url = \"...\";\n// Get a connection from the DB via the DriverManager\nConnection conn = DriverManager.getConnection(url);\n// Create a prepared statement\nPreparedStatement st = conn.prepareStatement(\"SELECT name FROM table where name=?\");\n// Set each parameters value by the index (starting from 1)\nst.setString(1, userInput);\n// Execute query and get the result set\nResultSet rs = st.executeQuery();\n// Iterate over results\nwhile (rs.next()) {\n    // Get result for this row at the provided column number (starting from 1)\n    String result = rs.getString(1);\n    // ...\n}\n// Close the ResultSet\nrs.close();\n// Close the PreparedStatement\nst.close();\n```\n\nFor more information on SQL Injection see OWASP:\nhttps://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "java_inject_rule-LDAPInjection", "message": "LDAP injection attacks exploit LDAP queries to influence how data is returned by\nthe LDAP server.\n\nLater versions of Java's `InitialDirContext.search` introduced a four argument method, one of\nwhich is the `filterArg` parameter. The `filterArg` will be automatically encoded when\nquerying\nthe LDAP server. If this method signature is not available, the application must encode the\nLDAP strings manually.\n\nMore details on the four argument `search` method can be found here:\nhttps://docs.oracle.com/en/java/javase/20/docs/api/java.naming/javax/naming/directory/InitialDirContext.html#search(javax.naming.Name,java.lang.String,java.lang.Object[],javax.naming.directory.SearchControls)\n\nTo encode the string manually, it is recommended that all input passed to LDAP querying\nsystems\nencode the following values:\n\n- Any occurrence of the null character must be escaped as \u201c\\00\u201d.\n- Any occurrence of the open parenthesis character must be escaped as \u201c\\28\u201d.\n- Any occurrence of the close parenthesis character must be escaped as \u201c\\29\u201d.\n- Any occurrence of the asterisk character must be escaped as \u201c\\2a\u201d.\n- Any occurrence of the backslash character must be escaped as \u201c\\5c\u201d.\n\nExample function that safely encodes user-supplied input to be used in an LDAP query.\n```\npublic static String encodeLDAPString(String input) {\n  // Note the \\ character is replaced first\n  CharSequence[] chars = new CharSequence[] { \"\\\\\", \"\\0\", \"(\", \")\", \"*\" };\n  CharSequence[] encoded = new CharSequence[] { \"\\\\5c\", \"\\\\00\", \"\\\\28\", \"\\\\29\", \"\\\\2a\" };\n  // Iterate over each character sequence, replacing the raw value with an encoded version of\nit\n  for (int i = 0; i < chars.length; i++)\n  {\n      // re-assign to input\n      input = input.replace(chars[i], encoded[i]);\n  }\n  // return our modified input string\n  return input;\n}\n```\n\nExample code that using the `filterArgs` parameter which automatically encodes for us:\n```\n// Create a properties to hold the ldap connection details\nProperties props = new Properties();\n// Use the com.sun.jndi.ldap.LdapCtxFactory factory provider\nprops.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n// The LDAP server URL\nprops.put(Context.PROVIDER_URL, \"ldap://ldap.example.org:3889\");\n// User details for the connection\nprops.put(Context.SECURITY_PRINCIPAL, \"cn=admin,dc=example,dc=org\");\n// LDAP account password\nString ldapAccountPassword = getAccountPasswordFromSecureStoreOrKMS();\n// Pass in the LDAP password\nprops.put(Context.SECURITY_CREDENTIALS, ldapAccountPassword);\n\n// Create the LDAPContext\nInitialDirContext ldapContext = new InitialDirContext(props);\n// Example using SUBTREE_SCOPE SearchControls\nSearchControls searchControls = new SearchControls();\nsearchControls.setSearchScope(SearchControls.SUBTREE_SCOPE);\n\n// Get user input for query\nString userQuery = someUserInput;\n// Use searchArguments to hold the user-supplied input\nObject[] searchArguments = new Object[]{userQuery};\n// Hardcode the BaseDN, use the {0} format specifier to use the searchArguments array value,\nand pass in the search controls.\n// searchArguments automatically encode\nNamingEnumeration answer = ldapContext.search(\"dc=example,dc=org\", \"(cn={0})\",\nsearchArguments, searchControls);\n// Process the response answer\nwhile (answer.hasMoreElements()) {\n  ...\n}\n```\n\nFor more information on LDAP Injection see OWASP:\nhttps://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "java_inject_rule-SpotbugsPathTraversalAbsolute", "message": "The application dynamically constructs file or path information. If the path\ninformation comes from user input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or replacing it with unique values and\nuse `Path.resolve` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `Path.resolve` and not allowing direct user input:\n```\n// Class to store our user data along with a randomly generated file name\npublic static class UserData {\n    private String userFileNameUnsafe;\n    private String fileName;\n    public UserData(String userFileName) {\n        this.userFileNameUnsafe = userFileName;\n        // Generate a random ID for the filename\n        this.fileName = UUID.randomUUID().toString();\n    }\n    public String getUserFileNameUnsafe() { return userFileNameUnsafe; };\n    public String getFileName() { return fileName; };\n}\n\npublic static void main(String[] args) throws Exception {\n    // User input, saved only as a reference\n    UserData userData = new UserData(\"..\\\\test.txt\");\n    // Restrict all file processing to this directory only\n    String base = \"/var/app/restricted\";\n    Path basePath = Paths.get(base);\n    // Resolve the full path, but only use our random generated filename\n    Path fullPath = basePath.resolve(userData.getFileName());\n    // verify the path is contained within our basePath\n    if (!fullPath.startsWith(base)) {\n        throw new Exception(\"Invalid path specified!\");\n    }\n    // process / work with file\n}\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "java_inject_rule-OgnlInjection", "message": "The Object Graph Navigation Language (OGNL) is an expression language that allows access to\nJava objects and properties stored in an ActionContext. Usage of these low-level\nfunctions is discouraged because they can effectively execute strings as code, leading to\nremote code execution vulnerabilities. Consider using struts tags when processing\nuser-supplied input and templates.\n\nMuch like the Struts security guide recommending to not use raw `${}` EL expressions,\ndo not call or use the following OGNL packages with user-supplied input:\n\n- `com.opensymphony.xwork2.ognl`\n- `com.opensymphony.xwork2.util`\n- `com.opensymphony.xwork2.util.reflection`\n- `org.apache.struts2.util.StrutsUtil`\n\nFor more information on Struts2 security see:\nhttps://struts.apache.org/security/#do-not-use-incoming-untrusted-user-input-in-forced-expression-evaluation\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "java_inject_rule-ELInjection", "message": "An expression is built with a dynamic value. The source of the value(s) should be verified to\navoid that unfiltered values fall into this risky code evaluation.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "java_csrf_rule-SpringCSRFDisabled", "message": "The application fails to protect against Cross-Site Request Forgery (CSRF)\ndue to disabling Spring's CSRF protection features.\n\nThe vulnerability can be exploited by an adversary creating a link or form on a third\nparty site and tricking an authenticated victim to access them.\n\nTo remediate this issue, remove the call to `HttpSecurity.csrf().disable()` or remove\nthe custom `CsrfConfigurer`.\n\nFor more information on CSRF protection in Spring see:\nhttps://docs.spring.io/spring-security/reference/servlet/exploits/csrf.html#servlet-csrf\n\nAdditionally, consider setting all session cookies to have the `SameSite=Strict` attribute.\nIt should be noted that this may impact usability when sharing links across other mediums.\nIt is recommended that a two cookie based approach is taken, as outlined in the\n[Top level\nnavigations](https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis-08#section-8.8.2)\nsection\nof the SameSite RFC.\n\nFor more information on CSRF see OWASP's guide:\nhttps://owasp.org/www-community/attacks/csrf\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "java_perm_rule-DangerousPermissions", "message": "The application was found to permit the `RuntimePermission` of `createClassLoader`,\n`ReflectPermission` of `suppressAccessChecks`, or both.\n\nBy granting the `RuntimePermission` of `createClassLoader`, a compromised application\ncould instantiate their own class loaders and load arbitrary classes.\n\nBy granting the `ReflectPermission` of `suppressAccessChecks` an application will no longer\ncheck Java language access checks on fields and methods of a class. This will effectively\ngrant access to protected and private members.\n\nFor more information on `RuntimePermission` see:\nhttps://docs.oracle.com/javase/8/docs/api/java/lang/RuntimePermission.html\n\nFor more information on `ReflectPermission` see:\nhttps://docs.oracle.com/javase/8/docs/api/java/lang/reflect/ReflectPermission.html\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "java_perm_rule-OverlyPermissiveFilePermissionInline", "message": "The application was found setting file permissions to overly permissive values. Consider\nusing the following values if the application user is the only process to access\nthe file:\n\n- `r--` - read only access to the file\n- `w--` - write only access to the file\n- `rw-` - read/write access to the file\n\nExample setting read/write permissions for only the owner of a `Path`:\n```\n// Get a reference to the path\nPath path = Paths.get(\"/tmp/somefile\");\n// Create a PosixFilePermission set from java.nio.file.attribute\nSet<PosixFilePermission> permissions =\njava.nio.file.attribute.PosixFilePermissions.fromString(\"rw-------\");\n// Set the permissions\njava.nio.file.Files.setPosixFilePermissions(path, permissions);\n```\n\nFor all other values please see:\nhttps://en.wikipedia.org/wiki/File-system_permissions#Symbolic_notation\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "java_xxe_rule-XMLStreamRdr", "message": "External XML entities are a feature of XML parsers that allow documents to contain references\nto\nother documents or data. This feature can be abused to read files, communicate with external\nhosts,\nexfiltrate data, or cause a Denial of Service (DoS).\n\nIn most XML parsers, the recommendation to protect against XXE is to disable the doctype\nfeature.\nUnfortunately use of the `XMLInputFactory` requires that the doctypes feature be enabled.\nInstead\nthe application can set the `ACCESS_EXTERNAL_DTD` to an empty string and disable\n`javax.xml.stream.isSupportingExternalEntities`.\n\n\nCreates an `XMLInputFactory` stream parser, but disables accessing external DTD or entities:\n```\n// Create an XMLInputFactory\nXMLInputFactory factory = XMLInputFactory.newFactory();\n// Set the ACCESS_EXTERNAL_DTD property to an empty string so it won't access\n// entities using protocols\n// (ref:\nhttps://docs.oracle.com/javase/8/docs/api/javax/xml/XMLConstants.html#ACCESS_EXTERNAL_DTD)\nfactory.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");\n// Additionally, disable support for resolving external entities\nfactory.setProperty(\"javax.xml.stream.isSupportingExternalEntities\", false);\n// Continue to work with the factory/stream parser\n```\n\nFor more information on XML security see OWASP's guide:\nhttps://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#java\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "java_xxe_rule-SaxParserXXE", "message": "External XML entities are a feature of XML parsers that allow documents to contain references\nto\nother documents or data. This feature can be abused to read files, communicate with external\nhosts,\nexfiltrate data, or cause a Denial of Service (DoS).\n\nIt is recommended that the `SAXParser` is configured to disable DTD doctypes as this protects\nagainst the majority of XXE attacks.\n\nExample creating a SAXParser with disallowing the doctypes feature enabled:\n```\n// Create a SAXParserFactory\nSAXParserFactory saxParserFactory = SAXParserFactory.newInstance();\n// Enable the feature which disallows <!DOCTYPE declarations which includes referencing\nexternal entities.\nsaxParserFactory.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n// Create a new parser from this factory\nSAXParser parser = saxParserFactory.newSAXParser();\n// Parse the XML file, passing in a DefaultHandler (which also includes an empty entityResolve\nmethod)\nparser.parse(new FileInputStream(new File(\"bad.xml\")), new DefaultHandler());\n```\n\nFor more information on XML security see OWASP's guide:\nhttps://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#java\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "java_xxe_rule-XMLRdr", "message": "External XML entities are a feature of XML parsers that allow documents to contain references\nto\nother documents or data. This feature can be abused to read files, communicate with external\nhosts,\nexfiltrate data, or cause a Denial of Service (DoS).\n\nThe XMLReaderFactory has been deprecated. It is recommended that\n[SAXParserFactory](https://docs.oracle.com/javase/9/docs/api/javax/xml/parsers/SAXParserFactory.html)\nbe used\ninstead. Additionally when using the SAXParser it must be configured to disallow doctypes,\nwhich will\nprotect against the majority of XXE attacks.\n\nExample creating a SAXParser with disallowing the doctypes feature enabled:\n```\n// Create a SAXParserFactory\nSAXParserFactory saxParserFactory = SAXParserFactory.newInstance();\n// Enable the feature which disallows <!DOCTYPE declarations which includes referencing\nexternal entities.\nsaxParserFactory.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n// Create a new parser from this factory\nSAXParser parser = saxParserFactory.newSAXParser();\n// Parse the XML file, passing in a DefaultHandler (which also includes an empty entityResolve\nmethod)\nparser.parse(new FileInputStream(new File(\"bad.xml\")), new DefaultHandler());\n```\n\nFor more information on XML security see OWASP's guide:\nhttps://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#java\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "java_cookie_rule-RequestParamToHeader", "message": "HTTP Response Splitting is a vulnerability where Carriage Return (CR `\\r`) and Line Feed (LF\n`\\n`)\ncharacters are introduced into an HTTP header from user-supplied input. By injecting the\n`\\r\\n`\ncharacter sequence, an adversary could potentially modify how the response is interpreted by\nthe\nclient or any down stream caching services. This could allow an adversary to poison the cache\ndata or execute Cross-Site Scripting (XSS) attacks.\n\nSome Java application servers such as [Apache Tomcat](https://tomcat.apache.org/) will\nautomatically encode\ncharacters from being set in response headers as a space `0x20` character. If your application\nserver does\nnot automatically provide this functionality, user-supplied input that is used in header keys\nor values must be\nvalidated.\n\nExample of validating headers to only allow valid characters:\n```\n// throws an IllegalArgumentException if the provided value contains invalid characters\npublic void validateHeader(String value) throws IllegalArgumentException {\n    char[] chars = value.toCharArray();\n\n    // iterate over every character\n    for (int i = 0; i < chars.length; i++) {\n        char c = chars[i];\n\n        // check for any characters below 0x21 as well as: '\"' ',' ';' '\\' and 0x7f.\n        if (c < 0x21 || c == '\"' || c == ',' || c == ';' || c == '\\\\' || c == 0x7f) {\n            throw new IllegalArgumentException(\"Invalid character in cookie detected:\n{0}\".format(Integer.toString(c)));\n        }\n    }\n}\n```\n\nAlternatively, you could use a string escape package such as\n[Apache Commons Text](https://commons.apache.org/proper/commons-text/) to escape the input:\n```\npublic String escapeValue(String value) {\n  return StringEscapeUtils.escapeJava(value);\n}\n```\n\nFor more information on response splitting attacks see OWASP:\nhttps://owasp.org/www-community/attacks/HTTP_Response_Splitting\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "java_cookie_rule-HttpResponseSplitting", "message": "HTTP Response Splitting is a vulnerability where Carriage Return (CR `\\r`) and Line Feed (LF\n`\\n`)\ncharacters are introduced into an HTTP header from user-supplied input. By injecting the\n`\\r\\n`\ncharacter sequence, an adversary could potentially modify how the response is interpreted by\nthe\nclient or any downstream caching services. This could allow an adversary to poison the cache\ndata or execute Cross-Site Scripting (XSS) attacks.\n\nSome Java application servers such as [Apache Tomcat](https://tomcat.apache.org/) will\ndisallow `\\r\\n`\ncharacters from being set in cookies. If your application server does not automatically\nprovide this\nfunctionality, user-supplied input that is used in cookie keys or values must be validated.\n\nExample of validating cookies to only allow valid characters:\n```\n// throws an IllegalArgumentException if the provided value contains invalid characters\npublic void validateRfc6265CookieValue(String value) throws IllegalArgumentException {\n    char[] chars = value.toCharArray();\n\n    // iterate over every character\n    for (int i = 0; i < chars.length; i++) {\n        char c = chars[i];\n\n        // check for any characters below 0x21 as well as: '\"' ',' ';' '\\' and 0x7f.\n        if (c < 0x21 || c == '\"' || c == ',' || c == ';' || c == '\\\\' || c == 0x7f) {\n            throw new IllegalArgumentException(\"Invalid character in cookie detected:\n{0}\".format(Integer.toString(c)));\n        }\n    }\n}\n```\n\nAlternatively, you could use a string escape package such as\n[Apache Commons Text](https://commons.apache.org/proper/commons-text/) to escape the input:\n```\npublic String escapeValue(String value) {\n  return StringEscapeUtils.escapeJava(value);\n}\n```\n\nFor more information on response splitting attacks see OWASP:\nhttps://owasp.org/www-community/attacks/HTTP_Response_Splitting\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "java_cookie_rule-CookieHTTPOnly", "message": "The `HttpOnly` attribute when set to `true` protects the cookie value from being accessed by\nclient side JavaScript such\nas reading the `document.cookie` values. By enabling this protection, a website that is\nvulnerable to\nCross-Site Scripting (XSS) will be able to block malicious scripts from accessing the cookie\nvalue from JavaScript.\n\nExample of protecting a `Cookie`:\n```\n// Create an HttpOnly cookie.\nCookie someCookie = new Cookie(\"SomeCookieName\", \"SomeValue\");\n// Set HttpOnly flag to true\nsomeCookie.setHttpOnly(true);\n```\n\nFor more information see:\nhttps://jakarta.ee/specifications/servlet/4.0/apidocs/javax/servlet/http/cookie#setHttpOnly-boolean-\n\nSession cookies should be configured with the following security directives:\n\n- [HTTPOnly](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#restrict_access_to_cookies)\n- [Secure](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#restrict_access_to_cookies)\n- [SameSite](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite)\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "java_cookie_rule-CookieInsecure", "message": "The `Secure` attribute when set to `true` protects the cookie value from being being\ntransmitted over clear text\ncommunication paths such as HTTP. By enabling this protection, the cookie will only be sent\nover HTTPS.\n\nExample of protecting a `Cookie`:\n```\n// Create an Secure cookie.\nCookie someCookie = new Cookie(\"SomeCookieName\", \"SomeValue\");\n// Set Secure flag to true\nsomeCookie.setSecure(true);\n```\n\nFor more information see:\nhttps://jakarta.ee/specifications/servlet/4.0/apidocs/javax/servlet/http/cookie#setSecure-boolean-\n\nSession cookies should be configured with the following security directives:\n\n- [HTTPOnly](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#restrict_access_to_cookies)\n- [SameSite](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite)\n- [Secure](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#restrict_access_to_cookies)\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "java_templateinjection_rule-TemplateInjection", "message": "The application may allow control over a template string. Providing user input directly in the\ntemplate by\ndynamically creating template strings may allow an adversary to execute arbitrary Java code,\nincluding\nOS system commands.\n\nFor Velocity, never call `evaluate` with user-supplied input in the template string. Use a\n`VelocityContext`\nobject instead to data-bind user-supplied information as it will be treated as an underlying\ndata type and not\ntemplate code.\n\nExample using Apache Velocity's `VelocityContext` and escape tools to pass in user-supplied\ndata to a template:\n```\n// Create a tool manager\nToolManager manager = new ToolManager(true);\n// Create a context from the tool manager\nContext context = manager.createContext();\n// For demonstration purposes, alternatively configure from a properties file\ncontext.put(\"esc\", new EscapeTool());\n// For demonstration purposes, create an output buffer\nStringWriter stringWriter = new StringWriter();\n// Get userInput\nString userInput = \"potentially malicious data\";\n// Use the context to pass in the userInput value\ncontext.put(\"userInput\", userInput);\n// Pass in the context, the output buffer, a logtag (demo), and the template with userInput\n// making sure to escape it if in the context of HTML.\nVelocity.evaluate(context, stringWriter, \"demo\", \"Hello $esc.html($userInput)\");\n// Work with the output buffer\n// ...\n```\n\nFor other templating engines, please see your framework's documentation.\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "java_file_rule-FilenameUtils", "message": "A file is opened to read its content. The filename comes from an input\nparameter. If an unfiltered parameter is passed to this file API, files from an\narbitrary filesystem location could be read.\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "java_file_rule-FileUploadFileName", "message": "The filename provided by the FileUpload API can be tampered with by the client to reference\nunauthorized files. The provided filename should be properly validated to ensure it's properly\nstructured, contains no unauthorized path characters (e.g., / \\), and refers to an authorized\nfile.\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "java_unsafe_rule-ExternalConfigControl", "message": "The application was found using user-supplied input in a `java.sql.Connection`'s\n`setCatalog` call. This could allow an adversary to supply a different database for the\nlifetime of the connection. Allowing external control of system settings can disrupt service\nor cause an application to behave in unexpected, and potentially malicious ways. Most likely\nthis would only cause an error by providing a nonexistent catalog name.\n\nIt is recommended to not use user-supplied input when selecting the database for an\napplications\ndatabase connection.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "java_xpathi_rule-XpathInjection", "message": "The application processes `XPath` queries with potentially malicious input.\nAn adversary who is able to control the XPath query could potentially influence the logic\nof how data is retrieved, processed or even bypass protections.\n\nTo protect against XPath injection, user input should be parameterized using a variable\nresolver.\nBy creating a class that implements the `XPathVariableResolver` the application can ensure\nthat\nthe xpath query and user-supplied input are treated separately.\n\nExample implementation of an XPathVariableResolver:\n```\n// Create a class which implements the XPathVariableResolver interface\npublic static class SimpleXPathVariableResolver implements XPathVariableResolver {\n  // Use a map or lookup table to store variables for resolution\n  private HashMap<QName, String> variables = new HashMap<>();\n  // Allow caller to set variables\n  public void setVariable(QName name, String value) {\n    variables.put(name, value);\n  }\n  // Implement the resolveVariable to return the value\n  @Override\n  public Object resolveVariable(QName name) {\n    return variables.getOrDefault(name, \"\");\n  }\n}\n\npublic static void xpathQuery(String userInput) throws ParseException,\nParserConfigurationException,\n  SAXException, IOException, XPathExpressionException {\n\n  // Create our DocumentFactory\n  DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance();\n  // Enable namespace awareness\n  domFactory.setNamespaceAware(true);\n  // Enable secure processing\n  domFactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n  // Create our DocumentBuilder\n  DocumentBuilder builder = domFactory.newDocumentBuilder();\n  // Parse our XML document\n  Document doc = builder.parse(\"inventory.xml\");\n\n  // Create a new instance of an XPath object\n  XPath xpathProcessor = XPathFactory.newInstance().newXPath();\n  // Create our XPathVariableResolver\n  SimpleXPathVariableResolver resolver = new SimpleXPathVariableResolver();\n  // Add user input as a variable value\n  resolver.setVariable(new QName(\"author\"), userInput);\n  // Configure the processor to use our variable resolver\n  xpathProcessor.setXPathVariableResolver(resolver);\n  // Evaluate the XPath query\n      String result = xpathProcessor.compile(\"//author[contains(., $author)]\").evaluate(doc);\n  // Work with the result\n  // ...\n}\n```\n\nFor more information on XPath Injection see:\n- https://owasp.org/www-community/attacks/XPATH_Injection\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "java_ssrf_rule-SSRF", "message": "Server-Side-Request-Forgery (SSRF) exploits backend systems that initiate requests to third\nparties.\nIf user input is used in constructing or sending these requests, an attacker could supply\nmalicious\ndata to force the request to other systems or modify request data to cause unwanted actions.\n\nEnsure user input is not used directly in constructing URLs or URIs when initiating requests\nto third party\nsystems from back end systems. Care must also be taken when constructing payloads using user\ninput. Where\npossible restrict to known URIs or payloads. Consider using a server-side map where keys are\nused to return\nURLs such as `https://site/goto?key=1` where `{key: 1, url: 'http://some.url/', key: 2, url:\n'http://...'}`.\n\nIf you must use user-supplied input for requesting URLs, it is strongly recommended that the\nHTTP client\nchosen allows you to customize and block certain IP ranges at the network level. By blocking\nRFC 1918\naddresses or other network address ranges, you can limit the severity of a successful SSRF\nattack. Care must\nalso be taken to block certain protocol or address formatting such as IPv6.\n\nIf you cannot block address ranges at the client level, you may want to run the HTTP client\nas a protected\nuser, or in a protected network where you can apply IP Table or firewall rules to block access\nto dangerous\naddresses. Finally, if none of the above protections are available, you could also run a\ncustom HTTP proxy\nand force all requests through it to handle blocking dangerous addresses.\n\nExample using a map to look up a key to be used in a HTTP request:\n```\nHashMap<String, String> lookupTable = new HashMap<>();\nlookupTable.put(\"key1\", \"https://example.com/\");\nlookupTable.put(\"key2\", \"https://safeurl.com/\");\nString userInput = request.getParameter(\"key\");\n\n// Create a CloseableHttpClient, ideally any requests issued should be done\n// out-of-band from the servlet request itself (such as using a separate thread/scheduler\nsystem)\ntry (final CloseableHttpClient httpClient = HttpClients.createDefault()) {\n    // Lookup the value from our user input from our lookupTable\n    String value = lookupTable.getOrDefault(userInput, \"https://example.com/\");\n    // Construct the url, with the hardcoded url and only pass in the value from the\nlookupTable,\n    // not direct user input\n    final HttpGet httpget = new HttpGet(value);\n    // Execute the request\n    CloseableHttpResponse clientResponse = httpClient.execute(httpget);\n    // Read the response\n    byte[] responseData = clientResponse.getEntity().getContent().readAllBytes();\n    // Handle the response\n    // ...\n}\n```\n\nIf using a map is not possible, the user-supplied input must be encoded prior to use, and\nnever allow full\nURLs:\n```\n// Get user input\nString userInput = request.getParameter(\"key\");\n// Encode the string using java.net.URLEncoder with the UTF-8 character set\nString encodedString = java.net.URLEncoder.encode(userInput, StandardCharsets.UTF_8);\n// Create a CloseableHttpClient, ideally any requests issued should be done\n// out-of-band from the servlet request itself (such as using a separate thread/scheduler\nsystem)\ntry (final CloseableHttpClient httpClient = HttpClients.createDefault()) {\n  // Construct the url, with the hardcoded url and only pass in the encoded value, never a\nfull URL\n  final HttpGet httpget = new HttpGet(\"https://example.com/getId?key=\"+encodedString);\n  // Execute the request\n  CloseableHttpResponse clientResponse = httpClient.execute(httpget);\n  // Read the response\n  byte[] responseData = clientResponse.getEntity().getContent().readAllBytes();\n  // handle the response\n}\n```\n\nFor more information on SSRF see OWASP:\nhttps://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "java_random_rule-PseudoRandom", "message": "Depending on the context, generating weak random numbers may expose cryptographic functions\nwhich rely on these numbers, to be exploitable. When generating numbers for sensitive values\nsuch as tokens, nonces, and cryptographic keys, it is recommended that the `DRBG` instance\nof `SecureRandom` be used.\n\nExample using `DRBG` with `SecureRandom`:\n```\npublic SecureRandom getSecureRandomDRBG() throws NoSuchAlgorithmException {\n// Use DRBG according to\nhttp://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-90Ar1.pdf\n    return SecureRandom.getInstance(\"DRBG\",\n            // Security strength in bits (default is 128)\n            DrbgParameters.instantiation(256,\n                // Set prediction resistance and re-seeding\n                DrbgParameters.Capability.PR_AND_RESEED,\n                // Set the personalization string (optional, not necessary)\n                \"some_personalization_string\".getBytes()\n            )\n    );\n}\n```\n\nFor more information on Java Cryptography see:\nhttps://docs.oracle.com/en/java/javase/15/security/java-cryptography-architecture-jca-reference-guide.html\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "java_script_rule-ScriptInjection", "message": "The application executes an argument using a `ScriptEngine`'s `eval` method. This\nmay allow for direct OS commands to be executed as it's possible to pass in strings\nsuch as `java.lang.Runtime.getRuntime().exec('/bin/sh ...');`.\n\nNever pass user-supplied input directly to the `eval` function. If possible hardcode all\nJavasScript code or use a lookup table to resolve user input to known values. If none of these\ntechniques are possible, use `javax.script.Bindings` to pass input to the script engine.\n\nExample using `Binding` to safely pass in string values:\n```\n// Get ECMAScript engine\nScriptEngine engine = new ScriptEngineManager().getEngineByName(\"ECMAScript\");\n\n// User input, consisting of first and last name\nString userFirstName = \"John\";\nString userLastName = \"Snow\";\n\n// Create bindings to pass into our script, forcing the values to be String.\nBindings bindings = engine.createBindings();\nbindings.put(\"fname\", new String(userFirstName));\nbindings.put(\"lname\", new String(userLastName));\n\n// Example script that concatenates a greeting with the user-supplied input first/last name\nString script = \"var greeting='Hello ';\" +\n// fname and lname variables will be resolved by our bindings defined above\n\"greeting += fname + ' ' + lname;\" +\n// prints greeting\n\"greeting\";\n\ntry {\n  // Execute the script, passing in the bindings\n  Object bindingsResult = engine.eval(script, bindings);\n  // Work with result\n  // ...\n} catch (ScriptException e) {\n  // Handle exception\n  e.printStackTrace();\n}\n```\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "java_script_rule-SpelView", "message": "The application was found calling SpringFramework's `SpelExpressionParser.parseExpression`.\nCalling this method directly with user-supplied input may allow an adversary to\nexecute arbitrary Java code including OS system commands.\n\nNever call `parseExpression` or `parseRaw` directly with user-supplied input. Consider\nalternate\nmethods such as a lookup table to take user input and resolve hardcoded values.\n\nLater versions of SpringFramework introduced a `SimpleEvaluationContext` which can be\nused to access bound data when calling the `getValue` result of `parseExpression`. This\n`SimpleEvaluationContext` has a reduced set of functionality and can restrict data binding\nto read-only or read-write contexts. An adversary could still access public properties\nor fields on custom types that have been provided to the evaluation context. Use with caution.\n\nExample using `SimpleEvaluationContext` with a read-write data binding context:\n```\n@RequestMapping(value=\"/spel\", method=RequestMethod.POST)\npublic String spel(@Validated User user, Model model)  {\n  // Create the Expression Parser\n  SpelExpressionParser parser = new SpelExpressionParser();\n  // Parse the expression\n  Expression parsedExpression = parser.parseExpression(model.getPossiblyUnsafeData());\n  // Create the read-write data binding context\n  SimpleEvaluationContext context = SimpleEvaluationContext.forReadWriteDataBinding().build();\n  // Execute the expression, passing in the read-write context\n  Object result = parsedExpression.getValue(context);\n  // work with the result\n  // ...\n  return \"user\";\n}\n```\n\nFor more information on SimpleEvaluationContext see:\nhttps://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/expression/spel/support/SimpleEvaluationContext.html\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "java_strings_rule-FormatStringManipulation", "message": "The application allows user input to control format string parameters. By passing invalid\nformat\nstring specifiers an adversary could cause the application to throw exceptions or possibly\nleak\ninternal information depending on application logic.\n\nNever allow user-supplied input to be used to create a format string. Replace all format\nstring\narguments with hardcoded format strings containing the necessary specifiers.\n\nExample of using `String.format` safely:\n```\n// Get untrusted user input\nString userInput = request.getParameter(\"someInput\");\n// Ensure that user input is not included in the first argument to String.format\nString.format(\"Hardcoded string expecting a string: %s\", userInput);\n// ...\n```\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "java_strings_rule-ModifyAfterValidation", "message": "The application was found matching a variable during a regular expression\npattern match, and then calling string modification functions after validation has occurred.\nThis is usually indicative of a poor input validation strategy as an adversary may attempt to\nexploit the removal of characters.\n\nFor example a common mistake in attempting to remove path characters to protect against path\ntraversal is to match '../' and then remove any matches. However, if an adversary were to\ninclude in their input: '....//' then the `replace`  method would replace the first `../` but\ncause the leading `..` and trailing `/` to join into the final string of `../`, effectively\nbypassing the check.\n\nTo remediate this issue always perform string modifications before any validation of a string.\nIt is strongly recommended that strings be encoded instead of replaced or removed prior to\nvalidation.\n\n\nExample replaces `..` before validation. Do note this is still not a recommended method for\nprotecting against directory traversal, always use randomly generated IDs or filenames instead:\n```\n// This is ONLY for demonstration purpose, never use untrusted input\n// in paths, always use randomly generated filenames or IDs.\nString input = \"test../....//dir\";\n// Use replaceAll _not_ replace\ninput = input.replaceAll(\"\\\\.\\\\.\", \"\");\n// Input would be test///dir at this point\n// Create a pattern to match on\nPattern pattern = Pattern.compile(\"\\\\.\\\\.\");\n// Create a matcher\nMatcher match = pattern.matcher(input);\n// Call find to see if .. is still in our string\nif (match.find()) {\n    throw new Exception(\".. detected\");\n}\n// Use the input (but do not modify the string)\nSystem.out.println(input + \" safe\");\n```\n\nFor more information see Carnegie Mellon University's Secure Coding Guide:\nhttps://wiki.sei.cmu.edu/confluence/display/java/IDS11-J.+Perform+any+string+modifications+before+validation\n\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "java_strings_rule-NormalizeAfterValidation", "message": "The application was found matching a variable during a regular expression\npattern match, and then calling a Unicode normalize function after validation has occurred.\nThis is usually indicative of a poor input validation strategy as an adversary may attempt to\nexploit the normalization process.\n\nTo remediate this issue, always perform Unicode normalization before any validation of a\nstring.\n\nExample of normalizing a string before validation:\n```\n// User input possibly containing malicious unicode\nString userInput = \"\\uFE64\" + \"tag\" + \"\\uFE65\";\n// Normalize the input\nuserInput = Normalizer.normalize(userInput, Normalizer.Form.NFKC);\n// Compile our regex pattern looking for < or > charcters\nPattern pattern = Pattern.compile(\"[<>]\");\n// Create a matcher from the userInput\nMatcher matcher = pattern.matcher(userInput);\n// See if the matcher matches\nif (matcher.find()) {\n    // It did so throw an error\n    throw new Exception(\"found banned characters in input\");\n}\n```\n\nFor more information see Carnegie Mellon University's Secure Coding Guide:\nhttps://wiki.sei.cmu.edu/confluence/display/java/IDS01-J.+Normalize+strings+before+validating+them\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "java_strings_rule-BadHexConversion", "message": "The application is using `Integer.toHexString` on a digest array buffer which\nmay lead to an incorrect version of values.\n\nConsider using the `HexFormat` object introduced in Java 17. For older Java applications\nconsider using the `javax.xml.bind.DatatypeConverter`.\n\nExample using `HexFormat` to create a human-readable string:\n```\n// Create a MessageDigest using the SHA-384 algorithm\nMessageDigest sha384Digest = MessageDigest.getInstance(\"SHA-384\");\n// Call update with your data\nsha384Digest.update(\"some input\".getBytes(StandardCharsets.UTF_8));\n// Only call digest once all data has been fed into the update sha384digest instance\nbyte[] output = sha384Digest.digest();\n// Create a JDK 17 HexFormat object\nHexFormat hex = HexFormat.of();\n// Use formatHex on the byte array to create a string (note that alphabet characters are\nlowercase)\nString hexString = hex.formatHex(output);\n```\n\nFor more information on DatatypeConverter see:\nhttps://docs.oracle.com/javase/9/docs/api/javax/xml/bind/DatatypeConverter.html#printHexBinary-byte:A-\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "java_ldap_rule-AnonymousLDAP", "message": "The application does not provide authentication when communicating an LDAP\nserver. It is strongly recommended that the LDAP server be configured with\nauthentication and restrict what queries users can execute.\n\nExample code that authenticates with a remote LDAP server and encodes any\nuser-supplied input:\n```\n// Create a properties to hold the ldap connection details\nProperties props = new Properties();\n// Use the com.sun.jndi.ldap.LdapCtxFactory factory provider\nprops.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n// The LDAP server URL\nprops.put(Context.PROVIDER_URL, \"ldap://ldap.example.org:3889\");\n// User details for the connection\nprops.put(Context.SECURITY_PRINCIPAL, \"cn=admin,dc=example,dc=org\");\n// LDAP account password\nString ldapAccountPassword = getAccountPasswordFromSecureStoreOrKMS();\n// Pass in the LDAP password\nprops.put(Context.SECURITY_CREDENTIALS, ldapAccountPassword);\n\n// Create the LDAPContext\nInitialDirContext ldapContext = new InitialDirContext(props);\n// Example using SUBTREE_SCOPE SearchControls\nSearchControls searchControls = new SearchControls();\nsearchControls.setSearchScope(SearchControls.SUBTREE_SCOPE);\n\n// Get user input for query\nString userQuery = someUserInput;\n// Use searchArguments to hold the user-supplied input\nObject[] searchArguments = new Object[]{userQuery};\n// Hardcode the BaseDN, use the {0} format specifier to use the searchArguments array value,\nand pass in the search controls.\n// searchArguments automatically encode\nNamingEnumeration answer = ldapContext.search(\"dc=example,dc=org\", \"(cn={0})\",\nsearchArguments, searchControls);\n// Process the response answer\nwhile (answer.hasMoreElements()) {\n  ...\n}\n```\n\nFor information on enabling authentication, please see your LDAP server's\ndocumentation.\n\nFor more information on LDAP Injection see OWASP:\nhttps://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "java_xss_rule-XSSReqParamToSendError", "message": "The application is returning user-supplied data from an HTTP request to an HTTP response's\n`sendError` method. This could lead to Cross Site Scripting (XSS) if the input were malicious\nscript code and the application server is not properly validating the output. Note that Apache\nTomcat 9 and above automatically encode the output and are not vulnerable.\n\nXSS is an attack which exploits a web application or system to treat user input\nas markup or script code. It is important to encode the data depending on the specific context\nit is used in. There are at least six context types:\n\n- Inside HTML tags `<div>context 1</div>`\n- Inside attributes: `<div class=\"context 2\"></div>`\n- Inside event attributes `<button onclick=\"context 3\">button</button>`\n- Inside script blocks: `<script>var x = \"context 4\"</script>`\n- Unsafe element HTML assignment: `element.innerHTML = \"context 5\"`\n- Inside URLs: `<iframe src=\"context 6\"></iframe><a href=\"context 6\">link</a>`\n\nScript blocks alone have multiple ways they need to be encoded. Extra care must be taken if\nuser input\nis ever output inside of script tags.\n\nUser input that is displayed within the application must be encoded, sanitized or validated\nto ensure it cannot be treated as HTML or executed as Javascript code. Care must also be\ntaken\nto not mix server-side templating with client-side templating, as the server-side templating\nwill\nnot encode things like {{ 7*7 }} which may execute client-side templating features.\n\nIt is _NOT_ advised to encode user input prior to inserting into a data store. The data will\nneed to be\nencoded depending on context of where it is output. It is much safer to force the displaying\nsystem to\nhandle the encoding and not attempt to guess how it should be encoded.\n\nIf possible do not use user input directly in the output to the `sendError` message parameter.\n\nRegardless if the application server handles output encoding, consider encoding any\nuser-supplied\ninput\nthat is used in the sendError method:\n\nExample using [Apache Commons Text](https://commons.apache.org/proper/commons-text/)\n`StringEscapeUtils.escapeHtml4`:\n```\n// Get user input\nString userInput = request.getParameter(\"key\");\n// Encode the input using the Html4 encoder\nString encoded = StringEscapeUtils.escapeHtml4(userInput);\n// Respond with the error code and value\nresponse.sendError(401, encoded);\n```\n\nFor more information on XSS see OWASP:\n- https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "java_xss_rule-WicketXSS", "message": "The application is disabling Wicket's string escaping functionality by calling\n`setEscapeModelStrings(false)`.\nThis could lead to Cross Site Scripting (XSS) if used with user-supplied input. XSS is an\nattack which exploits\n a web application or system to treat    user input\nas markup or script code. It is important to encode the data depending on the specific context\nit\nis used in. There are at least six context types:\n\n- Inside HTML tags `<div>context 1</div>`\n- Inside attributes: `<div class=\"context 2\"></div>`\n- Inside event attributes `<button onclick=\"context 3\">button</button>`\n- Inside script blocks: `<script>var x = \"context 4\"</script>`\n- Unsafe element HTML assignment: `element.innerHTML = \"context 5\"`\n- Inside URLs: `<iframe src=\"context 6\"></iframe><a href=\"context 6\">link</a>`\n\nScript blocks alone have multiple ways they need to be encoded. Extra care must be taken if\nuser input\nis ever output inside of script tags.\n\nUser input that is displayed within the application must be encoded, sanitized or validated\nto ensure it cannot be treated as HTML or executed as JavaScript code. Care must also be\ntaken\nto not mix server-side templating with client-side templating, as the server-side templating\nwill\nnot encode things like {{ 7*7 }} which may execute client-side templating features.\n\nIt is _NOT_ advised to encode user input prior to inserting into a data store. The data will\nneed to be\nencoded depending on context of where it is output. It is much safer to force the displaying\nsystem to\nhandle the encoding and not attempt to guess how it should be encoded.\n\nUse Wicket's built in escaping feature by calling `Component.setEscapeModelStrings(true);`\n\nFor more information on Wicket components see:\n- https://nightlies.apache.org/wicket/apidocs/9.x/org/apache/wicket/Component.html\n\nFor more information on XSS see OWASP:\n- https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "java_xss_rule-XSSReqParamToServletWriter", "message": "The application is returning user-supplied data from an HTTP request directly into an HTTP\nresponse output\nwriter. This could lead to Cross Site Scripting (XSS) if the input were malicious\nscript code and the application server is not properly validating the output.\n\nXSS is an attack which exploits a web application or system to treat user input\nas markup or script code. It is important to encode the data depending on the specific context\nit is used in. There are at least six context types:\n\n- Inside HTML tags `<div>context 1</div>`\n- Inside attributes: `<div class=\"context 2\"></div>`\n- Inside event attributes `<button onclick=\"context 3\">button</button>`\n- Inside script blocks: `<script>var x = \"context 4\"</script>`\n- Unsafe element HTML assignment: `element.innerHTML = \"context 5\"`\n- Inside URLs: `<iframe src=\"context 6\"></iframe><a href=\"context 6\">link</a>`\n\nScript blocks alone have multiple ways they need to be encoded. Extra care must be taken if\nuser input\nis ever output inside of script tags.\n\nUser input that is displayed within the application must be encoded, sanitized or validated\nto ensure it cannot be treated as HTML or executed as Javascript code. Care must also be\ntaken\nto not mix server-side templating with client-side templating, as the server-side templating\nwill\nnot encode things like {{ 7*7 }} which may execute client-side templating features.\n\nIt is _NOT_ advised to encode user input prior to inserting into a data store. The data will\nneed to be\nencoded depending on context of where it is output. It is much safer to force the displaying\nsystem to\nhandle the encoding and not attempt to guess how it should be encoded.\n\nIf possible do not use user input directly in the output to the response writer.\n\nIf the application must output user-supplied input, it will need to encode the data depending\non\nthe output context.\n\nConsider using [Apache Commons Text](https://commons.apache.org/proper/commons-text/)\n`StringEscapeUtils` methods for various context. Please note there is no way to safely\noutput script code in most circumstances, regardless of encoding. If calling the HTTP\nresponse writer directly, ensure that the `Content-Type` is set to `text/plain` so it will\nnot be accidentally interpreted by HTML by modern browsers.\n```\n// Get user input\nString htmlInput = request.getParameter(\"userInput\");\n// Encode the input using the Html4 encoder\nString htmlEncoded = StringEscapeUtils.escapeHtml4(htmlInput);\n// Force the HTTP response to be content type of text/plain so it is not interpreted as HTML\nresponse.setContentType(\"text/plain\");\n// Ensure UTF-8\nresponse.setCharacterEncoding(\"UTF-8\");\n// Write response\nresponse.getWriter().write(htmlEncoded);\n```\n\nFor more information on XSS see OWASP:\n- https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "java_endpoint_rule-UnvalidatedRedirect", "message": "Unvalidated redirects occur when an application redirects a user to a\ndestination URL specified by a user supplied parameter that is not validated.\nSuch vulnerabilities can be used to facilitate phishing attacks.\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "java_endpoint_rule-WeakHostNameVerification", "message": "Either the `HostnameVerifier` has been set to always return `true` or the `X509TrustManager`\nhas\nbeen configured to return null, or both. This effectively disables the validation of server or\nclient certificates.\n\nThis allows for an adversary who is in between the application and the target host to intercept\npotentially sensitive information or transmit malicious data.\n\nIt is recommended to not override the default `HostnameVerifiers`.\n\nConsider using the default `TrustManager` instead of implementing a custom one. If you must\noverride\nthe default verification process, implement proper TrustManager verification for\n`checkServerTrusted` and\n`checkClientTrusted` by throwing `CertificateException` if the certificate is invalid.\n\nExample using the built in `TrustManagerFactory` to manage validating certificate chains:\n```\n// Use the default TrustManagerFactory\nTrustManagerFactory trustManagerFactory =\nTrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n// Use default system KeyStore, alternatively pass in your own keystore.\ntrustManagerFactory.init((KeyStore) null);\n// Create SSLContext for TLS connections\nSSLContext tlsContext = SSLContext.getInstance(\"TLS\");\n// Initialize the tlsContext with our trust manager and a SecureRandom number generator.\ntlsContext.init(null, trustManagerFactory.getTrustManagers(), new SecureRandom());\n```\n\nFor more information on TLS security see OWASP:\nhttps://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "java_crypto_rule-CipherIntegrity", "message": "Cryptographic algorithms provide many different modes of operation, only some of which provide\nmessage integrity. Without message integrity it could be possible for an adversary to attempt\nto tamper with the ciphertext which could lead to compromising the encryption key. Newer\nalgorithms\napply message integrity to validate ciphertext has not been tampered with.\n\nInstead of using an algorithm that requires configuring a cipher mode, an algorithm\nthat has built-in message integrity should be used. Consider using `ChaCha20Poly1305` or\n`AES-256-GCM` instead.\n\nFor older applications that don't have support for `ChaCha20Poly1305`, `AES-256-GCM` is\nrecommended, however it has many drawbacks:\n  - Slower than `ChaCha20Poly1305`.\n  - Catastrophic failure if nonce values are reused.\n\nExample using `ChaCha20Poly1305`:\n```\npublic encrypt() throws Exception {\n    chaChaEncryption(\"Secret text to encrypt\".getBytes(StandardCharsets.UTF_8));\n}\n\npublic SecureRandom getSecureRandomDRBG() throws NoSuchAlgorithmException {\n// Use DRBG according to\nhttp://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-90Ar1.pdf\n    return SecureRandom.getInstance(\"DRBG\",\n            // Security strength in bits (default is 128)\n            DrbgParameters.instantiation(256,\n                // Set prediction resistance and re-seeding\n                DrbgParameters.Capability.PR_AND_RESEED,\n                // Set the personalization string (optional, not necessary)\n                \"some_personalization_string\".getBytes()\n            )\n    );\n}\n\npublic Cipher getChaCha20Poly1305(int mode, byte[] ivKey, byte[] secretKey) throws\nNoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException,\nInvalidAlgorithmParameterException  {\n    // Get a DRBG random number generator instance\n    SecureRandom random = getSecureRandomDRBG();\n    // Create a ChaCha20-Poly1305 cipher instance\n    Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n    // Create our parameterSpec using our ivKey\n    AlgorithmParameterSpec parameterSpec = new IvParameterSpec(ivKey);\n    // Create a SecretKeySpec using our secretKey\n    SecretKeySpec secretKeySpec = new SecretKeySpec(secretKey, \"ChaCha20\");\n    // Initialize and return the cipher for the provided mode\n    chaChaCipher.init(mode, secretKeySpec, parameterSpec, random);\n    return chaChaCipher;\n}\n\npublic void chaChaEncryption(byte[] plainText) throws NoSuchAlgorithmException,\nNoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException {\n    // Get a DRBG random number generator instance\n    SecureRandom random = getSecureRandomDRBG();\n    // Create secretKey\n    byte[] secretKey = new byte[32];\n    random.nextBytes(secretKey);\n    // Create an IV Key\n    byte[] ivKey = new byte[12];\n    random.nextBytes(ivKey);\n\n    // Create a chaCha encryption cipher instance\n    Cipher chaChaEncryptor = getChaCha20Poly1305(Cipher.ENCRYPT_MODE, ivKey, secretKey);\n\n    // Encrypt the text using ChaCha20Poly1305\n    byte[] cipherText = null;\n    try {\n        cipherText = chaChaEncryptor.doFinal(plainText);\n    } catch (IllegalBlockSizeException | BadPaddingException e) {\n        System.out.println(\"failed to encrypt text\");\n        return;\n    }\n    System.out.println(\"encrypted: \" + Base64.getEncoder().encodeToString(cipherText));\n\n     // Create a chaCha decryption cipher instance\n    Cipher chaChaDecryptor = getChaCha20Poly1305(Cipher.DECRYPT_MODE, ivKey, secretKey);\n\n    // Decrypt the text\n    byte[] decryptedText = null;\n    try {\n        decryptedText = chaChaDecryptor.doFinal(cipherText);\n    } catch (IllegalBlockSizeException | BadPaddingException e) {\n        System.out.println(\"failed to decrypt text\");\n        return;\n    }\n    System.out.println(\"decrypted: \" + new String(decryptedText, StandardCharsets.UTF_8));\n}\n```\n\nFor more information on Java Cryptography see:\nhttps://docs.oracle.com/en/java/javase/15/security/java-cryptography-architecture-jca-reference-guide.html\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "java_crypto_rule-RsaNoPadding", "message": "The software uses the RSA algorithm but does not incorporate Optimal Asymmetric\nEncryption Padding (OAEP). By not enabling padding, the algorithm maybe vulnerable\nto [chosen plaintext attacks](https://en.wikipedia.org/wiki/Chosen-plaintext_attack).\n\nTo enable OAEP mode, pass `RSA/ECB/OAEPWithSHA-256AndMGF1Padding` to the `Cipher.getInstance`\nmethod.\n\nExample encrypting and decrypting a message using RSA with OAEP:\n```\npublic static void encryptWithRSA() throws InvalidKeyException, NoSuchAlgorithmException,\nNoSuchPaddingException, IllegalBlockSizeException, BadPaddingException {\n    // Generate an RSA Public and Private Key Pair\n    KeyPair keyPair = generateRSAKeys();\n    // Create a Cipher instance using RSA, ECB with OAEP\n    Cipher rsaEncryptor = Cipher.getInstance(\"RSA/ECB/OAEPWithSHA-256AndMGF1Padding\");\n    // Initialize to ENCRYPT_MODE with the public key\n    rsaEncryptor.init(Cipher.ENCRYPT_MODE, keyPair.getPublic());\n    // Encrypt our secret message\n    byte[] cipherText = rsaEncryptor.doFinal(\"Some secret\nmessage\".getBytes(StandardCharsets.UTF_8));\n\n    // Create a Cipher instance using RSA, ECB with OAEP\n    Cipher rsaDecryptor = Cipher.getInstance(\"RSA/ECB/OAEPWithSHA-256AndMGF1Padding\");\n    // Initialize to DECRYPT_MODE with the private key\n    rsaDecryptor.init(Cipher.DECRYPT_MODE, keyPair.getPrivate());\n    // Decrypt the secret message\n    byte[] plainText = rsaDecryptor.doFinal(cipherText);\n    // Debug output\n    System.out.println(new String(plainText));\n}\n```\nMore information on Optimal asymmetric encryption padding:\nhttps://en.wikipedia.org/wiki/Optimal_asymmetric_encryption_padding\n\nFor more information on Java Cryptography see:\nhttps://docs.oracle.com/en/java/javase/15/security/java-cryptography-architecture-jca-reference-guide.html\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "java_crypto_rule-InsufficientKeySizeRsa", "message": "The application is generating an RSA key that is less than the recommended 2048 bits.\nThe National Institute of Standards and Technology (NIST) deprecated signing Digital\nCertificates that contained RSA Public Keys of 1024 bits in December 2010. While\n1024-bit RSA keys have not been factored yet, advances in compute may make it possible\nin the near future.\n\nConsider upgrading to the newer asymmetric algorithm such as `Ed25519` which handles\nthe complexities of generating key pairs and choosing correct key sizes for you:\n```\npublic static KeyPair generateEd25519() throws NoSuchAlgorithmException {\n    // Choose Ed25519 for KeyPairGenerator Instance\n    KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"Ed25519\");\n    // Generate a KeyPair and return\n    return keyPairGenerator.generateKeyPair();\n}\n```\n\nOtherwise use a key size greater than 2048 when generating RSA keys:\n```\npublic static KeyPair generateRSA() throws NoSuchAlgorithmException {\n    // Choose RSA for KeyPairGenerator Instance\n    KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"RSA\");\n    // Initialize with 2048 key size\n    keyPairGenerator.initialize(2048);\n    // Generate a KeyPair and return\n    return keyPairGenerator.generateKeyPair();\n}\n```\n\nFor more information on Ed25519 see: http://ed25519.cr.yp.to/\n\nFor more information on Java Cryptography see:\nhttps://docs.oracle.com/en/java/javase/15/security/java-cryptography-architecture-jca-reference-guide.html\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "java_crypto_rule-WeakMessageDigest", "message": "The application was found using an insecure or risky digest or signature algorithm. Both MD5\nand SHA1 hash algorithms have been found to be vulnerable to producing collisions.\nThis means\nthat two different values, when hashed, can lead to the same hash value. If the application is\ntrying\nto use these hash methods for storing passwords, then it is recommended to switch to a\npassword hashing\nalgorithm such as Argon2id or PBKDF2.\nstrongly recommended that a standard Digest algorithm be chosen instead as implementing\na digest by hand is error-prone.\n\nExample of creating a SHA-384 hash:\n```\n// Create a MessageDigest using the SHA-384 algorithm\nMessageDigest sha384Digest = MessageDigest.getInstance(\"SHA-384\");\n// Call update with your data\nsha384Digest.update(input);\n// Only call digest once all data has been fed into the update sha384digest instance\nbyte[] output = sha384Digest.digest();\n// output base64 encoded version of the hash\nSystem.out.println(\"hash: \" + Base64.getEncoder().encodeToString(output));\n```\n\nFor more information on secure password storage see OWASP:\nhttps://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "java_crypto_rule-CipherPaddingOracle", "message": "Cryptographic block ciphers can be configured to pad individual blocks if there is not enough\ninput data to match the size of the block. This specific mode of CBC used in combination with\nPKCS5Padding is susceptible to padding oracle attacks. An adversary could potentially decrypt\nthe message if the system exposed the difference between plaintext with invalid padding or\nvalid padding. The distinction between valid and invalid padding is usually revealed through\ndistinct error messages being returned for each condition.\n\nConsider switching to a more secure cipher that doesn't require padding and builds in message\nauthentication integrity directly into the algorithm.\n\nConsider using `ChaCha20Poly1305` or\n`AES-256-GCM` instead.\n\nFor older applications that don't have support for `ChaCha20Poly1305`, `AES-256-GCM` is\nrecommended, however it has many drawbacks:\n  - Slower than `ChaCha20Poly1305`.\n  - Catastrophic failure if nonce values are reused.\n\nExample using `ChaCha20Poly1305`:\n```\npublic encrypt() throws Exception {\n    chaChaEncryption(\"Secret text to encrypt\".getBytes(StandardCharsets.UTF_8));\n}\n\npublic SecureRandom getSecureRandomDRBG() throws NoSuchAlgorithmException {\n    // Use DRBG according to\nhttp://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-90Ar1.pdf\n    return SecureRandom.getInstance(\"DRBG\",\n            // Security strength in bits (default is 128)\n            DrbgParameters.instantiation(256,\n                // Set prediction resistance and re-seeding\n                DrbgParameters.Capability.PR_AND_RESEED,\n                // Set the personalization string (optional, not necessary)\n                \"some_personalization_string\".getBytes()\n            )\n    );\n}\n\npublic Cipher getChaCha20Poly1305(int mode, byte[] ivKey, byte[] secretKey) throws\nNoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException,\nInvalidAlgorithmParameterException  {\n    // Get a DRBG random number generator instance\n    SecureRandom random = getSecureRandomDRBG();\n    // Create a ChaCha20-Poly1305 cipher instance\n    Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n    // Create our parameterSpec using our ivKey\n    AlgorithmParameterSpec parameterSpec = new IvParameterSpec(ivKey);\n    // Create a SecretKeySpec using our secretKey\n    SecretKeySpec secretKeySpec = new SecretKeySpec(secretKey, \"ChaCha20\");\n    // Initialize and return the cipher for the provided mode\n    chaChaCipher.init(mode, secretKeySpec, parameterSpec, random);\n    return chaChaCipher;\n}\n\npublic void chaChaEncryption(byte[] plainText) throws NoSuchAlgorithmException,\nNoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException {\n    // Get a DRBG random number generator instance\n    SecureRandom random = getSecureRandomDRBG();\n    // Create secretKey\n    byte[] secretKey = new byte[32];\n    random.nextBytes(secretKey);\n    // Create an IV Key\n    byte[] ivKey = new byte[12];\n    random.nextBytes(ivKey);\n\n    // Create a chaCha encryption cipher instance\n    Cipher chaChaEncryptor = getChaCha20Poly1305(Cipher.ENCRYPT_MODE, ivKey, secretKey);\n\n    // Encrypt the text using ChaCha20Poly1305\n    byte[] cipherText = null;\n    try {\n        cipherText = chaChaEncryptor.doFinal(plainText);\n    } catch (IllegalBlockSizeException | BadPaddingException e) {\n        System.out.println(\"failed to encrypt text\");\n        return;\n    }\n    System.out.println(\"encrypted: \" + Base64.getEncoder().encodeToString(cipherText));\n\n     // Create a chaCha decryption cipher instance\n    Cipher chaChaDecryptor = getChaCha20Poly1305(Cipher.DECRYPT_MODE, ivKey, secretKey);\n\n    // Decrypt the text\n    byte[] decryptedText = null;\n    try {\n        decryptedText = chaChaDecryptor.doFinal(cipherText);\n    } catch (IllegalBlockSizeException | BadPaddingException e) {\n        System.out.println(\"failed to decrypt text\");\n        return;\n    }\n    System.out.println(\"decrypted: \" + new String(decryptedText, StandardCharsets.UTF_8));\n}\n```\n\nFor more information on padding oracle attacks see:\nhttps://en.wikipedia.org/wiki/Padding_oracle_attack\n\nFor more information on Java Cryptography see:\nhttps://docs.oracle.com/en/java/javase/15/security/java-cryptography-architecture-jca-reference-guide.html\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "java_crypto_rule-WeakTLSProtocolVersion", "message": "The application was found enabling insecure TLS protocol versions. When enabling protocol\nversions for an `SSLContext`, only the following versions should be allowed:\n- TLSv1.2\n- TLSv1.3\n- DTLSv1.2\n- DTLSv1.3\n\nTo mitigate potential security risks, it is strongly advised to enforce TLS 1.2 as the minimum\nprotocol version and disallow older versions such as TLS 1.0. Do note that newer versions of\nJava do not even support TLS 1.0 and will throw `NoSuchAlgorithmException`. Versions of TLS\nprior to 1.2 could expose the connection to downgrade attacks, where an adversary intercepts\nthe\nconnection and alters the requested protocol version to be a less secure one.\n\nIn many scenarios, relying on the default system configuration does not meet compliance\nstandards. This is due to the application being deployed across diverse systems with varying\nconfigurations and Java versions. While the default value may be secure on modern and\nup-to-date systems, it may not hold true for older systems. Consequently, it is highly\nrecommended to explicitly define a secure configuration in all cases.\n\nExample configuring an SSLContext with TLSv1.2:\n```\n// Create an SSLContext with TLSv1.2 explicitly\nSSLContext tlsContext = SSLContext.getInstance(\"TLSv1.2\"); // or TLSv1.3, DTLSv1.2, DTLSv1.3\n\n// Alternatively, set the enabled protocols\nSSLContext serverSslContext = SSLContext.getInstance(\"TLS\");\nSSLEngine serverEngine = serverSslContext.createSSLEngine();\n// Calling setEnabledProtocols will override the original context's configured protocol version\nserverEngine.setEnabledProtocols(new String[]{ \"TLSv1.2\" });\n```\n\nFor more information on `SSLContext` see:\n- https://docs.oracle.com/en/java/javase/11/docs/api/java.base/javax/net/ssl/SSLContext.html\n\nFor more information on MiTM attacks see:\n- https://owasp.org/www-community/attacks/Manipulator-in-the-middle_attack\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "java_crypto_rule-CipherDESInsecure", "message": "DES, TripleDES and RC2 are all considered broken or insecure cryptographic algorithms.\nNewer algorithms  apply message integrity to validate ciphertext has not been tampered\nwith. Consider using `ChaCha20Poly1305` instead as it is easier and faster than the\nalternatives such as `AES-256-GCM`.\n\nFor older applications that don't have support for `ChaCha20Poly1305`,\n`AES-256-GCM` is recommended, however it has many drawbacks:\n- Slower than `ChaCha20Poly1305`.\n- Catastrophic failure if nonce values are reused.\n\nExample using `ChaCha20Poly1305`:\n```\npublic encrypt() throws Exception {\n    chaChaEncryption(\"Secret text to encrypt\".getBytes(StandardCharsets.UTF_8));\n}\n\npublic SecureRandom getSecureRandomDRBG() throws NoSuchAlgorithmException {\n    // Use DRBG according to\nhttp://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-90Ar1.pdf\n    return SecureRandom.getInstance(\"DRBG\",\n            // Security strength in bits (default is 128)\n            DrbgParameters.instantiation(256,\n                // Set prediction resistance and re-seeding\n                DrbgParameters.Capability.PR_AND_RESEED,\n                // Set the personalization string (optional, not necessary)\n                \"some_personalization_string\".getBytes()\n            )\n    );\n}\n\npublic Cipher getChaCha20Poly1305(int mode, byte[] ivKey, byte[] secretKey) throws\nNoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException,\nInvalidAlgorithmParameterException  {\n    // Get a DRBG random number generator instance\n    SecureRandom random = getSecureRandomDRBG();\n    // Create a ChaCha20-Poly1305 cipher instance\n    Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n    // Create our parameterSpec using our ivKey\n    AlgorithmParameterSpec parameterSpec = new IvParameterSpec(ivKey);\n    // Create a SecretKeySpec using our secretKey\n    SecretKeySpec secretKeySpec = new SecretKeySpec(secretKey, \"ChaCha20\");\n    // Initialize and return the cipher for the provided mode\n    chaChaCipher.init(mode, secretKeySpec, parameterSpec, random);\n    return chaChaCipher;\n}\n\npublic void chaChaEncryption(byte[] plainText) throws NoSuchAlgorithmException,\nNoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException {\n    // Get a DRBG random number generator instance\n    SecureRandom random = getSecureRandomDRBG();\n    // Create secretKey\n    byte[] secretKey = new byte[32];\n    random.nextBytes(secretKey);\n    // Create an IV Key\n    byte[] ivKey = new byte[12];\n    random.nextBytes(ivKey);\n\n    // Create a chaCha encryption cipher instance\n    Cipher chaChaEncryptor = getChaCha20Poly1305(Cipher.ENCRYPT_MODE, ivKey, secretKey);\n\n    // Encrypt the text using ChaCha20Poly1305\n    byte[] cipherText = null;\n    try {\n        cipherText = chaChaEncryptor.doFinal(plainText);\n    } catch (IllegalBlockSizeException | BadPaddingException e) {\n        System.out.println(\"failed to encrypt text\");\n        return;\n    }\n    System.out.println(\"encrypted: \" + Base64.getEncoder().encodeToString(cipherText));\n\n     // Create a chaCha decryption cipher instance\n    Cipher chaChaDecryptor = getChaCha20Poly1305(Cipher.DECRYPT_MODE, ivKey, secretKey);\n\n    // Decrypt the text\n    byte[] decryptedText = null;\n    try {\n        decryptedText = chaChaDecryptor.doFinal(cipherText);\n    } catch (IllegalBlockSizeException | BadPaddingException e) {\n        System.out.println(\"failed to decrypt text\");\n        return;\n    }\n    System.out.println(\"decrypted: \" + new String(decryptedText, StandardCharsets.UTF_8));\n}\n```\n\nFor more information on Java Cryptography see:\nhttps://docs.oracle.com/en/java/javase/15/security/java-cryptography-architecture-jca-reference-guide.html\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "java_crypto_rule-HazelcastSymmetricEncryption", "message": "The network communications for Hazelcast is configured to use a deprecated symmetric cipher.\nConsider using TLS/SSL when establishing communications across the Hazelcast cluster.\n\nFor more information on configuring TLS/SSL for Hazelcast see:\nhttps://docs.hazelcast.com/imdg/4.2/security/tls-ssl\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "java_crypto_rule-CustomMessageDigest", "message": "The application was found implementing a custom `java.security.MessageDigest`. It is\nstrongly recommended that a standard Digest algorithm be chosen instead as implementing\na digest by hand is error-prone. The National Institute of Standards and\nTechnology (NIST) recommends the use of SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, or\nSHA-512/256.\n\nExample of creating a SHA-384 hash:\n```\n// Create a MessageDigest using the SHA-384 algorithm\nMessageDigest sha384Digest = MessageDigest.getInstance(\"SHA-384\");\n// Call update with your data\nsha384Digest.update(input);\n// Only call digest once all data has been fed into the update sha384digest instance\nbyte[] output = sha384Digest.digest();\n// output base64 encoded version of the hash\nSystem.out.println(\"hash: \" + Base64.getEncoder().encodeToString(output));\n```\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "java_crypto_rule-CipherDESedeInsecure", "message": "DES, TripleDES and RC2 are all considered broken or insecure cryptographic algorithms.\nNewer algorithms  apply message integrity to validate ciphertext has not been tampered\nwith. Consider using `ChaCha20Poly1305` instead as it is easier and faster than the\nalternatives such as `AES-256-GCM`.\n\nFor older applications that don't have support for `ChaCha20Poly1305`,\n`AES-256-GCM` is recommended, however it has many drawbacks:\n- Slower than `ChaCha20Poly1305`.\n- Catastrophic failure if nonce values are reused.\n\nExample using `ChaCha20Poly1305`:\n```\npublic encrypt() throws Exception {\n    chaChaEncryption(\"Secret text to encrypt\".getBytes(StandardCharsets.UTF_8));\n}\n\npublic SecureRandom getSecureRandomDRBG() throws NoSuchAlgorithmException {\n    // Use DRBG according to\nhttp://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-90Ar1.pdf\n    return SecureRandom.getInstance(\"DRBG\",\n            // Security strength in bits (default is 128)\n            DrbgParameters.instantiation(256,\n                // Set prediction resistance and re-seeding\n                DrbgParameters.Capability.PR_AND_RESEED,\n                // Set the personalization string (optional, not necessary)\n                \"some_personalization_string\".getBytes()\n            )\n    );\n}\n\npublic Cipher getChaCha20Poly1305(int mode, byte[] nonceKey, byte[] secretKey) throws\nNoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException,\nInvalidAlgorithmParameterException  {\n    // Get a DRBG random number generator instance\n    SecureRandom random = getSecureRandomDRBG();\n    // Create a ChaCha20-Poly1305 cipher instance\n    Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n    // Create our parameterSpec using our nonceKey\n    AlgorithmParameterSpec parameterSpec = new IvParameterSpec(nonceKey);\n    // Create a SecretKeySpec using our secretKey\n    SecretKeySpec secretKeySpec = new SecretKeySpec(secretKey, \"ChaCha20\");\n    // Initialize and return the cipher for the provided mode\n    chaChaCipher.init(mode, secretKeySpec, parameterSpec, random);\n    return chaChaCipher;\n}\n\npublic void chaChaEncryption(byte[] plainText) throws NoSuchAlgorithmException,\nNoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException {\n    // Get a DRBG random number generator instance\n    SecureRandom random = getSecureRandomDRBG();\n    // Create secretKey\n    byte[] secretKey = new byte[32];\n    random.nextBytes(secretKey);\n    // Create an IV nonceKey\n    byte[] nonceKey = new byte[12];\n    random.nextBytes(nonceKey);\n    // Create a chaCha encryption cipher instance\n    Cipher chaChaEncryptor = getChaCha20Poly1305(Cipher.ENCRYPT_MODE, nonceKey, secretKey);\n    // Encrypt the text using ChaCha20Poly1305\n    byte[] cipherText = null;\n    try {\n        cipherText = chaChaEncryptor.doFinal(plainText);\n    } catch (IllegalBlockSizeException | BadPaddingException e) {\n        System.out.println(\"failed to encrypt text\");\n        return;\n    }\n    System.out.println(\"encrypted: \" + Base64.getEncoder().encodeToString(cipherText));\n    // Create a chaCha decryption cipher instance\n    Cipher chaChaDecryptor = getChaCha20Poly1305(Cipher.DECRYPT_MODE, nonceKey, secretKey);\n    // Decrypt the text\n    byte[] decryptedText = null;\n    try {\n        decryptedText = chaChaDecryptor.doFinal(cipherText);\n    } catch (IllegalBlockSizeException | BadPaddingException e) {\n        System.out.println(\"failed to decrypt text\");\n        return;\n    }\n    System.out.println(\"decrypted: \" + new String(decryptedText, StandardCharsets.UTF_8));\n}\n```\n\nFor more information on Java Cryptography see:\nhttps://docs.oracle.com/en/java/javase/15/security/java-cryptography-architecture-jca-reference-guide.html\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "java_crypto_rule-BlowfishKeySize", "message": "The Blowfish encryption algorithm was meant as a drop-in replacement for DES and was created in\n1993. Smaller key sizes may make the ciphertext vulnerable to [birthday\nattacks](https://en.wikipedia.org/wiki/Birthday_attack). While no known attacks against\nBlowfish\nexist, it should never be used to encrypt files over 4GB in size. If possible consider\nusing AES as the instance of `KeyGenerator` instead of Blowfish.\n\nTo remediate the small key size, pass a value such as 256 to the `KeyGenerator.init(keySize)`\nmethod.\n\nExample setting a larger key size and changing to `KeyGenerator` to AES:\n```\npublic static void aesKeyGenerator() throws java.security.NoSuchAlgorithmException {\n    // Use the AES algorithm for key generation\n    KeyGenerator keyGenerator = KeyGenerator.getInstance(\"AES\");\n\n    // Set the key size here\n    keyGenerator.init(256);\n\n    // get the raw bytes of the key\n    byte[] key = keyGenerator.generateKey().getEncoded();\n\n    // pass the key bytes to create a SecretKeySpec\n    SecretKeySpec secretKeySpec = new SecretKeySpec(key, \"AES\");\n}\n```\n\nExample setting a larger key size for Blowfish:\n```\npublic static void blowFishKeyGenerator() throws java.security.NoSuchAlgorithmException {\n    // Use the Blowfish algorithm for key generation\n    KeyGenerator keyGenerator = KeyGenerator.getInstance(\"Blowfish\");\n\n    // Set the key size here\n    keyGenerator.init(256);\n\n    // get the raw bytes of the key\n    byte[] key = keyGenerator.generateKey().getEncoded();\n\n    // pass the key bytes to create a SecretKeySpec\n    SecretKeySpec secretKeySpec = new SecretKeySpec(key, \"Blowfish\");\n}\n```\n\nFor more information on Java Cryptography see:\nhttps://docs.oracle.com/en/java/javase/15/security/java-cryptography-architecture-jca-reference-guide.html\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "java_crypto_rule-NullCipher", "message": "The application was found creating a `NullCipher` instance. `NullCipher` implements the\n`Cipher` interface by returning ciphertext identical to the supplied plaintext. This means\nany data passed to the `doFinal(...)` or `update(...)` methods will not actually encrypt\nthe input.\n\nRemove the NullCipher reference and replace with a legitimate `Cipher` instance such as\n`ChaCha20-Poly1305`\n\nExample using `ChaCha20Poly1305`:\n```\npublic encrypt() throws Exception {\n    chaChaEncryption(\"Secret text to encrypt\".getBytes(StandardCharsets.UTF_8));\n}\n\npublic SecureRandom getSecureRandomDRBG() throws NoSuchAlgorithmException {\n    // Use DRBG according to\nhttp://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-90Ar1.pdf\n    return SecureRandom.getInstance(\"DRBG\",\n            // Security strength in bits (default is 128)\n            DrbgParameters.instantiation(256,\n                // Set prediction resistance and re-seeding\n                DrbgParameters.Capability.PR_AND_RESEED,\n                // Set the personalization string (optional, not necessary)\n                \"some_personalization_string\".getBytes()\n            )\n    );\n}\n\npublic Cipher getChaCha20Poly1305(int mode, byte[] ivKey, byte[] secretKey) throws\nNoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException,\nInvalidAlgorithmParameterException  {\n    // Get a DRBG random number generator instance\n    SecureRandom random = getSecureRandomDRBG();\n    // Create a ChaCha20-Poly1305 cipher instance\n    Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n    // Create our parameterSpec using our ivKey\n    AlgorithmParameterSpec parameterSpec = new IvParameterSpec(ivKey);\n    // Create a SecretKeySpec using our secretKey\n    SecretKeySpec secretKeySpec = new SecretKeySpec(secretKey, \"ChaCha20\");\n    // Initialize and return the cipher for the provided mode\n    chaChaCipher.init(mode, secretKeySpec, parameterSpec, random);\n    return chaChaCipher;\n}\n\npublic void chaChaEncryption(byte[] plainText) throws NoSuchAlgorithmException,\nNoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException {\n    // Get a DRBG random number generator instance\n    SecureRandom random = getSecureRandomDRBG();\n    // Create secretKey\n    byte[] secretKey = new byte[32];\n    random.nextBytes(secretKey);\n    // Create an IV Key\n    byte[] ivKey = new byte[12];\n    random.nextBytes(ivKey);\n\n    // Create a chaCha encryption cipher instance\n    Cipher chaChaEncryptor = getChaCha20Poly1305(Cipher.ENCRYPT_MODE, ivKey, secretKey);\n\n    // Encrypt the text using ChaCha20Poly1305\n    byte[] cipherText = null;\n    try {\n        cipherText = chaChaEncryptor.doFinal(plainText);\n    } catch (IllegalBlockSizeException | BadPaddingException e) {\n        System.out.println(\"failed to encrypt text\");\n        return;\n    }\n    System.out.println(\"encrypted: \" + Base64.getEncoder().encodeToString(cipherText));\n\n     // Create a chaCha decryption cipher instance\n    Cipher chaChaDecryptor = getChaCha20Poly1305(Cipher.DECRYPT_MODE, ivKey, secretKey);\n\n    // Decrypt the text\n    byte[] decryptedText = null;\n    try {\n        decryptedText = chaChaDecryptor.doFinal(cipherText);\n    } catch (IllegalBlockSizeException | BadPaddingException e) {\n        System.out.println(\"failed to decrypt text\");\n        return;\n    }\n    System.out.println(\"decrypted: \" + new String(decryptedText, StandardCharsets.UTF_8));\n}\n```\n\nFor more information on Java Cryptography see:\nhttps://docs.oracle.com/en/java/javase/15/security/java-cryptography-architecture-jca-reference-guide.html\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "java_crypto_rule-CipherECBMode", "message": "Cryptographic algorithms provide many different modes of operation, only some of which provide\nmessage integrity. Without message integrity it could be possible for an adversary to attempt\nto tamper with the ciphertext which could lead to compromising the encryption key. Newer\nalgorithms\napply message integrity to validate ciphertext has not been tampered with.\n\nInstead of using an algorithm that requires configuring a cipher mode, an algorithm\nthat has built-in message integrity should be used. Consider using `ChaCha20Poly1305` or\n`AES-256-GCM` instead.\n\nFor older applications that don't have support for `ChaCha20Poly1305`, `AES-256-GCM` is\nrecommended, however it has many drawbacks:\n  - Slower than `ChaCha20Poly1305`.\n  - Catastrophic failure if nonce values are reused.\n\nExample using `ChaCha20Poly1305`:\n```\npublic encrypt() throws Exception {\n    chaChaEncryption(\"Secret text to encrypt\".getBytes(StandardCharsets.UTF_8));\n}\n\npublic SecureRandom getSecureRandomDRBG() throws NoSuchAlgorithmException {\n    // Use DRBG according to\nhttp://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-90Ar1.pdf\n    return SecureRandom.getInstance(\"DRBG\",\n            // Security strength in bits (default is 128)\n            DrbgParameters.instantiation(256,\n                // Set prediction resistance and re-seeding\n                DrbgParameters.Capability.PR_AND_RESEED,\n                // Set the personalization string (optional, not necessary)\n                \"some_personalization_string\".getBytes()\n            )\n    );\n}\n\npublic Cipher getChaCha20Poly1305(int mode, byte[] ivKey, byte[] secretKey) throws\nNoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException,\nInvalidAlgorithmParameterException  {\n    // Get a DRBG random number generator instance\n    SecureRandom random = getSecureRandomDRBG();\n    // Create a ChaCha20-Poly1305 cipher instance\n    Cipher chaChaCipher = Cipher.getInstance(\"ChaCha20-Poly1305/None/NoPadding\");\n    // Create our parameterSpec using our ivKey\n    AlgorithmParameterSpec parameterSpec = new IvParameterSpec(ivKey);\n    // Create a SecretKeySpec using our secretKey\n    SecretKeySpec secretKeySpec = new SecretKeySpec(secretKey, \"ChaCha20\");\n    // Initialize and return the cipher for the provided mode\n    chaChaCipher.init(mode, secretKeySpec, parameterSpec, random);\n    return chaChaCipher;\n}\n\npublic void chaChaEncryption(byte[] plainText) throws NoSuchAlgorithmException,\nNoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException {\n    // Get a DRBG random number generator instance\n    SecureRandom random = getSecureRandomDRBG();\n    // Create secretKey\n    byte[] secretKey = new byte[32];\n    random.nextBytes(secretKey);\n    // Create an IV Key\n    byte[] ivKey = new byte[12];\n    random.nextBytes(ivKey);\n\n    // Create a chaCha encryption cipher instance\n    Cipher chaChaEncryptor = getChaCha20Poly1305(Cipher.ENCRYPT_MODE, ivKey, secretKey);\n\n    // Encrypt the text using ChaCha20Poly1305\n    byte[] cipherText = null;\n    try {\n        cipherText = chaChaEncryptor.doFinal(plainText);\n    } catch (IllegalBlockSizeException | BadPaddingException e) {\n        System.out.println(\"failed to encrypt text\");\n        return;\n    }\n    System.out.println(\"encrypted: \" + Base64.getEncoder().encodeToString(cipherText));\n\n     // Create a chaCha decryption cipher instance\n    Cipher chaChaDecryptor = getChaCha20Poly1305(Cipher.DECRYPT_MODE, ivKey, secretKey);\n\n    // Decrypt the text\n    byte[] decryptedText = null;\n    try {\n        decryptedText = chaChaDecryptor.doFinal(cipherText);\n    } catch (IllegalBlockSizeException | BadPaddingException e) {\n        System.out.println(\"failed to decrypt text\");\n        return;\n    }\n    System.out.println(\"decrypted: \" + new String(decryptedText, StandardCharsets.UTF_8));\n}\n```\n\nFor more information on Java Cryptography see:\nhttps://docs.oracle.com/en/java/javase/15/security/java-cryptography-architecture-jca-reference-guide.html\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "java_crypto_rule-WeakTLSProtocol", "message": "The `org.apache.http.impl.client.DefaultHttpClient` and `javax.net.ssl.SSLContext.getInstance`\nobject instances do not verify the hostnames upon connection.\n\nThis allows for an adversary who is in between the application and the target host to intercept\npotentially sensitive information or transmit malicious data.\n\nDo not use the `org.apache.http.impl.client.DefaultHttpClient();` as it is deprecated. Instead\nuse the new `java.net.http.HttpClient` that was introduced in Java 9.\n\nExample connecting to a host that will automatically do TLS validation:\n```\n// Create a new java.net.http.HttpClient\nHttpClient httpClient = HttpClient.newHttpClient();\n// Create a HttpRequest builder\nHttpRequest request = HttpRequest.newBuilder()\n        // Create a URI for a website which requires TLS\n        .uri(URI.create(\"https://www.example.com/\"))\n        // Build the request\n        .build();\n\n// Use the httpClient to send the request and use an HttpResponse.BodyHandlers String type\nHttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n// Debug print\nSystem.out.println(response);\n```\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "java_cors_rule-PermissiveCORSInjection", "message": "This application potentially allows user-supplied input into the value of the\n`Access-Control-Allow-Origin` response header. This header is part of the\n[Cross-Origin Resource Sharing](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) CORS\nspecification. By allowing user input to specify which domains can communicate with this\nserver,\nan adversary could exploit a weakness in this server to force clients to send credentials (such\nas session\nidentifiers) to the adversary's server.\n\nFor the above attack to work, the application would need to suffer from an additional\nvulnerability,\nsuch as Cross-Site Scripting (XSS).\n\nTo remediate this issue, do not use user-supplied information when calling\n`HttpServletResponse.setHeader` or `HttpServletResponse.addHeader`\nfor the `Access-Control-Allow-Origin` header's value. Instead, hardcode the allowed domain(s)\nand reference them in a lookup\ntable:\nExample allowing dynamic but safe domains in `Access-Control-Allow-Origin`:\n\n```\n  // this data should be in the class constructor or taken from a trusted datasource\n  Map<String, String> allowedDomains = new HashMap();\n  allowedDomains.put(\"sub1\", \"sub1.example.com\");\n  allowedDomains.put(\"sub2\", \"sub2.example.com\");\n\n  // extract the allowedDomain parameters value as a key to look up which domain to provide\nvia the allowedDomains map\n  // if not found, sets sub1 as the default\n  String headerValue = allowedDomains.getOrDefault(request.getParameter(\"allowedDomain\"),\nallowedDomains.get(\"sub1\"));\n\n  // add the header with our trusted sub1.example.com or sub2.example.com domains.\n  response.addHeader(\"Access-Control-Allow-Origin\", headerValue);\n}\n```\n\nFor more information on `Access-Control-Allow-Origin` see:\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "csharp_password_rule-PasswordComplexity", "message": "The application's `PasswordValidator.RequiredLength` property allows passwords\nto be less than 8 characters. Consider requiring a length of at least 8 or more\ncharacters to reduce the chance of passwords being brute forced.\n\nExample of setting the RequiredLength to 8 in ASP.NET Core Identity:\n```\nbuilder.Services.Configure<IdentityOptions>(options =>\n{\n    // Default Password settings.\n    options.Password.RequireDigit = true;\n    options.Password.RequireLowercase = true;\n    options.Password.RequireNonAlphanumeric = true;\n    options.Password.RequireUppercase = true;\n    options.Password.RequiredLength = 8;\n    options.Password.RequiredUniqueChars = 1;\n});\n```\n\nFor more information on configuring ASP.NET Core Identity see:\nhttps://learn.microsoft.com/en-us/aspnet/core/security/authentication/identity-configuration\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "C#"}, {"identifier": "csharp_cookies_rule-CookieWithoutHttpOnlyFlag", "message": "The `HttpOnly` attribute when set to `true` protects the cookie value from being accessed by\nclient side JavaScript such\nas reading the `document.cookie` values. By enabling this protection, a website that is\nvulnerable to\nCross-Site Scripting (XSS) will be able to block malicious scripts from accessing the cookie\nvalue from JavaScript.\n\nExample of protecting an HttpCookie:\n```\n// Create an HttpOnly cookie.\nHttpCookie someCookie = new HttpCookie(\"SomeCookieName\", \"SomeValue\");\nsomeCookie.HttpOnly = true;\n```\n\nFor more information see:\nhttps://learn.microsoft.com/en-us/dotnet/api/system.web.httpcookie.httponly\n\nSession cookies should be configured with the following security directives:\n\n- [HTTPOnly](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#restrict_access_to_cookies)\n- [Secure](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#restrict_access_to_cookies)\n- [SameSite](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite)\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "C#"}, {"identifier": "csharp_cookies_rule-CookieWithoutSSLFlag", "message": "The `Secure` attribute when set to `true` protects the cookie value from being being\ntransmitted over clear text\ncommunication paths such as HTTP. By enabling this protection, the cookie will only be sent\nover HTTPS.\n\nExample of protecting an HttpCookie:\n```\n// Create an HttpOnly cookie.\nHttpCookie someCookie = new HttpCookie(\"SomeCookieName\", \"SomeValue\");\nsomeCookie.Secure = true;\n```\n\nFor more information see:\nhttps://learn.microsoft.com/en-us/dotnet/api/system.web.httpcookie.secure\n\nSession cookies should be configured with the following security directives:\n\n- [HTTPOnly](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#restrict_access_to_cookies)\n- [SameSite](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite)\n- [Secure](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#restrict_access_to_cookies)\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "C#"}, {"identifier": "csharp_csrf_rule-Csrf", "message": "The application failed to protect against Cross-Site Request Forgery (CSRF)\ndue to not including the `[ValidateAntiForgeryToken]` attribute on an\nHTTP method handler that could change user state (usually in the form of POST or PUT\nmethods).\n\nThe vulnerability can be exploited by an adversary creating a link or form on a third\nparty site and tricking an authenticated victim to access them.\n\nAdd the `[ValidateAntiForgeryToken]` to all methods which take in user data and change\nuser state (such as updating a database with a new value). This is especially true for\nfunctionality such as updating passwords or other security sensitive functions.\n\nAlternatively, applications can enable a global\n[AutoValidateAntiforgeryTokenAttribute](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.autovalidateantiforgerytokenattribute)\nfilter.\n\nFor more information on ValidateAntiForgeryToken and other CSRF protections in .NET\nsee the following URL:\nhttps://learn.microsoft.com/en-us/aspnet/core/security/anti-request-forgery\n\nAdditionally, consider setting all session cookies to have the `SameSite=Strict` attribute.\nIt should be noted that this may impact usability when sharing links across other mediums.\nIt is recommended that a two cookie based approach is taken, as outlined in the\n[Top level\nnavigations](https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis-08#section-8.8.2)\nsection\nof the SameSite RFC.\n\nFor more information on CSRF see OWASP's guide:\nhttps://owasp.org/www-community/attacks/csrf\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "C#"}, {"identifier": "csharp_validation_rule-InputValidation", "message": "By using the `[ValidateInput(false)]` attribute in a controller\nclass, the application will disable request validation for that\nmethod. This disables ASP.NET from examining requests for injection\nattacks such as Cross-Site-Scripting (XSS).\n\nIf possible, re-enable validation by using `ValidateInput(true)`.\nIn some cases this may not be possible, in which case ensure how the\nrequest data used is validated and this method does not\noutput user input directly into the view.\n\nFor more information on protecting ASP.NET Core applications from XSS see:\nhttps://learn.microsoft.com/en-us/aspnet/core/security/cross-site-scripting\n\nExample of enabling `ValidateInput` attribute:\n```\nclass ControllerClass\n{\n    [ValidateInput(true)]\n    public void SomeActionMethod()\n    {\n    }\n}\n```\n\nFor more information on ASP.NET request validation see OWASP:\nhttps://owasp.org/www-community/ASP-NET_Request_Validation\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "C#"}, {"identifier": "csharp_xss_rule-Xss", "message": "Cross Site Scripting (XSS) is an attack which exploits a web application or system to treat\nuser input\nas markup or script code. It is important to encode the data depending on the specific context\nit\nis used in. There are at least six context types:\n\n- Inside HTML tags `<div>context 1</div>`\n- Inside attributes: `<div class=\"context 2\"></div>`\n- Inside event attributes `<button onclick=\"context 3\">button</button>`\n- Inside script blocks: `<script>var x = \"context 4\"</script>`\n- Unsafe element HTML assignment: `element.innerHTML = \"context 5\"`\n- Inside URLs: `<iframe src=\"context 6\"></iframe><a href=\"context 6\">link</a>`\n\nScript blocks alone have multiple ways they need to be encoded. Extra care must be taken if\nuser input\nis ever output inside of script tags.\n\nUser input that is displayed within the application must be encoded, sanitized or validated\nto ensure it cannot be treated as HTML or executed as Javascript code. Care must also be\ntaken\nto not mix server-side templating with client-side templating, as the server-side templating\nwill\nnot encode things like {{ 7*7 }} which may execute client-side templating features.\n\nIt is _NOT_ advised to encode user input prior to inserting into a data store. The data will\nneed to be\nencoded depending on context of where it is output. It is much safer to force the displaying\nsystem to\nhandle the encoding and not attempt to guess how it should be encoded.\n\nConsider using built-in framework capabilities for automatically encoding user input.\nDepending\non output context, consider using the following `System.Text.Encodings.Web` encoders:\n\n- [HtmlEncoder](https://learn.microsoft.com/en-us/dotnet/api/system.text.encodings.web.htmlencoder)\n- [JavaScriptEncoder](https://learn.microsoft.com/en-us/dotnet/api/system.text.encodings.web.javascriptencoder)\n- [UrlEncoder](https://learn.microsoft.com/en-us/dotnet/api/system.text.encodings.web.urlencoder)\n\nFor more information on protecting ASP.NET Core applications from XSS see:\nhttps://learn.microsoft.com/en-us/aspnet/core/security/cross-site-scripting#accessing-encoders-in-code\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "C#"}, {"identifier": "csharp_injection_rule-SQLInjection", "message": "SQL Injection is a critical vulnerability that can lead to data or system compromise. By\ndynamically generating SQL query strings, user input may be able to influence the logic of\nthe SQL statement. This could lead to an adversary accessing information they should\nnot have access to, or in some circumstances, being able to execute OS functionality or code.\n\nReplace all dynamically generated SQL queries with parameterized queries. In situations where\ndynamic queries must be created, never use direct user input, but instead use a map or\ndictionary of valid values and resolve them using a user supplied key.\n\nFor example, some database drivers do not allow parameterized queries for `>` or `<` comparison\noperators. In these cases, do not use a user supplied `>` or `<` value, but rather have the\nuser\nsupply a `gt` or `lt` value. The alphabetical values are then used to look up the `>` and `<`\nvalues to be used in the construction of the dynamic query. The same goes for other queries\nwhere\ncolumn or table names are required but cannot be parameterized.\n\nExample using parameterized queries with `SqlCommand`:\n```\nstring userInput = \"someUserInput\";\nstring connectionString = ...;\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    String sql = \"SELECT name, value FROM table where name=@Name\";\n\n    using (SqlCommand command = new SqlCommand(sql, connection))\n    {\n        command.Parameters.Add(\"@Name\", System.Data.SqlDbType.NVarChar);\n        command.Parameters[\"@Name\"].Value = userInput;\n        using (SqlDataReader reader = command.ExecuteReader())\n        {\n            while (reader.Read())\n            {\n                Console.WriteLine(\"{0} {1}\", reader.GetString(0), reader.GetString(1));\n            }\n        }\n    }\n}\n```\n\nFor more information on SQL Injection see OWASP:\nhttps://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "C#"}, {"identifier": "csharp_injection_rule-XPathInjection", "message": "XPath injection is a vulnerability that can allow an adversary to inject or modify how an XML\nquery\nis structured. Depending on the logic of the original query, this could lead to adversaries\nextracting unauthorized information or in rare cases bypassing authorization checks.\n\nIt is recommended that LINQ to XML is used instead of XPath for querying XML documents. Care\nmust be taken to **not** call these LINQ functions with user input as they can still lead to\nXPath\ninjection:\n\n- `XPathEvaluate`\n- `XPathSelectElement`\n- `XPathSelectElements`\n\nExample using LINQ to XML to safely extract the first user from a list of users:\n```\n// XDocument is safe from XXE attacks as the resolver is disabled by default\nXDocument doc = XDocument.Load(\"users.xml\");\nXNamespace ns = \"urn:users-schema\";\n\nstring userInput = \"LastName\";\n\n// Get all the users.\nvar user = doc.Descendants(ns + \"user\")\n               .Select(u => new {\n                  FirstName = (string)u.Element(ns + \"first-name\"),\n                  LastName = (string)u.Element(ns + \"last-name\")\n               }).Where(u => u.LastName == userInput).FirstOrDefault();\n\nConsole.WriteLine(user.FirstName + \" \" + user.LastName);\n```\n\nFor more information on LINQ to XML security see:\nhttps://learn.microsoft.com/en-us/dotnet/standard/linq/linq-xml-security\n\nFor more information on XML security see OWASP's guide:\nhttps://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#net\n", "parent_source": "gitlab", "severity": "`INFO`", "languages": "C#"}, {"identifier": "csharp_injection_rule-CommandInjection", "message": "OS command injection is a critical vulnerability that can lead to a full system\ncompromise as it may allow an adversary to pass in arbitrary commands or arguments\nto be executed.\n\nUser input should never be used in constructing commands or command arguments\nto functions which execute OS commands. This includes filenames supplied by\nuser uploads or downloads.\n\nEnsure your application does not:\n\n- Use user-supplied information in the process name to execute.\n- Use user-supplied information in an OS command execution function which does\nnot escape shell meta-characters.\n- Use user-supplied information in arguments to OS commands.\n\nThe application should have a hardcoded set of arguments that are to be passed\nto OS commands. If filenames are being passed to these functions, it is\nrecommended that a hash of the filename be used instead, or some other unique\nidentifier. It is strongly recommended that a native library that implements\nthe same functionality be used instead of using OS system commands, due to the\nrisk of unknown attacks against third party commands.\n\nWhen specifying the OS command, ensure the application uses the full path\ninformation, otherwise the OS may attempt to look up which process to execute\nand could be vulnerable to untrusted search path vulnerabilities (CWE-426).\n\nExample of safely executing an OS command:\n```\npublic void ExecuteCommand(string userFileData) {\n    // generate a random filename, do not using user input\n    string fileName = \"C:\\\\Temp\\\\\" + Guid.NewGuid();\n    File.WriteAllText(fileName, userFileData);\n\n    using (Process process = new Process())\n    {\n        // hardcode the full process path\n        ProcessStartInfo processInfo = new ProcessStartInfo(\"C:\\\\App\\\\FileReader.exe\");\n        // only pass in trust arguments, and never direct user input.\n        processInfo.Arguments = fileName;\n        processInfo.UseShellExecute = false;\n        process.StartInfo = processInfo;\n        process.Start();\n    }\n}\n```\n\nFor more information on OS command injection, see OWASP's guide:\nhttps://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "C#"}, {"identifier": "csharp_injection_rule-XXEInjection", "message": "External XML entities are a feature of XML parsers that allow documents to contain references\nto\nother documents or data. This feature can be abused to read files, communicate with external\nhosts,\nexfiltrate data, or cause a Denial of Service (DoS).\n\nXML parsers and document loaders must be configured to not resolve entities. This can be done\nby:\n- Ensuring you are running a version of .NET Framework greater than 4.5.2 (released in 2014).\n- Using `XDocument` which disables entity resolution and is generally safe from DoS.\n- Setting `XmlDocument`'s `XmlResolver` to null.\n- Setting `XmlTextReader`'s  `ProhibitDtd` to `true`\n- Setting `XmlReaderSettings` `DtdProcessing` to `DtdProcessing.Prohibit`\n\nExample of safely loading an XML file using `XmlDocument`:\n```\nXmlDocument document = new XmlDocument();\ndocument.XmlResolver = null;\ndocument.Load(\"users.xml\");\n```\n\nFor more information on XML security, see OWASP's guide:\nhttps://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#net\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "C#"}, {"identifier": "csharp_injection_rule-LdapInjection", "message": "LDAP injection attacks exploit LDAP queries to influence how data is returned by\nthe LDAP, or in this case an Active Directory server.\n\nIt is recommended that newer applications use the `System.DirectoryServices.AccountManagement`\nAPI instead of `DirectorySearcher` API as it hides the complexity of querying LDAP directly.\nHowever,\nthe `AccountManagement` API is still susceptible to LDAP injection if a user inputs LDAP\nqueries,\nincluding LDAP filter characters such as `*`.\n\nIt is recommended that all input passed to LDAP querying systems encode the following values:\n\n- Any occurrence of the null character must be escaped as \u201c\\00\u201d.\n- Any occurrence of the open parenthesis character must be escaped as \u201c\\28\u201d.\n- Any occurrence of the close parenthesis character must be escaped as \u201c\\29\u201d.\n- Any occurrence of the asterisk character must be escaped as \u201c\\2a\u201d.\n- Any occurrence of the backslash character must be escaped as \u201c\\5c\u201d.\n\nExample code that safely encodes input for use in an LDAP query using the `AccountManagement`\nAPI:\n```\nusing System.DirectoryServices.AccountManagement;\n\nstring EncodeLDAPString(string input) {\n    // Note the \\ character is replaced first\n    char[] chars = new char[] { '\\\\', '\\0', '(', ')', '*' };\n    string[] encoded = new string[] { \"\\\\5c\", \"\\\\00\", \"\\\\28\", \"\\\\29\", \"\\\\2a\" };\n\n    for (int i = 0; i < chars.Length; i++)\n    {\n        input = input.Replace(chars[i].ToString(), encoded[i]);\n    }\n\n    return input;\n}\n\n// unsafe, do not use without encoding first\nstring userInput = \"Administrator\";\nPrincipalContext AD = new PrincipalContext(ContextType.Domain, \"ad.example.dev\");\n\nUserPrincipal u = new UserPrincipal(AD);\nstring encodedUserName = EncodeLDAPString(userInput);\n\n// The AD search term, encoded prior to calling search\nu.SamAccountName = encodedUserName;\n\n// Search for user\nPrincipalSearcher search = new PrincipalSearcher(u);\n\n// Use FindOne to only return a single result\nUserPrincipal result = (UserPrincipal)search.FindOne();\nsearch.Dispose();\n\n// show some details\nif (result != null) {\n    Console.WriteLine(\"User: {0}\", result.DisplayName);\n} else {\n    Console.WriteLine(\"user not found\");\n}\n```\n\nThe same encoding method shown in `EncodeLDAPString` can also be used when using the\nolder `DirectorySearcher` API.\n\nFor more information see OWASP's guide:\nhttps://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "C#"}, {"identifier": "csharp_deserialization_rule-InsecureDeserialization", "message": "Deserialization attacks exploit the process of reading serialized data and turning it back into an\nobject. By constructing malicious objects and serializing them, an adversary may attempt to:\n\n- Inject code that is executed upon object construction, which occurs during the deserialization process.\n- Exploit mass assignment by including fields that are not normally a part of the serialized data but are\n  read in during deserialization.\n\nMicrosoft recommends no longer using the following serialization formats:\n\n- BinaryFormatter\n- SoapFormatter\n- NetDataContractSerializer\n- LosFormatter\n- ObjectStateFormatter\n\nConsider safer alternatives such as serializing data in the JSON format. Ensure any format chosen allows\nthe application to specify exactly which object types are allowed to be deserialized. Additionally, when\ndeserializing, never deserialize to base object types like `Object` and only cast to the exact object\ntype that is expected.\n\nTo protect against mass assignment, only allow deserialization of the specific fields that are required.\nIf this is not easily done, consider creating an intermediary type that can be serialized with only the\nnecessary fields exposed.\n\nFor more information see Microsoft's deserialization security guide:\nhttps://learn.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide\n\nFor more details on deserialization attacks in general, see OWASP's guide:\nhttps://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html\n\nIt should be noted that [tools exist](https://github.com/pwntester/ysoserial.net) to automatically create\nexploit code for these vulnerabilities.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "C#"}, {"identifier": "csharp_endpoint_rule-UnvalidatedRedirect", "message": "The application may allow open redirects if created using user supplied input. Open redirects\nare\ncommonly\nabused in phishing attacks where the original domain or URL looks like a legitimate link, but\nthen\nredirects a user to a malicious site. An example would be\n`https://example.com/redirect?url=https://%62%61%64%2e%63%6f%6d%2f%66%61%6b%65%6c%6f%67%69%6e`\nwhich,\nwhen decoded, turns into `bad.com/fakelogin`.\n\nNever redirect a client based on user input. It is recommended that the list of target links\nto\nredirect a user to are contained server side, and retrieved using a numerical value\nas an index to return the link to be redirected to. For example, `/redirect?id=1` would cause\nthe\napplication to look up the `1` index and return a URL such as `https://example.com`. This URL\nwould\nthen be used to redirect the user, using the 301 response code and `Location` header.\n\nFor more information on open redirects see OWASP's guide:\nhttps://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "C#"}, {"identifier": "csharp_other_rule-UnsafeXSLTSettingUsed", "message": "By setting `XsltSettings.EnableScript` to true, an adversary who is able to influence the\nloaded\nXSL document could directly inject code to compromise the system. It is strongly\nrecommended that an alternative approach is used to work with XML data.\n\nFor increased security:\n\n- Never process user-supplied XSL style sheets\n- Ensure `XsltSettings.EnableScript` is set to false\n- Ensure `XsltSettings.EnableDocumentFunction` is set to false\n\nIf the application must calculate values from XML input, instead of using XSL scripts to\nexecute functions, modify the XML document prior to running the\n`XslCompiledTransform.Transform` method.\n\nExample of modifying the XML prior to running `Transform`:\n```\nconst String filename = \"number.xml\";\nconst String stylesheet = \"calc.xsl\";\n\n// Compile the style sheet.\nXsltSettings xslt_settings = new XsltSettings();\nxslt_settings.EnableScript = false; // disable script\nxslt_settings.EnableDocumentFunction = false; // disable document() function\nXslCompiledTransform xslt = new XslCompiledTransform();\nXmlResolver resolver = null; // set a null entity resolver\nxslt.Load(stylesheet, xslt_settings, resolver);\n\n// Load the XML source file, using XDocument for safety\nXDocument doc = XDocument.Load(filename);\n\n// do our modifications to the document before the transformation\n// instead of inside of a script.\ndoc.Element(\"data\").Add(new XElement(\"circle\", new XElement(\"radius\", 12)));\n\n// Create an XmlWriter.\nXmlWriterSettings settings = new XmlWriterSettings();\nsettings.OmitXmlDeclaration = true;\nsettings.Indent = true;\nXmlWriter writer = XmlWriter.Create(\"output.xml\", settings);\n// Finally, execute the transformation.\nxslt.Transform(doc.CreateReader(), writer);\nwriter.Close();\n```\n\nFor more information on security considerations when using XSL see the following URLs:\n- https://learn.microsoft.com/en-us/dotnet/standard/data/xml/xslt-security-considerations\n- https://learn.microsoft.com/en-us/dotnet/api/system.xml.xsl.xslcompiledtransform?view=net-7.0#security-considerations\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "C#"}, {"identifier": "csharp_crypto_rule-WeakHashingFunction", "message": "Both MD5 and SHA1 hash algorithms have been found to be vulnerable to producing collisions.\nThis means\nthat two different values, when hashed, can lead to the same hash value. If the application is\ntrying\nto use these hash methods for storing passwords, then it is recommended to switch to a\npassword hashing\nalgorithm such as Argon2id or PBKDF2. Currently there is no vetted Argon2id implementation for\nC# so\nit is recommended that PBKDF2 be used until one is available.\n\nExample using PBKDF2 to generate and compare passwords:\n```\nconst int SaltSize = 24;\nconst int HashSize = 24;\n// number of pbkdf2 iterations, Rfc2898DeriveBytes uses hmac-sha1\n// so set a high iteration count\nconst int Iterations = 1_300_000;\nbyte[] salt = new byte[SaltSize];\nRandomNumberGenerator.Fill(salt);\n\nRfc2898DeriveBytes pbkdf2 = new Rfc2898DeriveBytes(\"some password\", salt, Iterations);\nbyte[] hashBytes = pbkdf2.GetBytes(HashSize);\n// Store salt and hashedBytes in a data store such as database for authentication\nConsole.WriteLine(\"Hash {0}\", BitConverter.ToString(hashBytes).Replace(\"-\", \"\"));\n// Do a constant time comparison as to not leak data based on timing\nif (CryptographicOperations.FixedTimeEquals(hashBytes, hashBytes)) {\n    Console.WriteLine(\"hashes are equal\");\n}\n```\nFor more information on PBKDF2 see:\nhttps://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.rfc2898derivebytes\n\nFor more information on secure password storage see OWASP:\nhttps://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "C#"}, {"identifier": "csharp_crypto_rule-CertificateValidationDisabled", "message": "The `ServicePointManager.ServerCertificateValidationCallback` event has been set\nto always return `true`, which effectively disables the validation of server\ncertificates.\n\nThis allows for an adversary who is in between the application and the target host to intercept\npotentially sensitive information or transmit malicious data.\n\nRemove the callback function that is returning true to allow normal certificate validation to\nproceed.\nWhen no callback is provided, the client will validate that the certificate name matches the\nhostname\nthat was used when creating the request.\n\nFor more information on the `ServerCertificateValidationCallback` property see:\nhttps://learn.microsoft.com/en-us/dotnet/api/system.net.servicepointmanager.servercertificatevalidationcallback\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "C#"}, {"identifier": "csharp_crypto_rule-WeakCipherAlgorithm", "message": "DES, TripleDES and RC2 are all considered broken or insecure cryptographic algorithms.\nIf using .NET Framework greater than version 6.0 consider using `ChaCha20Poly1305`\ninstead as it is easier and faster than the alternatives such as `AES-256-GCM`.\n\nFor older applications, `AES-256-GCM` is recommended, however it has many drawbacks:\n- Slower than `ChaCha20Poly1305`.\n- Catastrophic failure if nonce values are reused.\n\nExample using `ChaCha20Poly1305`:\n```\n// Generate a random key\nbyte[] key = new byte[32];\nRandomNumberGenerator.Fill(key);\n\n// Note nonce values _must_ be regenerated every time they are used.\nbyte[] nonce = new byte[12];\nRandomNumberGenerator.Fill(nonce);\n\nbyte[] authTag = new byte[16];\nbyte[] cipherText;\n\nusing (ChaCha20Poly1305 encryptor = new ChaCha20Poly1305(key))\n{\n    byte[] plainText = System.Text.Encoding.UTF8.GetBytes(\"Secret text to encrypt\");\n    cipherText = new byte[plainText.Length];\n    encryptor.Encrypt(nonce, plainText, cipherText, authTag);\n}\n\nusing (ChaCha20Poly1305 decryptor = new ChaCha20Poly1305(key))\n{\n    byte[] output = new byte[cipherText.Length];\n    decryptor.Decrypt(nonce, cipherText, authTag, output);\n    Console.WriteLine(\"Output: {0}\", System.Text.Encoding.UTF8.GetString(output));\n}\n```\n\nExample using `AES-256-GCM`:\n```\n// Generate a random key\nbyte[] key = new byte[32];\nRandomNumberGenerator.Fill(key);\n\n// Note nonce values _must_ be regenerated every time they are used.\nbyte[] nonce = new byte[AesGcm.NonceByteSizes.MaxSize];\nRandomNumberGenerator.Fill(nonce);\n\nbyte[] authTag = new byte[AesGcm.TagByteSizes.MaxSize];\nbyte[] cipherText;\n\nusing (AesGcm encryptor = new AesGcm(key))\n{\n    byte[] plainText = Encoding.UTF8.GetBytes(\"Secret text to encrypt\");\n    cipherText = new byte[plainText.Length];\n    encryptor.Encrypt(nonce, plainText, cipherText, authTag);\n}\n\nusing (AesGcm decryptor = new AesGcm(key))\n{\n    byte[] output = new byte[cipherText.Length];\n    decryptor.Decrypt(nonce, cipherText, authTag, output);\n    Console.WriteLine(\"Output: {0}\",  Encoding.UTF8.GetString(output));\n}\n```\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "C#"}, {"identifier": "csharp_crypto_rule-WeakRNG", "message": "Depending on the context, generating weak random numbers may expose cryptographic functions\nwhich rely on these numbers to be exploitable. When generating numbers for sensitive values\nsuch as tokens, nonces, and cryptographic keys, it is recommended that the\n`RandomNumberGenerator` class be used.\n\nExample `RandomNumberGenerator` usage:\n```\nInt32 randInt = RandomNumberGenerator.GetInt32(32000);\nbyte[] randomBytes = new byte[64];\nRandomNumberGenerator.Fill(randomBytes);\nConsole.WriteLine(\"Random Int32: {0}\", randInt);\nConsole.WriteLine(\"Random Bytes: {0}\", BitConverter.ToString(randomBytes).Replace(\"-\", \"\"));\n```\n\nFor more information see:\nhttps://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.randomnumbergenerator\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "C#"}, {"identifier": "csharp_crypto_rule-WeakCipherMode", "message": "Cryptographic algorithms provide many different modes of operation, only some of which provide\nmessage integrity. Without message integrity it could be possible for an adversary to attempt\nto tamper with the ciphertext which could lead to compromising the encryption key. Newer\nalgorithms\napply message integrity to validate ciphertext has not been tampered with.\n\nInstead of using an algorithm that requires configuring a `CipherMode`, an algorithm\nthat has built-in message integrity should be used. If using .NET Framework greater\nthan version 6.0 consider using `ChaCha20Poly1305` or `AES-256-GCM`.\n\nFor older applications, `AES-256-GCM` is recommended, however it has many drawbacks:\n- Slower than `ChaCha20Poly1305`.\n- Catastrophic failure if nonce values are re-used.\n\nExample using `ChaCha20Poly1305`:\n```\n// Generate a random key\nbyte[] key = new byte[32];\nRandomNumberGenerator.Fill(key);\n\nChaCha20Poly1305 encryptor = new ChaCha20Poly1305(key);\n\n// Note nonce values _must_ be regenerated every time they are used.\nvar nonce = new byte[12];\nRandomNumberGenerator.Fill(nonce);\n\nbyte[] plainText = System.Text.Encoding.UTF8.GetBytes(\"Secret text to encrypt\");\nbyte[] cipherText = new byte[plainText.Length];\nvar authTag = new byte[16];\n\nencryptor.Encrypt(nonce, plainText, cipherText, authTag);\nbyte[] output = new byte[cipherText.Length];\nencryptor.Decrypt(nonce, cipherText, authTag, output);\nConsole.WriteLine(\"Output: {0}\", System.Text.Encoding.UTF8.GetString(output));\n```\n\nExample using `AES-256-GCM`:\n```\nvar plaintextBytes = Encoding.UTF8.GetBytes(\"Secret text to encrypt\");\nvar key = new byte[32];\nRandomNumberGenerator.Fill(key);\n\nusing var aes = new AesGcm(key);\nvar nonce = new byte[AesGcm.NonceByteSizes.MaxSize];\nRandomNumberGenerator.Fill(nonce);\n\nvar cipherText = new byte[plaintextBytes.Length];\nvar tag = new byte[AesGcm.TagByteSizes.MaxSize];\n\naes.Encrypt(nonce, plaintextBytes, cipherText, tag);\n\n// Decrypt\nusing (var decrypt = new AesGcm(key))\n{\n    var decryptedBytes = new byte[cipherText.Length];\n\n    decrypt.Decrypt(nonce, cipherText, tag, decryptedBytes);\n\n    Console.WriteLine(\"Decrypted: {0}\",  Encoding.UTF8.GetString(decryptedBytes));\n}\n```\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "C#"}, {"identifier": "csharp_path_rule-PathTraversal", "message": "The application dynamically constructs file or path information. If the path\ninformation comes from user input, it could be abused to read sensitive files,\naccess other users data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible consider hashing user input or replacing it with unique values and\nuse `System.IO.Path.GetFullPath` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `Path.GetFullPath` and not allowing direct user input:\n```\n// store user input alongside an ID we control\nstruct userData\n{\n    public string userFilename;\n    public Guid id;\n}\n\nclass Program\n{\n    public static void Main()\n    {\n        userData data = new userData();\n        // user input, saved only as a reference\n        data.userFilename = \"..\\\\test.txt\";\n\n        // random id as the filename\n        data.id = Guid.NewGuid();\n\n        // restrict all file processing to this directory only\n        string basePath = \"C:\\\\Restricted\\\\\";\n\n        // resolve the full path, but only use our random generated id\n        string fullPath = Path.GetFullPath(basePath + data.id);\n\n        // verify the path is contained within our basePath\n        if (!fullPath.StartsWith(basePath)) {\n            Console.WriteLine(\"Invalid path specified!\");\n            return;\n        }\n        // process / work with file\n    }\n}\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "C#"}, {"identifier": "javascript_require_rule-non-literal-require", "message": "The application was found to dynamically import a module by calling `require` using a\nnon-literal string. An adversary might be able to read the first line of\narbitrary files. If they had write access to the file system, they may also be able to\nexecute arbitrary code.\n\nTo remediate this issue, use a hardcoded string literal when calling `require`. Never call it\nit with dynamically created variables or user-supplied data.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "javascript_pathtraversal_rule-non-literal-fs-filename", "message": "The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(\"Invalid path specified!\");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "TypeScript, JavaScript"}, {"identifier": "javascript_exec_rule-child-process", "message": "OS command injection is a critical vulnerability that can lead to a full system\ncompromise as it may allow an adversary to pass in arbitrary commands or arguments\nto be executed.\n\nUser input should never be used in constructing commands or command arguments\nto functions which execute OS commands. This includes filenames supplied by\nuser uploads or downloads.\n\nEnsure your application does not:\n\n- Use user-supplied information in the process name to execute.\n- Use user-supplied information in an OS command execution function which does\nnot escape shell meta-characters.\n- Use user-supplied information in arguments to OS commands.\n\nThe application should have a hardcoded set of arguments that are to be passed\nto OS commands. If filenames are being passed to these functions, it is\nrecommended that a hash of the filename be used instead, or some other unique\nidentifier. It is strongly recommended that a native library that implements\nthe same functionality be used instead of using OS system commands, due to the\nrisk of unknown attacks against third-party commands.\n\nWhen specifying the OS command, ensure the application uses the full path\ninformation, otherwise the OS may attempt to look up which process to execute\nand could be vulnerable to untrusted search path vulnerabilities (CWE-426).\n\nExample of safely executing an OS command:\n```\nconst child_process = require('child_process');\nconst fs = require('fs');\nconst crypto = require('node:crypto');\nconst { mkdtempSync } = require('node:fs');\n\nfunction executeCommand(userFileData) {\n    // Create a temporary directory, preferably in an application directory\n    // that only the application has access to.\n    const fileDir = mkdtempSync('/tmp/tmpdir-');\n    // Generate a random filename, do not use user input\n    const filePath = fileDir + path.sep + crypto.randomUUID();\n    // Write the user-supplied data to the temporary file.\n    fs.writeFileSync(filePath, userFileData);\n    // Execute a program with a hardcoded path to the binary\n    child_process.exec(`/bin/cat ${filePath}`, (error, stdout, stderr) => {\n        // Delete the temporary directory and file if no longer needed\n        fs.rmSync(fileDir, { recursive: true, force: true });\n        if (error) {\n          console.error(`exec error: ${error}`);\n          return;\n        }\n        console.log(`stdout: ${stdout}`);\n        console.error(`stderr: ${stderr}`);\n    });\n}\n```\n\nFor more information on OS command injection, see OWASP's guide:\nhttps://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html\n\nDetected non-literal calls to child_process.exec(). This could lead to a command\ninjection vulnerability.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "javascript_dos_rule-non-literal-regexp", "message": "The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger\nbe responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular\nexpression should be\nhardcoded. If this is not possible, consider using an alternative regular expression engine\nsuch as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative that does not\nsupport backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "javascript_random_rule-pseudo-random-bytes", "message": "Depending on the context, generating weak random numbers may expose cryptographic functions,\nwhich rely on these numbers, to be exploitable. When generating numbers for sensitive values\nsuch as tokens, nonces, and cryptographic keys, it is recommended that the `randomBytes` method\nof the `crypto` module be used instead of `pseudoRandomBytes`.\n\nExample using `randomBytes`:\n```\n// Generate 256 bytes of random data\nconst randomBytes = crypto.randomBytes(256);\n```\n\nFor more information on JavaScript Cryptography see:\nhttps://nodejs.org/api/crypto.html#cryptorandombytessize-callback\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "javascript_timing_rule-possible-timing-attacks", "message": "The application was found executing string comparisons using one of `===`, `!==`, `==` or `!=`\nagainst security sensitive values. String comparisons like this are not constant time, meaning\nthe\nfirst character found not to match in the two strings will immediately exit the conditional\nstatement.\nThis allows an adversary to calculate or observe small timing differences depending on the\nstrings\npassed to this comparison. This potentially allows an adversary the ability to brute force a\nstring\nthat will match the expected value by monitoring different character values.\n\nTo remediate this issue, use the `crypto.timingSafeEqual` method when comparing strings.\n\nExample using `crypto.timingSafeEqual` to safely compare strings:\n```\nfunction constantTimeIsPasswordEqual(userInput) {\n    // Retrieve the password from a secure data store such as a KMS or Hashicorp's vault.\n    const password = getPasswordFromSecureDataStore();\n    // Use crypto timingSafeEqual to ensure the comparison is done in constant time.\n    return crypto.timingSafeEqual(Buffer.from(userInput, 'utf-8'), Buffer.from(password,\n'utf-8'));\n}\n```\n\nFor more information on constant time comparison see:\n- https://nodejs.org/api/crypto.html#crypto_crypto_timingsafeequal_a_b\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "JavaScript"}, {"identifier": "javascript_xss_rule-mustache-escape", "message": "Markup escaping disabled. This can be used with some template engines to escape\ndisabling of HTML entities, which can lead to XSS attacks.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "javascript_eval_rule-eval-with-expression", "message": "The application was found calling the `eval` function with a non-literal variable. If the\nvariable comes from user-supplied input, an adversary could attempt to execute arbitrary\nJavaScript\ncode. This could lead to a full system compromise in Node applications or Cross-site Scripting\n(XSS) in web applications.\n\nTo remediate this issue, remove all calls to `eval` and consider alternative methods for\nexecuting\nthe necessary business logic. There is almost no safe method of calling `eval` with\nuser-supplied input.\nInstead, consider alternative methods such as using property accessors to dynamically access\nvalues.\n\nExample using property accessors to dynamically access an object's property:\n```\n// Define an object\nconst obj = {key1: 'value1', key2: 'value2'};\n// Get key dynamically from user input\nconst key = getUserInput();\n// Check if the key exists in our object and return it, or a default empty string\nconst value = (obj.hasOwnProperty(key)) ? obj[key] : '';\n// Work with the value\n```\n\nFor more information on why not to use `eval`, and alternatives see:\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#never_use_eval!\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "javascript_buf_rule-detect-new-buffer", "message": "The application was found calling  the `new Buffer` constructor which has been deprecated\nsince Node 8.\nBy passing in a non-literal value, an adversary could allocate large amounts of memory.\n\nOther issues also exist with the `Buffer` constructor:\n- Older versions would return uninitialized memory, which could contain sensitive information\n- Unable to easily determine what a Buffer contained if passed a non-literal value\n\nTo remediate this issue, use `Buffer.alloc` or `Buffer.from` instead to allocate a new\n`Buffer`.\n\nExample using `Buffer.alloc` instead of `new Buffer(...)`:\n```\n// Create a new buffer using Buffer.from\nconst buf = Buffer.from([1, 2, 3, 4]);\n// Work with buf\n```\n\nFor more information on migrating to `Buffer.from()`/`Buffer.alloc()` see:\n- https://nodejs.org/en/docs/guides/buffer-constructor-deprecation\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "javascript_buf_rule-buffer-noassert", "message": "The application was found using `noAssert` when calling the Buffer API. The `noAssert`\nargument has\nbeen deprecated since Node 10. Calling the Buffer API with this argument allows the offset\nspecified to\nbe beyond the end of the buffer. This could result in writing or reading beyond the end of the\nbuffer and\ncause a segmentation fault, leading to the application crashing.\n\nTo remediate this issue, remove the `true` argument when calling any of the Buffer read or\nwrite methods.\nThe application should still handle `RangeError` exception cases where the offset is beyond\nthe end of the\nbuffer.\n\nExample reading from a Buffer without the `noAssert` argument and gracefully handling errors:\n```\n// Create a new buffer\nconst buf = Buffer.from([1, 2, 3, 4]);\ntry {\n    // Read a single byte from it, starting at offset 1\n    const b = buf.readInt8(1);\n    // Work with b\n} catch (e) {\n    if (e instanceof RangeError) {\n        console.log('Invalid offset: %s', e.message);\n    }\n    // handle other errors\n}\n```\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "javascript_react_rule-dangerouslysetinnerhtml", "message": "The application was found calling `dangerouslySetInnerHTML` which may lead to Cross Site\nScripting (XSS). By default, React components will encode the data properly before rendering.\nCalling `dangerouslySetInnerHTML` disables this encoding and allows raw markup\nand JavaScript to be executed.\n\nXSS is an attack which exploits a web application or system to treat\nuser input as markup or script code. It is important to encode the data, depending on the\nspecific context it is used in. There are at least six context types:\n\n- Inside HTML tags `<div>context 1</div>`\n- Inside attributes: `<div class=\"context 2\"></div>`\n- Inside event attributes `<button onclick=\"context 3\">button</button>`\n- Inside script blocks: `<script>var x = \"context 4\"</script>`\n- Unsafe element HTML assignment: `element.innerHTML = \"context 5\"`\n- Inside URLs: `<iframe src=\"context 6\"></iframe><a href=\"context 6\">link</a>`\n\nScript blocks alone have multiple ways they need to be encoded. Extra care must be taken if\nuser input\nis ever output inside of script tags.\n\nUser input that is displayed within the application must be encoded, sanitized or validated\nto ensure it cannot be treated as HTML or executed as Javascript code. Care must also be\ntaken\nto not mix server-side templating with client-side templating, as the server-side templating\nwill\nnot encode things like {{ 7*7 }} which may execute client-side templating features.\n\nIt is _NOT_ advised to encode user input prior to inserting into a data store. The data will\nneed to be\nencoded depending on context of where it is output. It is much safer to force the displaying\nsystem to\nhandle the encoding and not attempt to guess how it should be encoded.\n\nRemove the call to `dangerouslySetInnerHTML` or ensure that the data used in this call does\nnot come from user-supplied input.\n\nFor more information on dangerously setting inner HTML see:\n- https://react.dev/reference/react-dom/components/common#dangerously-setting-the-inner-html\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "TypeScript, JavaScript"}, {"identifier": "scala_xml_rule-SAMLIgnoreComments", "message": "Ignoring XML comments in SAML may lead to authentication bypass\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_xml_rule-XsltTransform", "message": "It is possible to attach malicious behavior to those style sheets. Therefore, if an attacker\ncan control the content or the source of the style sheet, he might be able to trigger remote\ncode execution.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "scala_xml_rule-XmlDecoder", "message": "Avoid using XMLDecoder to parse content from an untrusted source.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_xml_rule-ApacheXmlRpc", "message": "Enabling extensions in Apache XML RPC server or client can lead to deserialization\nvulnerability which would allow an attacker to execute arbitrary code.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_password_rule-ConstantDBPassword", "message": "This code creates a database connect using a hardcoded, constant password. Anyone with access\nto either the source code or the compiled code can easily learn the password.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_password_rule-HardcodeKey", "message": "Cryptographic keys should not be kept in the source code. The source code can be widely shared\nin an enterprise environment, and is certainly shared in open source. To be managed safely,\npasswords and secret keys should be stored in separate configuration files or keystores.\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Scala"}, {"identifier": "scala_password_rule-HardcodeKeySuspiciousName", "message": "Cryptographic keys should not be kept in the source code. The source code can be widely shared\nin an enterprise environment, and is certainly shared in open source. To be managed safely,\npasswords and secret keys should be stored in separate configuration files or keystores.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_password_rule-HardcodeKeyEquals", "message": "Cryptographic keys should not be kept in the source code. The source code can be widely shared\nin an enterprise environment, and is certainly shared in open source. To be managed safely,\npasswords and secret keys should be stored in separate configuration files or keystores.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_password_rule-HardcodePassword", "message": "Passwords should not be kept in the source code. The source code can be widely shared in an\nenterprise environment, and is certainly shared in open source. To be managed safely, passwords\nand secret keys should be stored in separate configuration files or keystores.\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Scala"}, {"identifier": "scala_password_rule-HardcodeKeySuspiciousValue", "message": "Cryptographic keys should not be kept in the source code. The source code can be widely shared\nin an enterprise environment, and is certainly shared in open source. To be managed safely,\npasswords and secret keys should be stored in separate configuration files or keystores.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_password_rule-EmptyDBPassword", "message": "This code creates a database connect using a blank or empty password. This indicates that the\ndatabase is not protected by a password.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_smtp_rule-InsecureSmtp", "message": "Server identity verification is disabled when making SSL connections.\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Scala"}, {"identifier": "scala_smtp_rule-SmtpClient", "message": "Simple Mail Transfer Protocol (SMTP) is a the text based protocol used for\nemail delivery. Like with HTTP, headers are separate by new line separator. If\nkuser input is place in a header line, the application should remove or replace\nnew line characters (CR / LF). You should use a safe wrapper such as Apache\nCommon Email and Simple Java Mail which filter special characters that can lead\nto header injection.\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Scala"}, {"identifier": "scala_inject_rule-AWSQueryInjection", "message": "Constructing SimpleDB queries containing user input can allow an attacker to view unauthorized\nrecords.\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Scala"}, {"identifier": "scala_inject_rule-PathTraversalIn", "message": "A file is opened to read its content. The filename comes from an input parameter. If an\nunfiltered parameter is passed to this file API, files from an arbitrary filesystem location\ncould be read. This rule identifies potential path traversal vulnerabilities. In many cases,\nthe constructed file path cannot be controlled by the user.\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Scala"}, {"identifier": "scala_inject_rule-CLRFInjectionLogs", "message": "When data from an untrusted source is put into a logger and not neutralized correctly, an\nattacker could forge log entries or include malicious content. Inserted false entries could be\nused to skew statistics, distract the administrator or even to implicate another party in the\ncommission of a malicious act. If the log file is processed automatically, the attacker can\nrender the file unusable by corrupting the format of the file or injecting unexpected\ncharacters. An attacker may also inject code or other commands into the log file and take\nadvantage of a vulnerability in the log processing utility (e.g. command injection or XSS).\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Scala"}, {"identifier": "scala_inject_rule-CustomInjectionSQLString", "message": "The method identified is susceptible to injection. The input should be validated and properly\nescaped.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_inject_rule-SqlInjection", "message": "The input values included in SQL queries need to be passed in safely. Bind\nvariables in prepared statements can be used to easily mitigate the risk of\nSQL injection.\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Scala"}, {"identifier": "scala_inject_rule-BeanPropertyInjection", "message": "An attacker can set arbitrary bean properties that can compromise system integrity. An\nattacker can leverage this functionality to access special bean properties like\nclass.classLoader that will allow them to override system properties and potentially execute\narbitrary code.\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Scala"}, {"identifier": "scala_inject_rule-HttpParameterPollution", "message": "Concatenating unvalidated user input into a URL can allow an attacker to override the value of\na request parameter. Attacker may be able to override existing parameter values, inject a new\nparameter or exploit variables out of a direct reach. HTTP Parameter Pollution (HPP) attacks\nconsist of injecting encoded query string delimiters into other existing parameters. If a web\napplication does not properly sanitize the user input, a malicious user may compromise the\nlogic of the application to perform either client-side or server-side attacks.\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Scala"}, {"identifier": "scala_inject_rule-CommandInjection", "message": "The highlighted API is used to execute a system command. If unfiltered input is passed to this\nAPI, it can lead to arbitrary command execution.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_inject_rule-FileDisclosure", "message": "Constructing a server-side redirect path with user input could allow an\nattacker to download application binaries (including application classes or\njar files) or view arbitrary files within protected directories.\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Scala"}, {"identifier": "scala_inject_rule-CustomInjection", "message": "The method identified is susceptible to injection. The input should be validated and properly\nescaped.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_inject_rule-LDAPInjection", "message": "Just like SQL, all inputs passed to an LDAP query need to be passed in safely. Unfortunately,\nLDAP doesn't have prepared statement interfaces like SQL. Therefore, the primary defense\nagainst LDAP injection is strong input validation of any untrusted data before including it in\nan LDAP query.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_inject_rule-SpotbugsPathTraversalAbsolute", "message": "\"The software uses an HTTP request parameter to construct a pathname that should be within a\nrestricted directory, but it does not properly neutralize absolute path sequences such as\n\"/abs/path\" that can resolve to a location that is outside of that directory. See\nhttp://cwe.mitre.org/data/definitions/36.html for more information.\"\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_inject_rule-OgnlInjection", "message": "\"A expression is built with a dynamic value. The source of the value(s) should be verified to\navoid that unfiltered values fall into this risky code evaluation.\"\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_inject_rule-ELInjection", "message": "An expression is built with a dynamic value. The source of the value(s) should be verified to\navoid that unfiltered values fall into this risky code evaluation.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_inject_rule-SpotbugsPathTraversalRelative", "message": "\"The software uses an HTTP request parameter to construct a pathname that should be within a\nrestricted directory, but it does not properly neutralize sequences such as \"..\" that can\nresolve to a location that is outside of that directory. See\nhttp://cwe.mitre.org/data/definitions/23.html for more information.\"\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_inject_rule-PathTraversalOut", "message": "A file is opened to write to its contents. The filename comes from an input parameter. If an\nunfiltered parameter is passed to this file API, files at an arbitrary filesystem location\ncould be modified. This rule identifies potential path traversal vulnerabilities. In many\ncases, the constructed file path cannot be controlled by the user.\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Scala"}, {"identifier": "scala_perm_rule-OverlyPermissiveFilePermissionObj", "message": "Overly permissive file permission\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_perm_rule-DangerousPermissions", "message": "Do not grant dangerous combinations of permissions.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_perm_rule-OverlyPermissiveFilePermissionInline", "message": "Overly permissive file permission\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_xxe_rule-XMLStreamRdr", "message": "XML External Entity (XXE) attacks can occur when an XML parser supports XML\nentities while processing XML received from an untrusted source.\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Scala"}, {"identifier": "scala_xxe_rule-SaxParserXXE", "message": "XML External Entity (XXE) attacks can occur when an XML parser supports XML\nentities while processing XML received from an untrusted source.\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Scala"}, {"identifier": "scala_xxe_rule-XMLRdr", "message": "XML External Entity (XXE) attacks can occur when an XML parser supports XML\nentities while processing XML received from an untrusted source.\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Scala"}, {"identifier": "scala_xxe_rule-XPathXXE", "message": "XML External Entity (XXE) attacks can occur when an XML parser supports XML\nentities while processing XML received from an untrusted source.\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Scala"}, {"identifier": "scala_xxe_rule-Trans", "message": "XML External Entity (XXE) attacks can occur when an XML parser supports XML\nentities while processing XML received from an untrusted source.\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Scala"}, {"identifier": "scala_xxe_rule-Document", "message": "XML External Entity (XXE) attacks can occur when an XML parser supports XML\nentities while processing XML received from an untrusted source.\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Scala"}, {"identifier": "scala_cookie_rule-RequestParamToHeader", "message": "This code directly writes an HTTP parameter to an HTTP header, which allows for a HTTP\nresponse splitting vulnerability. See http://en.wikipedia.org/wiki/HTTP_response_splitting for\nmore information.\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Scala"}, {"identifier": "scala_cookie_rule-TrustBoundaryViolation", "message": "A trust boundary can be thought of as line drawn through a program. On one side\nof the line, data is untrusted. On the other side of the line, data is assumed\nto be trustworthy. The purpose of validation logic is to allow data to safely\ncross the trust boundary - to move from untrusted to trusted. A trust boundary\nviolation occurs when a program blurs the line between what is trusted and what\nis untrusted. By combining trusted and untrusted data in the same data\nstructure, it becomes easier for programmers to mistakenly trust unvalidated\ndata.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_cookie_rule-RequestParamToCookie", "message": "This code constructs an HTTP Cookie using an untrusted HTTP parameter. If this cookie is added\nto an HTTP response, it will allow a HTTP response splitting vulnerability. See\nhttp://en.wikipedia.org/wiki/HTTP_response_splitting for more information.\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Scala"}, {"identifier": "scala_cookie_rule-CookiePersistent", "message": "\"Storing sensitive data in a persistent cookie for an extended period can lead to a breach of\nconfidentiality or account compromise.\"\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_cookie_rule-CookieUsage", "message": "The information stored in a custom cookie should not be sensitive or related to the session.\nIn most cases, sensitive data should only be stored in session and referenced by the user's\nsession cookie.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_cookie_rule-HttpResponseSplitting", "message": "When an HTTP request contains unexpected CR and LF characters, the server may respond with an\noutput stream that is interpreted as two different HTTP responses (instead of one). An attacker\ncan control the second response and mount attacks such as cross-site scripting and cache\npoisoning attacks.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_cookie_rule-CookieHTTPOnly", "message": "A new cookie is created without the HttpOnly flag set. The HttpOnly flag is a directive to the\nbrowser to make sure that the cookie can not be red by malicious script. When a user is the\ntarget of a \"Cross-Site Scripting\", the attacker would benefit greatly from getting the session\nid for example.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_cookie_rule-CookieInsecure", "message": "\"A new cookie is created without the Secure flag set. The Secure flag is a\n directive to the browser to make sure that the cookie is not sent for insecure communication\n(http://)\"\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_templateinjection_rule-TemplateInjection", "message": "A malicious user in control of a template can run malicious code on the\nserver-side. Velocity templates should be seen as scripts.\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Scala"}, {"identifier": "scala_file_rule-FilenameUtils", "message": "A file is opened to read its content. The filename comes from an input\nparameter. If an unfiltered parameter is passed to this file API, files from an\narbitrary filesystem location could be read.\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Scala"}, {"identifier": "scala_file_rule-FileUploadFileName", "message": "The filename provided by the FileUpload API can be tampered with by the client to reference\nunauthorized files. The provided filename should be properly validated to ensure it's properly\nstructured, contains no unauthorized path characters (e.g., / \\), and refers to an authorized\nfile.\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Scala"}, {"identifier": "scala_unsafe_rule-InformationExposureVariant2", "message": "The sensitive information may be valuable information on its own (such as a password), or it\nmay be useful for launching other, more deadly attacks. If an attack fails, an attacker may use\nerror information provided by the server to launch another more focused attack. For example, an\nattempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the\ninstalled application.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_unsafe_rule-ExternalConfigControl", "message": "Allowing external control of system settings can disrupt service or cause an application to\nbehave in unexpected, and potentially malicious ways. An attacker could cause an error by\nproviding a nonexistent catalog name or connect to an unauthorized portion of the database.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_unsafe_rule-InformationExposure", "message": "The sensitive information may be valuable information on its own (such as a password), or it\nmay be useful for launching other, more deadly attacks. If an attack fails, an attacker may use\nerror information provided by the server to launch another more focused attack. For example, an\nattempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the\ninstalled application.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_unsafe_rule-SensitiveDataExposure", "message": "Applications can unintentionally leak information about their configuration, internal\nworkings, or violate privacy through a variety of application problems. Pages that provide\ndifferent responses based on the validity of the data can lead to Information Leakage;\nspecifically when data deemed confidential is being revealed as a result of the web\napplication's design.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_xpathi_rule-XpathInjection", "message": "The input values included in SQL queries need to be passed in safely. Bind\nvariables in prepared statements can be used to easily mitigate the risk of\nSQL injection.\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Scala"}, {"identifier": "scala_ssrf_rule-SSRF", "message": "Server-Side Request Forgery occur when a web server executes a request to a user supplied\ndestination parameter that is not validated. Such vulnerabilities could allow an attacker to\naccess internal services or to launch attacks from your web server.\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Scala"}, {"identifier": "scala_ssrf_rule-PlaySSRF", "message": "Server-Side Request Forgery occur when a web server executes a request to a user supplied\ndestination parameter that is not validated. Such vulnerabilities could allow an attacker to\naccess internal services or to launch attacks from your web server.\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Scala"}, {"identifier": "scala_form_rule-FormValidate", "message": "Form inputs should have minimal input validation. Preventive validation helps provide defense\nin depth against a variety of risks.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_random_rule-PseudoRandom", "message": "The use of a predictable random value can lead to vulnerabilities when used in certain security\ncritical contexts. A quick fix could be to replace the use of scala.util.Random with something\nstronger, such as java.security.SecureRandom\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_script_rule-ScriptInjection", "message": "The software constructs all or part of a code segment using externally-influenced\ninput from an upstream component, but it does not neutralize or incorrectly\nneutralizes special elements that could modify the syntax or behavior of the\nintended code segment.\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Scala"}, {"identifier": "scala_script_rule-SpelView", "message": "The software constructs all or part of a code segment using externally-influenced\ninput from an upstream component, but it does not neutralize or incorrectly\nneutralizes special elements that could modify the syntax or behavior of the\nintended code segment.\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Scala"}, {"identifier": "scala_strings_rule-FormatStringManipulation", "message": "Allowing user input to control format parameters could enable an attacker to cause exceptions\nto be thrown or leak information.Attackers may be able  to modify the format string argument,\nsuch that an exception is thrown. If this exception is left uncaught, it may crash the\napplication. Alternatively, if sensitive information is used within the unused arguments,\nattackers may change the format string to reveal this information.\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Scala"}, {"identifier": "scala_strings_rule-ModifyAfterValidation", "message": "CERT: IDS11-J. Perform any string modifications before validation\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_strings_rule-ImproperUnicode", "message": "Improper Handling of Unicode Encoding\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Scala"}, {"identifier": "scala_strings_rule-NormalizeAfterValidation", "message": "IDS01-J. Normalize strings before validating them\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_strings_rule-BadHexConversion", "message": "When converting a byte array containing a hash signature to a human readable string, a\nconversion mistake can be made if the array is read byte by byte.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_ldap_rule-EntryPoisoning", "message": "Without proper access control, executing an LDAP statement that contains a\nuser-controlled value can allow an attacker to abuse poorly configured LDAP\ncontext\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Scala"}, {"identifier": "scala_ldap_rule-AnonymousLDAP", "message": "Without proper access control, executing an LDAP statement that contains a\nuser-controlled value can allow an attacker to abuse poorly configured LDAP\ncontext\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_xss_rule-WicketXSS", "message": "Disabling HTML escaping put the application at risk for Cross-Site Scripting (XSS).\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_xss_rule-RequestWrapper", "message": "Avoid using custom XSS filtering. Please use standard sanitization functions.\n", "parent_source": "gitlab", "severity": "`INFO`", "languages": "Scala"}, {"identifier": "scala_xss_rule-XSSReqParamToServletWriter", "message": "Servlet reflected cross site scripting vulnerability\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_xss_rule-XSSServlet", "message": "A potential XSS was found. It could be used to execute unwanted JavaScript in a\nclient's browser.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_xss_rule-XSSServletParameter", "message": "The Servlet can read GET and POST parameters from various methods. The value obtained should be\nconsidered unsafe. You may need to validate or sanitize those values before passing them to\nsensitive APIs\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_xss_rule-MVCApi", "message": "Disabling HTML escaping put the application at risk for Cross-Site Scripting (XSS).\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_endpoint_rule-UnencryptedSocket", "message": "Beyond using an SSL socket, you need to make sure your use of SSLSocketFactory\ndoes all the appropriate certificate validation checks to make sure you are not\nsubject to man-in-the-middle attacks. Please read the OWASP Transport Layer\nProtection Cheat Sheet for details on how to do this correctly.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_endpoint_rule-InsecureServlet", "message": "The Servlet can read GET and POST parameters from various methods. The\nvalue obtained should be considered unsafe.\"\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_endpoint_rule-UnvalidatedRedirect", "message": "Unvalidated redirects occur when an application redirects a user to a\ndestination URL specified by a user supplied parameter that is not validated.\nSuch vulnerabilities can be used to facilitate phishing attacks.\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Scala"}, {"identifier": "scala_endpoint_rule-JaxWsEndpoint", "message": "This method is part of a SOAP Web Service (JSR224). The security of this web service should be\nanalyzed. For example:\n- Authentication, if enforced, should be tested.\n- Access control, if enforced, should be tested.\n- The inputs should be tracked for potential vulnerabilities.\n- The communication should ideally be over SSL.\n", "parent_source": "gitlab", "severity": "`INFO`", "languages": "Scala"}, {"identifier": "scala_endpoint_rule-WeakHostNameVerification", "message": "A HostnameVerifier that accept any host are often use because of certificate\nreuse on many hosts. As a consequence, this is vulnerable to Man-in-the-middle\nattacks since the client will trust any certificate.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_endpoint_rule-JaxRsEndpoint", "message": "This method is part of a REST Web Service (JSR311). The security of this web service should be\nanalyzed. For example:\n- Authentication, if enforced, should be tested.\n- Access control, if enforced, should be tested.\n- The inputs should be tracked for potential vulnerabilities.\n- The communication should ideally be over SSL.\n- If the service supports writes (e.g., via POST), its vulnerability to CSRF should be\ninvestigated.\n", "parent_source": "gitlab", "severity": "`INFO`", "languages": "Scala"}, {"identifier": "scala_crypto_rule-CipherIntegrity", "message": "The ciphertext produced is susceptible to alteration by an adversary. This mean that the\ncipher provides no way to detect that the data has been tampered with. If the ciphertext can be\ncontrolled by an attacker, it could be altered without detection.\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Scala"}, {"identifier": "scala_crypto_rule-RsaNoPadding", "message": "The software uses the RSA algorithm but does not incorporate Optimal Asymmetric\nEncryption Padding (OAEP), which might weaken the encryption.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_crypto_rule-InsufficientKeySizeRsa", "message": "Detected an insufficient key size for DSA. NIST recommends a key size\nof 2048 or higher.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_crypto_rule-WeakMessageDigest", "message": "DES is considered strong ciphers for modern applications. Currently, NIST recommends the usage\nof AES block ciphers instead of DES.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_crypto_rule-CipherPaddingOracle", "message": "This specific mode of CBC with PKCS5Padding is susceptible to padding oracle attacks. An\nadversary could potentially decrypt the message if the system exposed the difference between\nplaintext with invalid padding or valid padding. The distinction between valid and invalid\npadding is usually revealed through distinct error messages being returned for each condition.\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Scala"}, {"identifier": "scala_crypto_rule-CipherDESInsecure", "message": "DES is considered strong ciphers for modern applications. Currently, NIST recommends the usage\nof AES block ciphers instead of DES.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_crypto_rule-HazelcastSymmetricEncryption", "message": "The network communications for Hazelcast is configured to use a symmetric cipher (probably DES\nor Blowfish). Those ciphers alone do not provide integrity or secure authentication. The use of\nasymmetric encryption is preferred.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_crypto_rule-CustomMessageDigest", "message": "Implementing a custom MessageDigest is error-prone. National Institute of Standards and\nTechnology(NIST) recommends the use of SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, or\nSHA-512/256.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_crypto_rule-CipherDESedeInsecure", "message": "Triple DES (also known as 3DES or DESede) is considered strong ciphers for modern\napplications. NIST recommends the usage of AES block ciphers instead of 3DES.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_crypto_rule-BlowfishKeySize", "message": "A small key size makes the ciphertext vulnerable to brute force attacks. At least 128 bits of\nentropy should be used when generating the key if use of Blowfish is required.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_crypto_rule-NullCipher", "message": "The NullCipher implements the Cipher interface by returning ciphertext identical to the\nsupplied plaintext. In a few contexts, such as testing, a NullCipher may be appropriate. Avoid\nusing the NullCipher. Its accidental use can introduce a significant confidentiality risk.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_crypto_rule-DefaultHTTPClient", "message": "DefaultHttpClient with default constructor is not compatible with TLS 1.2\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_crypto_rule-CipherECBMode", "message": "An authentication cipher mode which provides better confidentiality of the encrypted data\nshould be used instead of Electronic Code Book (ECB) mode, which does not provide good\nconfidentiality. Specifically, ECB mode produces the same output for the same input each time.\nThis allows an attacker to intercept and replay the data.\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Scala"}, {"identifier": "scala_crypto_rule-WeakTLSProtocol", "message": "A HostnameVerifier that accept any host are often use because of certificate\nreuse on many hosts. As a consequence, this is vulnerable to Man-in-the-middleattacks\nattacks since the client will trust any certificate.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Scala"}, {"identifier": "scala_cors_rule-PermissiveCORS", "message": "Prior to HTML5, Web browsers enforced the Same Origin Policy which ensures that in order for\nJavaScript to access the contents of a Web page, both the JavaScript and the Web page must\noriginate from the same domain. Without the Same Origin Policy, a malicious website could serve\nup JavaScript that loads sensitive information from other websites using a client's\ncredentials, cull through it, and communicate it back to the attacker. HTML5 makes it possible\nfor JavaScript to access data across domains if a new HTTP header called\nAccess-Control-Allow-Origin is defined. With this header, a Web server defines which other\ndomains are allowed to access its domain using cross-origin requests. However, caution should\nbe taken when defining the header because an overly permissive CORS policy will allow a\nmalicious application to communicate with the victim application in an inappropriate way,\nleading to spoofing, data theft, relay and other attacks.\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Scala"}, {"identifier": "scala_cors_rule-PermissiveCORSInjection", "message": "Prior to HTML5, Web browsers enforced the Same Origin Policy which ensures that in order for\nJavaScript to access the contents of a Web page, both the JavaScript and the Web page must\noriginate from the same domain. Without the Same Origin Policy, a malicious website could serve\nup JavaScript that loads sensitive information from other websites using a client's\ncredentials, cull through it, and communicate it back to the attacker. HTML5 makes it possible\nfor JavaScript to access data across domains if a new HTTP header called\nAccess-Control-Allow-Origin is defined. With this header, a Web server defines which other\ndomains are allowed to access its domain using cross-origin requests. However, caution should\nbe taken when defining the header because an overly permissive CORS policy will allow a\nmalicious application to communicate with the victim application in an inappropriate way,\nleading to spoofing, data theft, relay and other attacks.\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "go_memory_rule-integer-overflow", "message": "Golang's `int` type size depends on the architecture of where the application is running. For\n32-bit systems, `int` is\n32-bit, for 64-bit systems, `int` will be 64-bit. By calling `strconv.Atoi` with a large\nnumber, the integer may overflow\nif the `int` return value is type converted into a smaller type (`int32` or `int16`). This\ncould cause unexpected application\nbehavior depending on how the resultant value is used.\n\nPrior to running any type conversion, check that the value returned from `strconv.Atoi` will\nfit in the resulting integer.\n\nExample of checking the return value before type conversion:\n```\nbigValue, _ := strconv.Atoi(\"32768\")\nif bigValue > math.MaxInt16 {\n  log.Fatal(\"value too large to fit in int16\")\n}\nvalue := int16(bigValue)\nfmt.Println(value)\n```\n\nFor more information on integer min/max constants see: https://pkg.go.dev/math#pkg-constants\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "go_memory_rule-memoryaliasing", "message": "Go's `for ... range` statements create an iteration variable for each iteration of the loop.\nBy taking the address of this iteration variable, the value of the address will be re-used\nand always point to the same location in memory. This can have unexpected behavior if the\naddress is stored or re-used.\n\nThis can be fixed by:\n- Not referencing the address of the variable\n- Re-assigning the iteration variable to a new variable\n- Using the address of the indexed variable\n\nExample not referencing the address:\n```\ntype someStruct struct {\n  x int\n}\n\nfor _, n := range []someStruct{{1}, {2}, {3}, {4}} {\n  fmt.Printf(\"%d\\n\", n.x)\n}\n```\n\nExample reassigning the iteration variable to a new variable:\n```\ntype someStruct struct {\n  x int\n}\n\nfor _, n := range []someStruct{{1}, {2}, {3}, {4}} {\n  p := n\n  fmt.Printf(\"%p\\n\", &p)\n}\n```\n\nExample using the address of the indexed variable:\n```\ntype someStruct struct {\n  x int\n}\n\nstructData := []someStruct{{1}, {2}, {3}, {4}}\nfor idx := range structData {\n  fmt.Printf(\"%p\\n\", &structData[idx])\n}\n```\n\nFor more information on how the `for ... range` statement works see:\nhttps://go.dev/ref/spec#For_statements\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "go_memory_rule-math-big-rat", "message": "Potential Integer overflow made by strconv.Atoi result conversion to int16/32\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "go_subproc_rule-subproc", "message": "OS command injection is a critical vulnerability that can lead to a full system\ncompromise as it may allow an adversary to pass in arbitrary commands or arguments\nto be executed.\n\nUser input should never be used in constructing commands or command arguments\nto functions which execute OS commands. This includes filenames supplied by\nuser uploads or downloads.\n\nEnsure your application does not:\n\n- Use user-supplied information in the process name to execute.\n- Use user-supplied information in an OS command execution function which does\nnot escape shell meta-characters.\n- Use user-supplied information in arguments to OS commands.\n\nThe application should have a hardcoded set of arguments that are to be passed\nto OS commands. If filenames are being passed to these functions, it is\nrecommended that a hash of the filename be used instead, or some other unique\nidentifier. It is strongly recommended that a native library that implements\nthe same functionality be used instead of using OS system commands, due to the\nrisk of unknown attacks against third party commands.\n\nIf operating in Windows environments, when specifying the OS command, ensure\nthe application uses the full path\ninformation, otherwise the OS may attempt to look up which process to execute\nand could be vulnerable to untrusted search path vulnerabilities (CWE-426).\n\nExample of safely executing an OS command:\n```\nuserData := []byte(\"user data\")\n// create a temporary file in the application specific directory\nf, err := ioutil.TempFile(\"/var/app/restricted\", \"temp-*.dat\")\nif err != nil {\n  log.Fatal(err)\n}\n\nif _, err := f.Write(userData); err != nil {\n  log.Fatal(err)\n}\n\nif err := f.Close(); err != nil {\n  log.Fatal(err)\n}\n\n// pass the full path to the binary and the name of the temporary file\n// instead of any user supplied filename\nout, err := exec.Command(\"/bin/cat\", f.Name()).Output()\nif err != nil {\n  log.Fatal(err)\n}\n```\n\nFor more information on OS command injection, see OWASP's guide:\nhttps://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "go_file-permissions_rule-mkdir", "message": "The application was found setting directory permissions to overly permissive values. Consider\nusing the following values if the application user is the only process to access\nfiles in the directory specified:\n- 0700 - read/write access to the files in the directory\n\nAnother common value is `0750` which allows the application user read/write access and group\nusers to read the files contained in the directory.\n\nExample creating a directory with read/write permissions for only the application user:\n```\nerr := os.Mkdir(\"directory\", 0700)\nif err != nil {\n  log.Fatal(err)\n}\n```\n\nFor all other values please see:\nhttps://en.wikipedia.org/wiki/File-system_permissions#Numeric_notation\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "go_file-permissions_rule-fileperm", "message": "The application was found setting file permissions to overly permissive values. Consider\nusing the following values if the application user is the only process to access\nthe file:\n\n- 0400 - read only access to the file\n- 0200 - write only access to the file\n- 0600 - read/write access to the file\n\nExample creating a file with read/write permissions for the application user:\n```\nf, err := os.OpenFile(\"file.txt\", os.O_CREATE, 0600)\nif err != nil {\n  log.Fatal(err)\n}\ndefer f.Close()\n// continue to work with file here\n```\n\nFor all other values please see:\nhttps://en.wikipedia.org/wiki/File-system_permissions#Numeric_notation\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "go_leak_rule-pprof-endpoint", "message": "Go has a built in profiling service that is enabled by starting an HTTP server with\n`net/http/pprof` imported. The `/debug/pprof` endpoint does not require any\nauthentication and can be accessed by anonymous users. This profiling endpoint\ncan leak sensitive information and should not be enabled in production.\n\nTo remediate this, remove the `net/http/pprof` import from the file.\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "go_unsafe_rule-unsafe", "message": "The `unsafe` package in Go allows low-level access to memory management features.\nThis includes pointers and direct access to memory. The Go compiler will no longer\nbe able to enforce type safety when working with the `unsafe` pointer types.\n\nWhile powerful, access to these functions can lead to many security related issues\n such as:\n\n- [Buffer overflows](https://owasp.org/www-community/vulnerabilities/Buffer_Overflow) which\ncan lead to code execution.\ncan lead to code execution\n- [Use after free](https://owasp.org/www-community/vulnerabilities/Using_freed_memory) which\ncan lead to code execution.\ncan lead to code execution\n- [Information/Memory leaks](https://owasp.org/www-community/vulnerabilities/Memory_leak)\nwhich can leak sensitive information, including data which can\ndefeat other protection mechanisms or cause the system to run out of memory.\n\nUnless required, all calls to the `unsafe` package should be removed.\n", "parent_source": "gitlab", "severity": "`INFO`", "languages": "Go"}, {"identifier": "go_filesystem_rule-ziparchive", "message": "The application may be vulnerable to a path traversal if it extracts untrusted archive files.\nThis vulnerability is colloquially known as 'Zip Slip'. Archive files may contain folders\nwhich,\nwhen extracted, may write outside of the intended directory. This is exploited by including\npath traversal characters such as `../../other/directory` to overwrite or place files in system\nor application directories.\n\nExtra care must be taken when extracting archive files as there are numerous concerns:\n\n- Limit the size of the zip archive as it may contain \"Zip Bombs\", files that extract to\nextremely\nlarge sizes.\n- If possible, generate unique filenames instead of using the archives file names, as it may be\npossible for users to overwrite files if the filenames are the same.\n- Validate file paths are written with a prefixed, known trusted directory.\n- Only process regular files and not symbolic links, as some applications may attempt to\nread/follow\nthe symbolic link, leading to arbitrary file read / write vulnerabilities.\n\n\nExample of securely processing an archive file:\n```\nr, err := zip.OpenReader(\"trusted.zip\")\nif err != nil {\n  log.Fatal(err)\n}\n\n// Ensure archive contains only the expected number of files\nconst expectedFileCount = 10\nif len(r.File) > expectedFileCount {\n  log.Fatalf(\"too many files in archive: %d\\n\", len(r.File))\n}\n\n// One approach is to sum up all files before attempting to process\n// them.\nconst totalAllowedSize = 1024 * 1024 * 10 // 10MB\nvar totalSize uint64\nfor _, f := range r.File {\n  totalSize += f.UncompressedSize64\n}\n\nif totalSize > totalAllowedSize {\n  log.Fatalf(\"archive exceeds total allowed size: %d\\n\", totalSize)\n}\n\n// configure a max size per file allowed\nconst maxFileSize = 1024 * 1024 // 1 MB\n\n// set restricted basePath\nconst basePath = \"/var/restricted/\"\n\n// iterate over the files in the archive\nfor _, f := range r.File {\n\n  // Ensure uncompressed size does not exceed our allowed file size\n  if f.UncompressedSize64 > maxFileSize {\n    log.Printf(\"skipping file as it exceeds maxFileSize: %s\\n\", f.Name)\n    continue\n  }\n\n  // Ensure file is a regular file and not a symbolic link or has other mode type\n  // bits set\n  if !f.Mode().IsRegular() {\n    log.Printf(\"skipping non regular file: %s\\n\", f.Name)\n    continue\n  }\n\n  // if possible consider not using the name at all, but generating a random id instead.\n  // If the filename must be used, extract the base name and not folder path information\n  name := filepath.Base(f.Name)\n\n  // Join the file name to the basePath.\n  resolvedPath, err := filepath.Join(basePath, name)\n  if err != nil {\n    log.Fatal(err)\n  }\n\n  // Application must still verify the path is prefixed by the basePath\n  if !strings.HasPrefix(resolvedPath, basePath) {\n    log.Fatal(\"path does not start with basePath\")\n  }\n\n  // process / work with file\n}\n```\n\nIf the application must process directory names as well, use the following code:\n```\n// Join the cleaned name to the basePath, note if 'name' starts with `../../` it\n// will still allow for traversal, so you _must_ verify the path prefix below\nresolvedPath := filepath.Join(basePath, filepath.Clean(name))\n\n// Application must still verify the path is prefixed by the basePath\nif !strings.HasPrefix(resolvedPath, basePath) {\n  log.Fatal(\"path does not start with basePath\")\n}\n\n// process / work with file\n```\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "go_filesystem_rule-decompression-bomb", "message": "Directly decompressing files or buffers may lead to a potential Denial of Service (DoS)\ndue to a decompression bomb. Decompression bombs are maliciously compressed files\nor data that decompresses to extremely large sizes. This can cause the process to run\nout of memory, or the disk to fill up.\n\nTo protect against decompression bombs, an\n[io.LimitReader(...)](https://pkg.go.dev/io#LimitReader)\nshould be used to limit how much can be read during the decompression routine.\n\nExample using `io.LimitReader` to protect against a decompression bomb:\n```\nf, err := os.Open(\"some.gz\")\nif err != nil {\n  log.Fatal(err)\n}\n\nr, err := gzip.NewReader(f)\nif err != nil {\n  log.Fatal(err)\n}\n\nconst oneMegabyte = 1024 * 1024\nlimitedReader := io.LimitReader(r, oneMegabyte)\n\n// use limitedReader to stop copying after 1 MB\nif _, err := io.Copy(os.Stdout, limitedReader); err != nil {\n  log.Fatal(err)\n}\n```\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "go_filesystem_rule-filereadtaint", "message": "The application dynamically constructs file or path information. If the path\ninformation comes from user input, it could be abused to read sensitive files,\naccess other users data or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or replacing it with unique values.\nAdditionally, use `filepath.Base` to only use the filename and not path information.\nAlways validate the full path prior to opening or writing to any file.\n\nExample using `filepath.Base`, generating a unique filename without using\nuser input to construct filepath information:\n```\ntype userData struct {\n    id           string\n    userFilename string\n}\n\nfunc newUserData(userFilename string) userData {\n    return userData{\n        id:           randomFileID(), // random id as the filename\n        userFilename: userFilename,\n    }\n}\n\n// randomFileID generates a random id, to be used as a filename\nfunc randomFileID() string {\n    id := make([]byte, 16)\n    if _, err := io.ReadFull(rand.Reader, id); err != nil {\n        log.Fatal(err)\n    }\n    return hex.EncodeToString(id)\n}\n\nfunc main() {\n\n    // user input, saved only as a reference\n    data := newUserData(\"../../possibly/malicious\")\n\n    // restrict all file access to this path\n    const basePath = \"/tmp/\"\n\n    // resolve the full path, but only use our random generated id\n    resolvedPath, err := filepath.Join(basePath, filepath.Base(data.id))\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // verify the path is prefixed with our basePath\n    if !strings.HasPrefix(resolvedPath, basePath) {\n        log.Fatal(\"path does not start with basePath\")\n    }\n    // process / work with file\n}\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "go_filesystem_rule-dirtraversal", "message": "The application is potentially exposing the entire filesystem by mounting the root\ndirectory `/` to an HTTP handler function. Anyone who is able to access this HTTP\nserver may be able to access any file that the HTTP server has access to.\n\nRestrict the `http.Dir` path to only a specific folder instead of the entire\nfilesystem.\n\nExample server only allowing directory listing on a public directory:\n```\nconst path = \"/var/www/html/public\"\nfs := http.FileServer(http.Dir(path))\nlog.Fatal(http.ListenAndServe(\":9000\", fs))\n```\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "go_filesystem_rule-tempfiles", "message": "The application was found creating files in shared system temporary directories\n(`/tmp` or `/var/tmp`) without using the `os.CreateTemp` function. Depending\non how the application uses this temporary file, an attacker may be able to create\nsymlinks that point to other files prior to the application creating or writing\nto the target file, leading to unintended files being created or overwritten.\n\nExample using `os.CreateTemp` in an application restricted directory:\n```\n// assumes /opt/appdir/ is chown'd to the running application user\nif err := os.MkdirAll(\"/opt/appdir/restricted\", 0700); err != nil {\n  log.Fatal(err)\n}\n\n// create a temporary file in the restricted directory in the form of temp-952569059.txt\nf, err := os.CreateTemp(\"/opt/appdir/restricted\", \"temp-*.txt\")\nif err != nil {\n  log.Fatal(err)\n}\n\ndefer f.Close()\n// clean up on exit\ndefer os.Remove(f.Name())\n// work with file\n```\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "go_filesystem_rule-poorwritepermissions", "message": "The application was found setting file permissions to overly permissive values. Consider\nusing the following values if the application user is the only process to access\nthe file:\n\n- 0400 - read only access to the file\n- 0200 - write only access to the file\n- 0600 - read/write access to the file\n\nExample writing file contents with read/write permissions for the application user:\n```\ndat := []byte(\"sensitive data\")\nif err := os.WriteFile(\"file.txt\", dat, 0600); err != nil {\n  log.Fatal(err)\n}\n```\n\nFor all other values please see:\nhttps://en.wikipedia.org/wiki/File-system_permissions#Numeric_notation\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "go_blocklist_rule-blocklist-des", "message": "The DES algorithm has not been recommended for over 15 years and was withdrawn from NIST (FIPS\n46-3) in 2005. It is recommended that an algorithm that provides message integrity be used\ninstead. Consider using `XChaCha20Poly1305` or `AES-256-GCM`.\n\nFor older applications, `AES-256-GCM` is recommended, however it has many drawbacks:\n- Slower than `XChaCha20Poly1305`\n- Smaller nonce value size compared to `XChaCha20Poly1305`\n- Catastrophic failure if nonce values are re-used\n\nExample using\n[XChaCha20Poly1305](https://pkg.go.dev/golang.org/x/crypto/chacha20poly1305#NewX):\n```\nkey := make([]byte, chacha20poly1305.KeySize)\nif _, err := io.ReadFull(rand.Reader, key); err != nil {\n  log.Fatal(err)\n}\n\n// NewX is a variant that uses longer nonce values for better security\naead, err := chacha20poly1305.NewX(key)\nif err != nil {\n  log.Fatal(err)\n}\n\nvar encrypted = []byte{}\nvar nonce = []byte{}\n\n// Encryption routine\n{\n  msg := []byte(\"Some secret message\")\n  nonce = make([]byte, aead.NonceSize())\n  if _, err := io.ReadFull(rand.Reader, nonce); err != nil {\n    log.Fatal(\"failed to generate nonce\")\n  }\n\n  encrypted = aead.Seal(nil, nonce, msg, nil)\n}\n\n// Decryption routine\n{\n  if len(encrypted) < aead.NonceSize() {\n    log.Fatal(\"incorrect ciphertext length\")\n  }\n\n  msg, err := aead.Open(nil, nonce, encrypted, nil)\n  if err != nil {\n    log.Fatal(err)\n  }\n  fmt.Printf(\"Decrypted: %s\\n\", msg)\n}\n```\n\nExample using [AES-256-GCM](https://pkg.go.dev/crypto/cipher#NewGCM):\n```\n// 32 byte keys will configure AES-256\nkey := make([]byte, 32)\nif _, err := io.ReadFull(rand.Reader, key); err != nil {\n  log.Fatal(err)\n}\n\nblockCipher, err := aes.NewCipher(key)\nif err != nil {\n  log.Fatal(err)\n}\n\naead, err := cipher.NewGCM(blockCipher)\nif err != nil {\n  log.Fatal(err)\n}\n\nvar encrypted = []byte{}\nvar nonce = []byte{}\n// Encryption routine\n{\n  msg := []byte(\"Some secret message\")\n  // note that the key must be rotated every 2^32 random nonces used otherwise\n  // cipher text could be repeated\n  nonce = make([]byte, 12)\n  if _, err := io.ReadFull(rand.Reader, nonce); err != nil {\n    log.Fatal(err)\n  }\n  encrypted = aead.Seal(nil, nonce, msg, nil)\n}\n\n// Decryption routine\n{\n  msg, err := aead.Open(nil, nonce, encrypted, nil)\n  if err != nil {\n    log.Fatal(err)\n  }\n  fmt.Printf(\"Decrypted: %s\\n\", msg)\n}\n```\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "go_blocklist_rule-blocklist-rc4", "message": "The RC4 stream-cipher has been cryptographically broken and is unsuitable\nfor use in production. It is recommended that ChaCha20 or Advanced Encryption\nStandard (AES) be used instead. Consider using `XChaCha20Poly1305` or `AES-256-GCM`.\n\nFor older applications, `AES-256-GCM` is recommended, however it has many drawbacks:\n- Slower than `XChaCha20Poly1305`\n- Smaller nonce value size compared to `XChaCha20Poly1305`\n- Catastrophic failure if nonce values are re-used\n\nExample using\n[XChaCha20Poly1305](https://pkg.go.dev/golang.org/x/crypto/chacha20poly1305#NewX):\n```\nkey := make([]byte, chacha20poly1305.KeySize)\nif _, err := io.ReadFull(rand.Reader, key); err != nil {\n  log.Fatal(err)\n}\n\n// NewX is a variant that uses longer nonce values for better security\naead, err := chacha20poly1305.NewX(key)\nif err != nil {\n  log.Fatal(err)\n}\n\nvar encrypted = []byte{}\nvar nonce = []byte{}\n\n// Encryption routine\n{\n  msg := []byte(\"Some secret message\")\n  nonce = make([]byte, aead.NonceSize())\n  if _, err := io.ReadFull(rand.Reader, nonce); err != nil {\n    log.Fatal(\"failed to generate nonce\")\n  }\n\n  encrypted = aead.Seal(nil, nonce, msg, nil)\n}\n\n// Decryption routine\n{\n  if len(encrypted) < aead.NonceSize() {\n    log.Fatal(\"incorrect ciphertext length\")\n  }\n\n  msg, err := aead.Open(nil, nonce, encrypted, nil)\n  if err != nil {\n    log.Fatal(err)\n  }\n  fmt.Printf(\"Decrypted: %s\\n\", msg)\n}\n```\n\nExample using [AES-256-GCM](https://pkg.go.dev/crypto/cipher#NewGCM):\n```\n// 32 byte keys will configure AES-256\nkey := make([]byte, 32)\nif _, err := io.ReadFull(rand.Reader, key); err != nil {\n  log.Fatal(err)\n}\n\nblockCipher, err := aes.NewCipher(key)\nif err != nil {\n  log.Fatal(err)\n}\n\naead, err := cipher.NewGCM(blockCipher)\nif err != nil {\n  log.Fatal(err)\n}\n\nvar encrypted = []byte{}\nvar nonce = []byte{}\n// Encryption routine\n{\n  msg := []byte(\"Some secret message\")\n  // note that the key must be rotated every 2^32 random nonces used otherwise\n  // cipher text could be repeated\n  nonce = make([]byte, 12)\n  if _, err := io.ReadFull(rand.Reader, nonce); err != nil {\n    log.Fatal(err)\n  }\n  encrypted = aead.Seal(nil, nonce, msg, nil)\n}\n\n// Decryption routine\n{\n  msg, err := aead.Open(nil, nonce, encrypted, nil)\n  if err != nil {\n    log.Fatal(err)\n  }\n  fmt.Printf(\"Decrypted: %s\\n\", msg)\n}\n```\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "go_blocklist_rule-blocklist-sha1", "message": "The SHA-1 message-digest algorithm has been cryptographically broken and\nis unsuitable for further use. It is\nrecommended that the SHA-3, or BLAKE2 family of algorithms be used for non-password based\ncryptographic hashes instead. For password based cryptographic hashes, consider using the\nbcrypt or Argon2id family of cryptographic hashes.\n\nHashing values using [BLAKE2](https://pkg.go.dev/golang.org/x/crypto/blake2b):\n```\nfileContents := []byte(\"some file contents to create hash for\")\nblake2bHasher, err := blake2b.New512(nil)\nif err != nil {\n  log.Fatal(err)\n}\nhashedValue := blake2bHasher.Sum(fileContents)\nfmt.Printf(\"%s\\n\", hex.EncodeToString(hashedValue))\n```\n\nHashing and securely comparing passwords using\n[Argon2id](https://pkg.go.dev/golang.org/x/crypto/argon2#hdr-Argon2id):\n```\ntype argonParameters struct {\n  variant     string\n  version     int\n  memory      uint32\n  iterations  uint32\n  parallelism uint8\n  saltLength  uint32\n  keyLength   uint32\n}\n\nfunc (a argonParameters) StringFormat(salt, derivedKey []byte) string {\n  encodedSalt := base64.RawStdEncoding.EncodeToString(salt)\n  encodedKey := base64.RawStdEncoding.EncodeToString(derivedKey)\n\n  return fmt.Sprintf(\"$argon2id$v=%d$m=%d,t=%d,p=%d$%s$%s\",\n    argon2.Version,\n    a.memory,\n    a.iterations,\n    a.parallelism,\n    encodedSalt,\n    encodedKey,\n  )\n}\n\nfunc main() {\n  // Initialize Argon2id parameters\n  p := argonParameters{\n    memory:      64 * 1024,\n    iterations:  3,\n    parallelism: 2,\n    saltLength:  16,\n    keyLength:   32,\n  }\n\n  // Generate random salt (to be stored alongside derived hash key)\n  salt := make([]byte, p.saltLength)\n  if _, err := io.ReadFull(rand.Reader, salt); err != nil {\n    log.Fatal(err)\n  }\n\n  usersPassword := []byte(\"User's Very S3cur3P4ss@rd@#$%\")\n\n  var derivedKey []byte\n  // Create key hash derived from user's password\n  {\n    derivedKey = argon2.IDKey(usersPassword, salt, p.iterations, p.memory, p.parallelism,\np.keyLength)\n    // store p.StringFormat(...) result in a data store...\n    fmt.Printf(\"%s\\n\", p.StringFormat(salt, derivedKey))\n  }\n\n  // Verify a user's password against key\n  {\n    keyToCompare := argon2.IDKey(usersPassword, salt, p.iterations, p.memory, p.parallelism,\np.keyLength)\n\n    // Use subtle.ConstantTimeCompare(..., ...) to ensure no side channel leaks used in timing\nattacks\n    if subtle.ConstantTimeCompare(derivedKey, keyToCompare) == 1 {\n      fmt.Printf(\"Passwords match\\n\")\n    } else {\n      fmt.Printf(\"Passwords do not match\\n\")\n    }\n  }\n}\n```\n\nFor more information on password storage see OWASP's guide:\nhttps://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "go_blocklist_rule-blocklist-md5", "message": "The MD5 message-digest algorithm has been cryptographically broken and is unsuitable for\nfurther use. The MD5 hash algorithm has been found to be vulnerable to producing collisions.\nThis means that two different values, when hashed, can lead to the same hash value. It is\nrecommended that the SHA-3 or BLAKE2 family of algorithms be used for non-password based\ncryptographic hashes instead. For password based cryptographic hashes,  consider using the\nbcrypt or Argon2id family of cryptographic hashes.\n\nHashing values using [BLAKE2](https://pkg.go.dev/golang.org/x/crypto/blake2b):\n```\nfileContents := []byte(\"some file contents to create hash for\")\nblake2bHasher, err := blake2b.New512(nil)\nif err != nil {\n  log.Fatal(err)\n}\nhashedValue := blake2bHasher.Sum(fileContents)\nfmt.Printf(\"%s\\n\", hex.EncodeToString(hashedValue))\n```\n\nHashing and securely comparing passwords using\n[Argon2id](https://pkg.go.dev/golang.org/x/crypto/argon2#hdr-Argon2id):\n```\ntype argonParameters struct {\n  variant     string\n  version     int\n  memory      uint32\n  iterations  uint32\n  parallelism uint8\n  saltLength  uint32\n  keyLength   uint32\n}\n\nfunc (a argonParameters) StringFormat(salt, derivedKey []byte) string {\n  encodedSalt := base64.RawStdEncoding.EncodeToString(salt)\n  encodedKey := base64.RawStdEncoding.EncodeToString(derivedKey)\n\n  return fmt.Sprintf(\"$argon2id$v=%d$m=%d,t=%d,p=%d$%s$%s\",\n    argon2.Version,\n    a.memory,\n    a.iterations,\n    a.parallelism,\n    encodedSalt,\n    encodedKey,\n  )\n}\n\nfunc main() {\n  // Initialize Argon2id parameters\n  p := argonParameters{\n    memory:      64 * 1024,\n    iterations:  3,\n    parallelism: 2,\n    saltLength:  16,\n    keyLength:   32,\n  }\n\n  // Generate random salt (to be stored alongside derived hash key)\n  salt := make([]byte, p.saltLength)\n  if _, err := io.ReadFull(rand.Reader, salt); err != nil {\n    log.Fatal(err)\n  }\n\n  usersPassword := []byte(\"User's Very S3cur3P4ss@rd@#$%\")\n\n  var derivedKey []byte\n  // Create key hash derived from user's password\n  {\n    derivedKey = argon2.IDKey(usersPassword, salt, p.iterations, p.memory, p.parallelism,\np.keyLength)\n    // store p.StringFormat(...) result in a data store...\n    fmt.Printf(\"%s\\n\", p.StringFormat(salt, derivedKey))\n  }\n\n  // Verify a user's password against key\n  {\n    keyToCompare := argon2.IDKey(usersPassword, salt, p.iterations, p.memory, p.parallelism,\np.keyLength)\n\n    // Use subtle.ConstantTimeCompare(..., ...) to ensure no side channel leaks used in timing\nattacks\n    if subtle.ConstantTimeCompare(derivedKey, keyToCompare) == 1 {\n      fmt.Printf(\"Passwords match\\n\")\n    } else {\n      fmt.Printf(\"Passwords do not match\\n\")\n    }\n  }\n}\n```\n\nFor more information on password storage see OWASP's guide:\nhttps://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "go_network_rule-bind-to-all-interfaces", "message": "Binding to all network interfaces can potentially open up a service to\ntraffic on unintended interfaces, that may not be properly documented or\nsecured. By passing \"0.0.0.0\" as the address to the `Listen` family of functions,\nthe application will bind to all interfaces.\n\nConsider passing in the interface ip address through an environment variable,\nconfiguration file, or by determining the primary interface(s) IP address.\n\nExample getting the IP address from an environment variable `IP_ADDRESS`:\n```\naddr := os.Getenv(\"IP_ADDRESS\")\nlistener, err := net.Listen(\"tcp\", addr)\nif err != nil {\n  log.Fatal(err)\n}\n```\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "go_sql_rule-concat-sqli", "message": "SQL Injection is a critical vulnerability that can lead to data or system compromise. By\ndynamically generating SQL query strings, user input may be able to influence the logic of\nthe SQL statement. This could lead to an adversary accessing information they should\nnot have access to or in some circumstances, being able to execute OS functionality or code.\n\nReplace all dynamically generated SQL queries with parameterized queries. In situations where\ndynamic queries must be created, never use direct user input, but instead use a map or\ndictionary of valid values and resolve them using a user supplied key.\n\nFor example, some database drivers do not allow parameterized queries for `>` or `<` comparison\noperators. In these cases, do not use a user supplied `>` or `<` value, but rather have the\nuser\nsupply a `gt` or `lt` value. The alphabetical values are then used to look up the `>` and `<`\nvalues to be used in the construction of the dynamic query. The same goes for other queries\nwhere\ncolumn or table names are required but cannot be parameterized.\n\nExample using parameterized queries with `sql.Query`:\n```\nrows, err := db.Query(\"SELECT * FROM users WHERE userName = ?\", userName)\nif err != nil {\n    return nil, err\n}\ndefer rows.Close()\nfor rows.Next() {\n  // ... process rows\n}\n```\n\nFor more information on SQL Injection see OWASP:\nhttps://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "go_sql_rule-format-string-sqli", "message": "SQL Injection is a critical vulnerability that can lead to data or system compromise. By\ndynamically generating SQL query strings, user input may be able to influence the logic of\nthe SQL statement. This could lead to an adversary accessing information they should\nnot have access to or in some circumstances, being able to execute OS functionality or code.\n\nReplace all dynamically generated SQL queries with parameterized queries. In situations where\ndynamic queries must be created, never use direct user input, but instead use a map or\ndictionary of valid values and resolve them using a user supplied key.\n\nFor example, some database drivers do not allow parameterized queries for `>` or `<` comparison\noperators. In these cases, do not use a user supplied `>` or `<` value, but rather have the\nuser\nsupply a `gt` or `lt` value. The alphabetical values are then used to look up the `>` and `<`\nvalues to be used in the construction of the dynamic query. The same goes for other queries\nwhere\ncolumn or table names are required but cannot be parameterized.\n\nExample using parameterized queries with `sql.Query`:\n```\nrows, err := db.Query(\"SELECT * FROM users WHERE userName = ?\", userName)\nif err != nil {\n    return nil, err\n}\ndefer rows.Close()\nfor rows.Next() {\n  // ... process rows\n}\n```\n\nFor more information on SQL Injection see OWASP:\nhttps://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "go_injection_rule-ssrf", "message": "Server-Side-Request-Forgery (SSRF) exploits backend systems that initiate requests to third\nparties.\nIf user input is used in constructing or sending these requests, an attacker could supply\nmalicious\ndata to force the request to other systems or modify request data to cause unwanted actions.\n\nEnsure user input is not used directly in constructing URLs or URIs when initiating requests\nto third party\nsystems from back end systems. Care must also be taken when constructing payloads using user\ninput. Where\npossible restrict to known URIs or payloads. Consider using a server side map where key's are\nused to return\nURLs such as `https://site/goto?key=1` where `{key: 1, url: 'http://some.url/', key: 2, url:\n'http://...'}`.\n\nIf you must use user supplied input for requesting URLs, it is strongly recommended that the\nHTTP client\nchosen allows you to customize and block certain IP ranges at the network level. By blocking\nRFC 1918\naddresses or other network address ranges, you can limit the severity of a successful SSRF\nattack. Care must\nalso be taken to block certain protocol or address formatting such as IPv6.\n\nIf you can not block address ranges at the client level, you may want to run the HTTP client\nas a protected\nuser, or in a protected network where you can apply IP Table or firewall rules to block access\nto dangerous\naddresses. Finally, if none of the above protections are available, you could also run a\ncustom HTTP proxy\nand force all requests through it to handle blocking dangerous addresses.\n\nExample HTTP client that disallows access to loopback and RFC-1918 addresses\n```\n// IsDisallowedIP parses the ip to determine if we should allow the HTTP client to continue\nfunc IsDisallowedIP(hostIP string) bool {\n  ip := net.ParseIP(hostIP)\n  return ip.IsMulticast() || ip.IsUnspecified() || ip.IsLoopback() || ip.IsPrivate()\n}\n\n// SafeTransport uses the net.Dial to connect, then if successful check if the resolved\n// ip address is disallowed. We do this due to hosts such as localhost.lol being resolvable to\n// potentially malicious URLs. We allow connection only for resolution purposes.\nfunc SafeTransport(timeout time.Duration) *http.Transport {\n  return &http.Transport{\n    DialContext: func(ctx context.Context, network, addr string) (net.Conn, error) {\n      c, err := net.DialTimeout(network, addr, timeout)\n      if err != nil {\n        return nil, err\n      }\n      ip, _, _ := net.SplitHostPort(c.RemoteAddr().String())\n      if IsDisallowedIP(ip) {\n        return nil, errors.New(\"ip address is not allowed\")\n      }\n      return c, err\n    },\n    DialTLS: func(network, addr string) (net.Conn, error) {\n      dialer := &net.Dialer{Timeout: timeout}\n      c, err := tls.DialWithDialer(dialer, network, addr, &tls.Config{})\n      if err != nil {\n        return nil, err\n      }\n\n      ip, _, _ := net.SplitHostPort(c.RemoteAddr().String())\n      if IsDisallowedIP(ip) {\n        return nil, errors.New(\"ip address is not allowed\")\n      }\n\n      err = c.Handshake()\n      if err != nil {\n        return c, err\n      }\n\n      return c, c.Handshake()\n    },\n    TLSHandshakeTimeout: timeout,\n  }\n}\n\nfunc httpRequest(requestUrl string) {\n  const clientConnectTimeout = time.Second * 10\n  httpClient := &http.Client{\n    Transport: SafeTransport(clientConnectTimeout),\n  }\n  resp, err := httpClient.Get(requestUrl)\n  if err != nil {\n    log.Fatal(err)\n  }\n  defer resp.Body.Close()\n  // work with resp\n}\n```\n\nFor more information on SSRF see OWASP:\nhttps://owasp.org/www-community/attacks/Server_Side_Request_Forgery\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "go_injection_rule-template-injection", "message": "Cross Site Scripting (XSS) is an attack which exploits a web application or system to treat\nuser input\nas markup or script code. It is important to encode the data depending on the specific context\nit\nis used in. There are at least six context types:\n\n- Inside HTML tags `<div>context 1</div>`\n- Inside attributes: `<div class=\"context 2\"></div>`\n- Inside event attributes `<button onclick=\"context 3\">button</button>`\n- Inside script blocks: `<script>var x = \"context 4\"</script>`\n- Unsafe element HTML assignment: `element.innerHTML = \"context 5\"`\n- Inside URLs: `<iframe src=\"context 6\"></iframe><a href=\"context 6\">link</a>`\n\nScript blocks alone have multiple ways they need to be encoded. Extra care must be taken if\nuser input\nis ever output inside of script tags.\n\nUser input that is displayed within the application must be encoded, sanitized or validated\nto ensure it cannot be treated as HTML or executed as Javascript code. Care must also be\ntaken\nto not mix server-side templating with client-side templating, as the server-side templating\nwill\nnot encode things like {{ 7*7 }} which may execute client-side templating features.\n\nIt is _NOT_ advised to encode user input prior to inserting into a data store. The data will\nneed to be\nencoded depending on context of where it is output. It is much safer to force the displaying\nsystem to\nhandle the encoding and not attempt to guess how it should be encoded.\n\nUse of the following template types with user input denotes a security risk:\n\n- [template.HTML](https://pkg.go.dev/html/template#HTML)\n- [template.JS](https://pkg.go.dev/html/template#JS)\n- [template.URL](https://pkg.go.dev/html/template#URL)\n- [template.HTMLAttr](https://pkg.go.dev/html/template#HTMLAttr)\n\nEither remove these types from the application or hardcode as const strings prior\nto conversion:\n```\ntestTemplate, err := template.New(\"testTemplate\").Funcs(template.FuncMap{\n  \"SafeHTML\": func() template.HTML {\n    const safeHTML = \"<div>hardcoded, safe html</div>\"\n    return template.HTML(safeHTML)\n  },\n}).Parse(`<html><body>{{ SafeHTML }}</body>`)\nif err != nil {\n  log.Fatal(err)\n}\n\nif err := testTemplate.Execute(os.Stdout, nil); err != nil {\n  log.Fatal(err)\n}\n```\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "go_secrets_rule-secrets", "message": "A potential hard-coded password was identified. Passwords should not be stored directly in code\nbut loaded from secure locations such as a Key Management System (KMS).\n\nThe purpose of using Key Management System's is so access can be audited and keys easily\nrotated\nin the event of a breach. By hardcoding passwords, it will be extremely difficult to determine\nwhen or if, a key is compromised.\n\nThe recommendation on which KMS to use depends on the environment the application is running\nin:\n\n- For Google Cloud Platform consider [Cloud Key Management](https://cloud.google.com/kms/docs)\n- For Amazon Web Services consider [AWS Key Management](https://aws.amazon.com/kms/)\n- For on premise or other alternatives to cloud providers, consider [Hashicorp's\nVault](https://www.vaultproject.io/)\n- For other cloud providers, please see their documentation\n", "parent_source": "gitlab", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "go_crypto_rule-badtlssettings", "message": "Usage of a cryptographically insecure cipher suite has been detected. It is recommended that\nalternative ciphers be used instead. It is strongly recommended that all TLS connections\nuse TLS 1.3 as Go will automatically choose the most secure cipher when negotiating the\nTLS handshake with client or servers. TLS 1.3 cipher suites are configured to require Perfect\nForward Secrecy (PFS).\nPFS is an important property as it will ensure that past encrypted transmissions could not be\ndecrypted\nif the TLS certificate was compromised.\n\nExample using TLS 1.3 for a Go server:\n```\ncert, err := tls.LoadX509KeyPair(\"server.crt\", \"server.key\")\nif err != nil {\n  log.Fatal(err)\n}\n\ncfg := &tls.Config{Certificates: []tls.Certificate{cert}, MinVersion: tls.VersionTLS13}\nsrv := &http.Server{\n  Addr:         \":8999\",\n  TLSConfig:    cfg,\n  ReadTimeout:  time.Minute,\n  WriteTimeout: time.Minute,\n}\nlog.Fatal(srv.ListenAndServeTLS(\"\", \"\"))\n```\n\nIf TLS 1.0-1.2 must be used, then the following list of ciphers should be chosen as they\nsupport\nPerfect Forward Secrecy (PFS):\n\n- TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n- TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n- TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305\n- TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305\n\n\nExample `tls.Config` using the recommended cipher suites:\n```\ncfg := &tls.Config{\n    MinVersion: tls.VersionTLS12,\n    CipherSuites: []uint16{\n        tls.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,\n        tls.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,\n        tls.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,\n        tls.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,\n        tls.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,\n        tls.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,\n    },\n}\n```\n\nFor more information on cipher suites in Go see: https://go.dev/blog/tls-cipher-suites\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "go_crypto_rule-weakrandsource", "message": "Go's `math/rand` is not meant for use in generating random numbers for any cryptographic or\nsecurity sensitive context. This includes generating random numbers that could be used in\nuser specific identifiers or where the random number that is generated is considered to\nbe secret.\n\nReplace all imports of `math/rand` with `crypto/rand`.\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "go_crypto_rule-weakkeystrength", "message": "The application is generating an RSA key that is less than the recommended 2048 bits.\nThe National Institute of Standards and Technology (NIST) deprecated signing Digital\nCertificates that contained RSA Public Keys of 1024 bits in December 2010. While\n1024-bit RSA keys have not been factored yet, advances in compute may make it possible\nin the near future.\n\nTo generate an RSA key of 2048 pass the number of bits as the second parameter to\nthe `rsa.GenerateKey` function:\n```\nimport (\n  \"crypto/rand\"\n  \"crypto/rsa\"\n)\n\nfunc generate() {\n  key, err := rsa.GenerateKey(rand.Reader, 2048)\n  if err != nil {\n    log.Fatal(err)\n  }\n}\n```\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "go_crypto_rule-insecure-ignore-host-key", "message": "The application was found to ignore host keys. Host keys are important as\nthey provide assurance that the client can prove that the host is trusted.\nBy ignoring these host keys, it is impossible for the client to validate the\nconnection is to a trusted host.\n\nFor the `ssh.ClientConfig` `HostKeyCallback` property, consider using the\n[knownhosts](https://pkg.go.dev/golang.org/x/crypto/ssh/knownhosts) package that\nparses OpenSSH's `known_hosts` key database.\n\nExample configuration connecting to a known, trusted host:\n```\nknownHostCallback, err := knownhosts.New(\"/home/user/.ssh/known_hosts\")\nif err != nil {\n  log.Fatal(err)\n}\n\n// Create client config using the knownHost callback function\nconfig := &ssh.ClientConfig{\n  ...\n  HostKeyCallback: knownHostCallback,\n}\n\n// Connect to ssh server\nconn, err := ssh.Dial(\"tcp\", \"localhost:22\", config)\nif err != nil {\n  log.Fatal(\"unable to connect: \", err)\n}\ndefer conn.Close()\n```\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "go_crypto_rule-tlsversion", "message": "TLS versions 1.1 and 1.0 were deprecated by the IETF in June 2018 due to a number of attacks\nagainst\nthe vulnerable versions. Use of a deprecated TLS version may result in the unauthorized\nretrieval\nof sensitive information. It is strongly recommended that all TLS connections\nuse TLS 1.3 as Go will automatically choose the most secure cipher when negotiating the\nTLS handshake with client or servers. TLS 1.3 cipher suites are configured to require Perfect\nForward Secrecy (PFS).\nPFS is an important property as it will ensure that past encrypted transmissions could not be\ndecrypted\nif the TLS certificate was compromised.\n\nExample using TLS 1.3 for a Go server:\n```\ncert, err := tls.LoadX509KeyPair(\"server.crt\", \"server.key\")\nif err != nil {\n  log.Fatal(err)\n}\n\ncfg := &tls.Config{Certificates: []tls.Certificate{cert}, MinVersion: tls.VersionTLS13}\nsrv := &http.Server{\n  Addr:         \":8999\",\n  TLSConfig:    cfg,\n  ReadTimeout:  time.Minute,\n  WriteTimeout: time.Minute,\n}\nlog.Fatal(srv.ListenAndServeTLS(\"\", \"\"))\n```\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "go_http_rule-http-serve", "message": "Go's `net/http` serve functions may be vulnerable to resource consumption attacks if timeouts\nare not properly configured\nprior to starting the HTTP server. An adversary may open up thousands of connections but never\ncomplete sending all data,\nor never terminate the connections. This may lead to the server no longer accepting new\nconnections.\n\nTo protect against this style of resource consumption attack, timeouts should be set in the\n`net/http` server prior to calling\nthe listen or serve functions. What this means is that the default `http.ListenAndServe` and\n`http.Serve` functions should not\nbe used in a production setting as they are unable to have timeouts configured. Instead a\ncustom `http.Server` object must be\ncreated with the timeouts configured.\n\nExample setting timeouts on a `net/http` server:\n```\n// All values chosen below are dependent on application logic and\n// should be tailored per use-case\nsrv := &http.Server{\n  Addr: \"localhost:8000\",\n  // ReadHeaderTimeout is the amount of time allowed to read\n  // request headers. The connection's read deadline is reset\n  // after reading the headers and the Handler can decide what\n  // is considered too slow for the body. If ReadHeaderTimeout\n  // is zero, the value of ReadTimeout is used. If both are\n  // zero, there is no timeout.\n  ReadHeaderTimeout: 15 * time.Second,\n\n  // ReadTimeout is the maximum duration for reading the entire\n  // request, including the body. A zero or negative value means\n  // there will be no timeout.\n  //\n  // Because ReadTimeout does not let Handlers make per-request\n  // decisions on each request body's acceptable deadline or\n  // upload rate, most users will prefer to use\n  // ReadHeaderTimeout. It is valid to use them both.\n  ReadTimeout: 15 * time.Second,\n\n  // WriteTimeout is the maximum duration before timing out\n  // writes of the response. It is reset whenever a new\n  // request's header is read. Like ReadTimeout, it does not\n  // let Handlers make decisions on a per-request basis.\n  // A zero or negative value means there will be no timeout.\n  WriteTimeout: 10 * time.Second,\n\n  // IdleTimeout is the maximum amount of time to wait for the\n  // next request when keep-alives are enabled. If IdleTimeout\n  // is zero, the value of ReadTimeout is used. If both are\n  // zero, there is no timeout.\n  IdleTimeout: 30 * time.Second,\n}\n\n// For per request timeouts applications can wrap all `http.HandlerFunc(...)` in\n// `http.TimeoutHandler`` and specify a timeout, but note the TimeoutHandler does not\n// start ticking until all headers have been read.\n\n// Listen with our custom server with timeouts configured\nif err := srv.ListenAndServe(); err != nil {\n  log.Fatal(err)\n}\n```\nFor more information on the `http.Server` timeouts, see: https://pkg.go.dev/net/http#Server\n\nFor information on setting request based timeouts, see:\nhttps://pkg.go.dev/net/http#TimeoutHandler\n\nFor more information on the Slowloris attack see:\nhttps://en.wikipedia.org/wiki/Slowloris_(computer_security)\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "go_http_rule-slowloris", "message": "Potential Slowloris Attack because `ReadHeaderTimeout` is not configured in the `http.Server`.\nThis application may\nbe vulnerable to resource consumption attacks if timeouts are not properly configured\nprior to starting the HTTP server. An adversary may open up thousands of connections but never\ncomplete sending all data,\nor never terminate the connections. This may lead to the server no longer accepting new\nconnections.\n\nTo protect against this style of resource consumption attack, timeouts should be set in the\n`net/http` server prior to calling\nthe listen or serve functions. The default `http.ListenAndServe` and\n`http.Serve` functions should not\nbe used in a production setting as they are unable to have timeouts configured. Instead a\ncustom `http.Server` object must be\ncreated with the timeouts configured.\n\nExample setting timeouts on a `net/http` server:\n```\n// All values chosen below are dependent on application logic and\n// should be tailored per use-case\nsrv := &http.Server{\n  Addr: \"localhost:8000\",\n  // ReadHeaderTimeout is the amount of time allowed to read\n  // request headers. The connection's read deadline is reset\n  // after reading the headers and the Handler can decide what\n  // is considered too slow for the body. If ReadHeaderTimeout\n  // is zero, the value of ReadTimeout is used. If both are\n  // zero, there is no timeout.\n  ReadHeaderTimeout: 15 * time.Second,\n\n  // ReadTimeout is the maximum duration for reading the entire\n  // request, including the body. A zero or negative value means\n  // there will be no timeout.\n  //\n  // Because ReadTimeout does not let Handlers make per-request\n  // decisions on each request body's acceptable deadline or\n  // upload rate, most users will prefer to use\n  // ReadHeaderTimeout. It is valid to use them both.\n  ReadTimeout: 15 * time.Second,\n\n  // WriteTimeout is the maximum duration before timing out\n  // writes of the response. It is reset whenever a new\n  // request's header is read. Like ReadTimeout, it does not\n  // let Handlers make decisions on a per-request basis.\n  // A zero or negative value means there will be no timeout.\n  WriteTimeout: 10 * time.Second,\n\n  // IdleTimeout is the maximum amount of time to wait for the\n  // next request when keep-alives are enabled. If IdleTimeout\n  // is zero, the value of ReadTimeout is used. If both are\n  // zero, there is no timeout.\n  IdleTimeout: 30 * time.Second,\n}\n\n// For per request timeouts applications can wrap all `http.HandlerFunc(...)` in\n// `http.TimeoutHandler`` and specify a timeout, but note the TimeoutHandler does not\n// start ticking until all headers have been read.\n\n// Listen with our custom server with timeouts configured\nif err := srv.ListenAndServe(); err != nil {\n  log.Fatal(err)\n}\n```\nFor more information on the `http.Server` timeouts, see: https://pkg.go.dev/net/http#Server\n\nFor information on setting request based timeouts, see:\nhttps://pkg.go.dev/net/http#TimeoutHandler\n\nFor more information on the Slowloris attack see:\nhttps://en.wikipedia.org/wiki/Slowloris_(computer_security)\n", "parent_source": "gitlab", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "tensorflow-load-library", "message": "Loading custom operator libraries can result in arbitrary code execution", "parent_source": "trailofbits", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "pickles-in-pytorch-distributed", "message": "Functions reliant on pickle can result in arbitrary code execution", "parent_source": "trailofbits", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "pickles-in-numpy", "message": "Functions reliant on pickle can result in arbitrary code execution.  Consider using fickling or switching to a safer serialization method", "parent_source": "trailofbits", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "numpy-load-library", "message": "Loading custom operator libraries can result in arbitrary code execution", "parent_source": "trailofbits", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "onnx-session-options", "message": "Loading custom operator libraries can result in arbitrary code execution", "parent_source": "trailofbits", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "numpy-distutils", "message": "NumPy distutils is deprecated, and will be removed in the future", "parent_source": "trailofbits", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "numpy-in-pytorch-modules", "message": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading", "parent_source": "trailofbits", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "automatic-memory-pinning", "message": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency ", "parent_source": "trailofbits", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "pytorch-tensor", "message": "Avoid using `torch.Tensor()` to directly create a tensor for efficiency and proper parsing", "parent_source": "trailofbits", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "pickles-in-pandas", "message": "Functions reliant on pickle can result in arbitrary code execution. Consider using fickling or switching to a safer serialization method", "parent_source": "trailofbits", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "tarfile-extractall-traversal", "message": "Possible path traversal through `tarfile.open($PATH).extractall()` if the source tar is controlled by an attacker", "parent_source": "trailofbits", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "pytorch-classes-load-library", "message": "Loading custom operator libraries can result in arbitrary code execution", "parent_source": "trailofbits", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "numpy-in-pytorch-datasets", "message": "Using the NumPy RNG inside of a PyTorch dataset can lead to a number of issues with loading data, including identical augmentations. Instead, use the random number generators built into Python and PyTorch ", "parent_source": "trailofbits", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "waiting-with-pytorch-distributed", "message": "Not waiting for requests is a source of undefined behavior", "parent_source": "trailofbits", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "lxml-in-pandas", "message": "Found usage of the `$FLAVOR` library, which is vulnerable to attacks such as XML external entity (XXE) attacks", "parent_source": "trailofbits", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "pytorch-package", "message": "Avoid importing torch.package - it can result in arbitrary code execution via pickle", "parent_source": "trailofbits", "severity": "`WARNING`", "languages": "Python"}, {"identifier": "numpy-f2py-compile", "message": "Compiling arbitrary code can result in code execution. Ensure the source code is from a trusted location", "parent_source": "trailofbits", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "scikit-joblib-load", "message": "Scikit `joblib` uses pickle under the hood. Functions reliant on pickle can result in arbitrary code execution. Consider using `skops` instead.", "parent_source": "trailofbits", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "pickles-in-pytorch", "message": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX", "parent_source": "trailofbits", "severity": "`ERROR`", "languages": "Python"}, {"identifier": "v3-potentially-bad-cors", "message": "The Apollo GraphQL server is setup with a CORS policy that does not deny all origins. Carefully review the origins to see if any of them are incorrectly setup (third-party websites, bad regexes, functions that reflect every origin, etc.).", "parent_source": "trailofbits", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "schema-directives", "message": "The Apollo GraphQL uses the 'schemaDirectives' option. This works in ApolloServer v2, but does nothing in version >=3. Depending on what the directives are used for, this can expose authenticated endpoints, disable rate limiting, and more. See the references on how to create custom directives in v3 and v4. ", "parent_source": "trailofbits", "severity": "`ERROR`", "languages": "JavaScript, TypeScript"}, {"identifier": "v3-no-cors", "message": "The Apollo GraphQL server lacks a CORS policy. By default, the batteries-included apollo-server package serves the Access-Control-Allow-Origin HTTP header with the wildcard value (*).", "parent_source": "trailofbits", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "v3-bad-cors", "message": "The Apollo GraphQL server is setup with a CORS policy that reflects any origin, or with a regex that has known flaws.", "parent_source": "trailofbits", "severity": "`ERROR`", "languages": "JavaScript, TypeScript"}, {"identifier": "v3-express-no-cors", "message": "The Apollo GraphQL server lacks a CORS policy. By default, the server uses the Access-Control-Allow-Origin HTTP header with the wildcard value (*).", "parent_source": "trailofbits", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "v3-express-bad-cors", "message": "The Apollo GraphQL server is setup with a CORS policy that reflects any origin, or with a regex that has known flaws.", "parent_source": "trailofbits", "severity": "`ERROR`", "languages": "JavaScript, TypeScript"}, {"identifier": "use-of-graphql-upload", "message": "The Apollo GraphQL server is using the graphql-upload library. This library allows file uploads using POSTs with content-type: multipart/form-data, which can enable to CSRF attacks. Ensure that you are enabling CSRF protection if you really need to use graphql-upload .", "parent_source": "trailofbits", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "v3-csrf-prevention", "message": "The Apollo GraphQL server lacks the 'csrfPrevention' option. This option is 'false' by the default in v3 of the Apollo GraphQL v3, which can enable CSRF attacks.", "parent_source": "trailofbits", "severity": "`ERROR`", "languages": "JavaScript, TypeScript"}, {"identifier": "v4-csrf-prevention", "message": "The Apollo GraphQL server sets the 'csrfPrevention' option to false. This can enable CSRF attacks.", "parent_source": "trailofbits", "severity": "`ERROR`", "languages": "JavaScript, TypeScript"}, {"identifier": "invalid-usage-of-modified-variable", "message": "Variable `$X` is likely modified and later used on error. In some cases this could result  in panics due to a nil dereference  ", "parent_source": "trailofbits", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "racy-write-to-map", "message": "Writing `$MAP` from multiple goroutines is not concurrency safe", "parent_source": "trailofbits", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "hanging-goroutine", "message": "Potential goroutine leak due to unbuffered channel send inside loop or unbuffered channel receive in select block", "parent_source": "trailofbits", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "anonymous-race-condition", "message": "Possible race condition due to memory aliasing of variable `$X`", "parent_source": "trailofbits", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "nil-check-after-call", "message": "Potential `$FOO` nil dereference when `$BAR` is called", "parent_source": "trailofbits", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "servercodec-readrequestbody-unhandled-nil", "message": "The `func ($O *$CODEC) ReadRequestBody($ARG $TYPE) error` function does not handle `nil` argument, as the `ServerCodec` interface requires. An incorrect implementation could lead to denial of service", "parent_source": "trailofbits", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "iterate-over-empty-map", "message": "Iteration over a possibly empty map `$C`. This is likely a bug or redundant code", "parent_source": "trailofbits", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "racy-append-to-slice", "message": "Appending `$SLICE` from multiple goroutines is not concurrency safe", "parent_source": "trailofbits", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "waitgroup-wait-inside-loop", "message": "Calling `$WG.Wait()` inside a loop blocks the call to `$WG.Done()`", "parent_source": "trailofbits", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "unsafe-dll-loading", "message": "The function is vulnerable to DLL hijacking attacks. Use `windows.NewLazySystemDLL()` function to limit DLL search to the Windows directory", "parent_source": "trailofbits", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "missing-unlock-before-return", "message": "Missing mutex unlock before returning from a function.  This could result in panics resulting from double lock operations", "parent_source": "trailofbits", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "sync-mutex-value-copied", "message": "A `sync.Mutex` is copied in function `$FUNC` given that `$T` is value receiver.  As a result, the struct `$T` may not be locked as intended", "parent_source": "trailofbits", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "string-to-int-signedness-cast", "message": "Downcasting or changing sign of an integer with `$CAST_METHOD` method", "parent_source": "trailofbits", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "missing-runlock-on-rwmutex", "message": "Missing `RUnlock` on an `RWMutex` lock before returning from a function", "parent_source": "trailofbits", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "waitgroup-add-called-inside-goroutine", "message": "Calling `$WG.Add` inside of an anonymous goroutine may result in `$WG.Wait`\nwaiting for more or less calls to `$WG.Done()` than expected\n", "parent_source": "trailofbits", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "panic-in-function-returning-result", "message": "`expect` or `unwrap` called in function returning a `Result`", "parent_source": "trailofbits", "severity": "`WARNING`", "languages": "Rust"}, {"identifier": "raptor-bad-words", "message": "The code contains comments that suggest the presence of bugs, incomplete functionality, or weaknesses. Many suspicious comments, such as BUG, HACK, FIXME, LATER, LATER2, TODO, in the code indicate missing security functionality and checking. Others indicate code problems that programmers should fix, such as hard-coded variables, error handling, not using stored procedures, and performance issues.", "parent_source": "0xdea", "severity": "`INFO`", "languages": "Generic"}, {"identifier": "raptor-pointer-subtraction", "message": "The software subtracts one pointer from another in order to determine size, but this calculation can be incorrect if the pointers do not exist in the same memory chunk.", "parent_source": "0xdea", "severity": "`WARNING`", "languages": "C, C++"}, {"identifier": "raptor-unchecked-ret-setuid-seteuid", "message": "The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions. If the program calls a function to drop privileges but  does not check the return code to ensure that privileges were  successfully dropped, then the program will continue to operate with  the higher privileges.", "parent_source": "0xdea", "severity": "`WARNING`", "languages": "C, C++"}, {"identifier": "raptor-insecure-api-gets", "message": "The gets() function is always unsafe because it does not perform bounds  checking on the size of its input. An attacker can easily send  arbitrarily-sized input to gets() and overflow the destination buffer.", "parent_source": "0xdea", "severity": "`ERROR`", "languages": "C, C++"}, {"identifier": "raptor-argv-envp-access", "message": "The program accesses command-line arguments or environment variables, which are controlled by potential attackers.", "parent_source": "0xdea", "severity": "`INFO`", "languages": "C, C++"}, {"identifier": "raptor-interesting-api-calls", "message": "Locate all calls to interesting and potentially insecure API functions (candidate points). The auditor can backtrace from these candidate points to find pathways allowing access from untrusted input.", "parent_source": "0xdea", "severity": "`WARNING`", "languages": "C, C++"}, {"identifier": "raptor-incorrect-use-of-free", "message": "The software calls free() on a pointer to memory that has a short  lifetime and was not allocated using associated heap allocation  functions such as malloc(), calloc(), or realloc().", "parent_source": "0xdea", "severity": "`ERROR`", "languages": "C, C++"}, {"identifier": "raptor-write-into-stack-buffer", "message": "The software directly writes into a stack buffer. This might lead to a stack-based buffer overflow.", "parent_source": "0xdea", "severity": "`INFO`", "languages": "C, C++"}, {"identifier": "raptor-use-after-free", "message": "The use of previously-freed memory can have any number of adverse consequences, ranging from the corruption of valid data to the execution of arbitrary code, depending on the instantiation and timing of the flaw. The simplest way data corruption may occur involves the system's reuse of the freed memory.", "parent_source": "0xdea", "severity": "`ERROR`", "languages": "C, C++"}, {"identifier": "raptor-unsafe-ret-snprintf-vsnprintf", "message": "The snprintf() and vsnprintf() functions return the total length of the string they tried to create. Therefore, this return value can be larger than the size of the destination buffer. If it is used unsafely, e.g. as an index to write to the destination buffer, memory corruption might occur.", "parent_source": "0xdea", "severity": "`WARNING`", "languages": "C, C++"}, {"identifier": "raptor-command-injection", "message": "The software constructs an OS command using externally-influenced input,  but it does not neutralize or incorrectly neutralizes special elements  that could modify the intended OS command.", "parent_source": "0xdea", "severity": "`ERROR`", "languages": "C, C++"}, {"identifier": "raptor-missing-return", "message": "A non-void function does not have a return statement. Hence, its return value can be considered undefined.", "parent_source": "0xdea", "severity": "`INFO`", "languages": "C, C++"}, {"identifier": "raptor-incorrect-use-of-strncpy-stpncpy-strlcpy", "message": "The software uses the size of a source buffer when reading from or writing to a destination buffer, which may cause it to access memory that is outside of the bounds of the buffer.", "parent_source": "0xdea", "severity": "`ERROR`", "languages": "C, C++"}, {"identifier": "raptor-ret-stack-address", "message": "A function returns the address of a stack variable, which will cause unintended program behavior, typically in the form of a crash.", "parent_source": "0xdea", "severity": "`INFO`", "languages": "C, C++"}, {"identifier": "raptor-insecure-api-strcpy-stpcpy-strcat", "message": "A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.", "parent_source": "0xdea", "severity": "`ERROR`", "languages": "C, C++"}, {"identifier": "raptor-unchecked-ret-malloc-calloc-realloc", "message": "The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.", "parent_source": "0xdea", "severity": "`WARNING`", "languages": "C, C++"}, {"identifier": "raptor-putenv-stack-var", "message": "The software calls putenv() with a variable that has a short lifetime, such as a pointer to an automatic variable allocated on the stack. The correct behavior is to call putenv() with a static/global string.", "parent_source": "0xdea", "severity": "`INFO`", "languages": "C, C++"}, {"identifier": "raptor-format-string-bugs", "message": "The software uses a function that accepts a format string as an argument, but the format string originates from an external source. This can lead  to buffer overflows, denial of service, or data representation problems.", "parent_source": "0xdea", "severity": "`ERROR`", "languages": "C, C++"}, {"identifier": "raptor-missing-default-in-switch", "message": "The code does not have a default case in an expression with multiple conditions, such as a switch statement.", "parent_source": "0xdea", "severity": "`INFO`", "languages": "C, C++"}, {"identifier": "raptor-suspicious-assert", "message": "Most codebases define assertion macros which compile to a no-op on non-debug builds. If assertions are the only line of defense against untrusted input, the software may be exposed to attacks that leverage the lack of proper input checks.", "parent_source": "0xdea", "severity": "`WARNING`", "languages": "C, C++"}, {"identifier": "raptor-insecure-api-mktemp-tmpnam-tempnam", "message": "Creating and using insecure temporary files can leave application and system data vulnerable to attack.", "parent_source": "0xdea", "severity": "`WARNING`", "languages": "C, C++"}, {"identifier": "raptor-unterminated-string-strncpy-stpncpy", "message": "If there is no NUL character byte in the first n bytes of the source string, strncpy() and stpncpy() do not null-terminate the destination buffer. If the program does not explicitly terminate the destination buffer, this will almost certainly result in information disclosure, and possibly a buffer overflow condition.", "parent_source": "0xdea", "severity": "`WARNING`", "languages": "C, C++"}, {"identifier": "raptor-insecure-api-alloca", "message": "Use of alloca() is unsafe because it cannot ensure that the pointer  returned points to a valid and usable block of memory. The allocation  made may exceed the bounds of the stack, or even go further into other  objects in memory, and alloca() cannot determine such an error.", "parent_source": "0xdea", "severity": "`ERROR`", "languages": "C, C++"}, {"identifier": "raptor-insecure-api-access-stat-lstat", "message": "The software checks the state of a resource before using it, but the  resource's state can change between the check and the use in a way that  invalidates the results of the check. This canmcause the software to  perform invalid actions when the resource is inman unexpected state.", "parent_source": "0xdea", "severity": "`WARNING`", "languages": "C, C++"}, {"identifier": "raptor-insecure-api-sprintf-vsprintf", "message": "A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.", "parent_source": "0xdea", "severity": "`ERROR`", "languages": "C, C++"}, {"identifier": "raptor-double-free", "message": "The software calls free() twice on the same memory address, potentially  leading to memory corruption. This corruption can cause the program to  crash or cause two later calls to malloc() to return the same pointer.", "parent_source": "0xdea", "severity": "`ERROR`", "languages": "C, C++"}, {"identifier": "raptor-unchecked-ret-scanf-etc", "message": "The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.", "parent_source": "0xdea", "severity": "`WARNING`", "languages": "C, C++"}, {"identifier": "raptor-incorrect-use-of-memset", "message": "The invocation of memset() is easy to get wrong. The second argument is the character and the third argument is the size, but sometimes these arguments are in the wrong order. This results in a no-op.", "parent_source": "0xdea", "severity": "`ERROR`", "languages": "C, C++"}, {"identifier": "raptor-incorrect-order-setuid-setgid-etc", "message": "A compromised process might be able to regain elevated group privileges if set(e)gid() is called after set(e)uid(). A similar case is when  privileges are temporarily dropped with seteuid() and then setuid() or  seteuid() are called from while under unprivileged user.", "parent_source": "0xdea", "severity": "`ERROR`", "languages": "C, C++"}, {"identifier": "raptor-mismatched-memory-management", "message": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.", "parent_source": "0xdea", "severity": "`INFO`", "languages": "C, C++"}, {"identifier": "raptor-integer-wraparound", "message": "The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.", "parent_source": "0xdea", "severity": "`WARNING`", "languages": "C, C++"}, {"identifier": "raptor-insecure-api-scanf-etc", "message": "A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer.", "parent_source": "0xdea", "severity": "`ERROR`", "languages": "C, C++"}, {"identifier": "raptor-incorrect-unsigned-comparison", "message": "Checking if an unsigned variable is negative makes no sense and is usually a good indication that something is probably wrong with the code.", "parent_source": "0xdea", "severity": "`WARNING`", "languages": "C, C++"}, {"identifier": "raptor-insecure-api-rand-srand", "message": "The rand() PRNG should not be used in applications intended to be  portable when good randomness is needed. Instead, the use of random()  is recommended.", "parent_source": "0xdea", "severity": "`WARNING`", "languages": "C, C++"}, {"identifier": "raptor-unsafe-strlen", "message": "The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. When influenced by the size of an  input it is often easier to overflow a short than an int.", "parent_source": "0xdea", "severity": "`WARNING`", "languages": "C, C++"}, {"identifier": "raptor-insecure-api-atoi-atol-atof", "message": "The atoi(), atol(), atof(), and similar functions don't handle errors. They don't check for integer overflow and can return a negative value.  They have undefined behavior if the value of the result cannot be  represented. They return 0 (or 0.0) if the string does not represent  an integer (or decimal), which is indistinguishable from a correctly  formatted, zero-denoting input string.", "parent_source": "0xdea", "severity": "`INFO`", "languages": "C, C++"}, {"identifier": "raptor-unsafe-ret-strlcpy-strlcat", "message": "The strlcpy() and strlcat() functions return the total length of the string they tried to create. For strlcpy() that means the length of the source string. For strlcat() that means the initial length of the destination string plus the length of of the source string. Therefore, this return value can be larger than the size of the destination buffer. If it is used unsafely, e.g. as an index to write to the destination buffer, memory corruption might occur.", "parent_source": "0xdea", "severity": "`WARNING`", "languages": "C, C++"}, {"identifier": "raptor-off-by-one", "message": "The software calculates or uses an incorrect maximum or minimum value that is 1 more, or 1 less, than the correct value.", "parent_source": "0xdea", "severity": "`WARNING`", "languages": "C, C++"}, {"identifier": "raptor-insecure-api-signal", "message": "The signal() API should be regarded as deprecated. When possible, sigaction() should be used instead, because it allows to precisely specify the desired behavior in case two signals arrive shortly after each other thus preventing many race conditions.", "parent_source": "0xdea", "severity": "`WARNING`", "languages": "C, C++"}, {"identifier": "raptor-integer-truncation", "message": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.", "parent_source": "0xdea", "severity": "`WARNING`", "languages": "C, C++"}, {"identifier": "raptor-missing-break-in-switch", "message": "The software omits a break statement within a switch or similar construct, causing code associated with multiple conditions to execute. This can cause problems when the programmer only intended to execute code associated with one condition.", "parent_source": "0xdea", "severity": "`INFO`", "languages": "C, C++"}, {"identifier": "raptor-signed-unsigned-conversion", "message": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.", "parent_source": "0xdea", "severity": "`WARNING`", "languages": "C, C++"}, {"identifier": "raptor-incorrect-use-of-sizeof", "message": "The code calls sizeof() on a malloced pointer type, which always returns the wordsize/8. This can produce an unexpected result if the programmer intended to determine how much memory has been allocated.", "parent_source": "0xdea", "severity": "`WARNING`", "languages": "C, C++"}, {"identifier": "raptor-incorrect-use-of-sprintf-snprintf", "message": "C standards specify that the results are undefined if a call to sprintf(), snprintf(), vsprintf(), or vsnprintf() would cause copying to take place between objects that overlap (e.g., if the target string array and one of the supplied input arguments refer to the same buffer).", "parent_source": "0xdea", "severity": "`WARNING`", "languages": "C, C++"}, {"identifier": "raptor-mismatched-memory-management-cpp", "message": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.", "parent_source": "0xdea", "severity": "`INFO`", "languages": "C++"}, {"identifier": "raptor-memory-address-exposure", "message": "The software generates an error message that includes sensitive information about its environment, users, or associated data. In particular, exposure of memory addresses might defeat ASLR.", "parent_source": "0xdea", "severity": "`INFO`", "languages": "C, C++"}, {"identifier": "raptor-typos", "message": "The programmer accidentally uses the wrong operator, which changes the application logic in security-relevant ways. This rule also covers some other common typo patterns.", "parent_source": "0xdea", "severity": "`INFO`", "languages": "C, C++"}, {"identifier": "raptor-incorrect-use-of-strncat", "message": "The strncat() function is nearly as dangerous as strcat(), in that it's quite easy to misuse. The first common mistake is supplying the size of  the entire buffer instead of the size remaining in the buffer. A more  subtle mistake can be made: the size parameter needs to be the amount of space left in the buffer less one; otherwise, the NUL byte is written  one byte past the end of the buffer.", "parent_source": "0xdea", "severity": "`ERROR`", "languages": "C, C++"}, {"identifier": "spark-route-handler", "message": "Spark HTTP route $ROUTE will handle $METHOD requests", "parent_source": "elttam", "severity": "`INFO`", "languages": "Kotlin"}, {"identifier": "flask-app-route-handler", "message": "Flask HTTP route $ROUTE will handle $METHOD requests", "parent_source": "elttam", "severity": "`INFO`", "languages": "Python"}, {"identifier": "exec", "message": "Process execution detected $EXEC", "parent_source": "elttam", "severity": "`INFO`", "languages": "C"}, {"identifier": "fromXML", "message": "XStream XML Deserialzation: Check that they have correctly set an allow-list and if an attacker can control input.", "parent_source": "elttam", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "polymorphic-typing", "message": "Jackson Polymorphic Typing: This rule is to detect any instances of polymorphic typing to aid in determining vulnerable Jackson deserialization issues. Check if deserializing untrusted JSON to a nominal type such as `java.lang.Object` or permissive tag interfaces such as `java.io.Serializable` or `java.lang.Comparable` is occuring.", "parent_source": "elttam", "severity": "`INFO`", "languages": "Java"}, {"identifier": "type-resolver-override", "message": "$X Jackson Polymorphic Typing: Polymorphic typing may have been introduced through overriding the default Jackson type resolver.", "parent_source": "elttam", "severity": "`INFO`", "languages": "Java"}, {"identifier": "processbuilder", "message": "ProcessBuilder in $METHOD()", "parent_source": "elttam", "severity": "`INFO`", "languages": "Java"}, {"identifier": "java.servlet.filter", "message": "class $CLASS implements Filter", "parent_source": "elttam", "severity": "`INFO`", "languages": "Java"}, {"identifier": "rest-DeleteMapping", "message": "Entrypoint DELETE $METHOD", "parent_source": "elttam", "severity": "`INFO`", "languages": "Java"}, {"identifier": "rest-servletregistrationbean", "message": "ServletRegistrationBean SERVLET $ALWAYS_MAP_URL $URL_MAPPINGS", "parent_source": "elttam", "severity": "`INFO`", "languages": "Java"}, {"identifier": "rest-PutMapping", "message": "Entrypoint PUT $METHOD", "parent_source": "elttam", "severity": "`INFO`", "languages": "Java"}, {"identifier": "rest-PostMapping", "message": "Entrypoint POST $METHOD", "parent_source": "elttam", "severity": "`INFO`", "languages": "Java"}, {"identifier": "rest-GetMapping", "message": "Entrypoint $METHOD GET $PATH", "parent_source": "elttam", "severity": "`INFO`", "languages": "Java"}, {"identifier": "rest-PatchMapping", "message": "Entrypoint PATCH $METHOD", "parent_source": "elttam", "severity": "`INFO`", "languages": "Java"}, {"identifier": "rest-ResponseBody", "message": "Method return value should be bound to the web response body", "parent_source": "elttam", "severity": "`INFO`", "languages": "Java"}, {"identifier": "rest-RestController", "message": "RestController $CLASS", "parent_source": "elttam", "severity": "`INFO`", "languages": "Java"}, {"identifier": "rest-Order", "message": "@Order $CLASS / $METHOD", "parent_source": "elttam", "severity": "`INFO`", "languages": "Java"}, {"identifier": "rest-RequestMapping", "message": "Entrypoint RequestMapping class $CLASS or method $METHOD", "parent_source": "elttam", "severity": "`INFO`", "languages": "Java"}, {"identifier": "rest-Priority", "message": "@Priority $CLASS", "parent_source": "elttam", "severity": "`INFO`", "languages": "Java"}, {"identifier": "rest-CrossOrigin", "message": "Cross-Origin requests permitted $CLASS / $Method", "parent_source": "elttam", "severity": "`INFO`", "languages": "Java"}, {"identifier": "provider-class", "message": "JAX-RS @Provider $CLASS", "parent_source": "elttam", "severity": "`INFO`", "languages": "Java"}, {"identifier": "http-method.path-path", "message": "JAX-RS $METHOD $PATH1/$PATH2 endpoint $CLASS.$FUNC()", "parent_source": "elttam", "severity": "`INFO`", "languages": "Java"}, {"identifier": "http-method.class-path", "message": "JAX-RS $METHOD class $PATH1 endpoint $CLASS.$FUNC()", "parent_source": "elttam", "severity": "`INFO`", "languages": "Java"}, {"identifier": "http-method.method-path", "message": "JAX-RS $METHOD method $PATH2 endpoint $CLASS.$FUNC()", "parent_source": "elttam", "severity": "`INFO`", "languages": "Java"}, {"identifier": "http-method.no-path", "message": "JAX-RS $METHOD endpoint $CLASS.$FUNC()", "parent_source": "elttam", "severity": "`INFO`", "languages": "Java"}, {"identifier": "jax-rs.path-class", "message": "JAX-RS class $CLASS Path $PATH", "parent_source": "elttam", "severity": "`INFO`", "languages": "Java"}, {"identifier": "jax-rs.httpmethod", "message": "JAX-RS @HttpMethod HTTP Method Annotation $INTERFACE, $TARGET annotated with this will handle $METHOD", "parent_source": "elttam", "severity": "`INFO`", "languages": "Java"}, {"identifier": "path-class-method", "message": "JAX-RS class $CLASS.$FUNC Path $PATH1/$PATH2", "parent_source": "elttam", "severity": "`INFO`", "languages": "Java"}, {"identifier": "consumes-method-star", "message": "JAX-RS @Consumes(\"*/*\") $CLASS.$METHOD", "parent_source": "elttam", "severity": "`INFO`", "languages": "Java"}, {"identifier": "path-method-string", "message": "JAX-RS Path \"$PATH1/$PATH2\" endpoint $CLASS.$FUNC()", "parent_source": "elttam", "severity": "`INFO`", "languages": "Java"}, {"identifier": "path-class", "message": "JAX-RS class $CLASS Path $PATH", "parent_source": "elttam", "severity": "`INFO`", "languages": "Java"}, {"identifier": "consumes-class-star", "message": "JAX-RS @Consumes(\"*/*\") $CLASS", "parent_source": "elttam", "severity": "`INFO`", "languages": "Java"}, {"identifier": "jax-rs.path-expression", "message": "JAX-RS Path Expression $PATH1/$PATH2 class $CLASS.$FUNC()", "parent_source": "elttam", "severity": "`INFO`", "languages": "Java"}, {"identifier": "struts-xml-always-select-full-namespace", "message": "struts.xml using alwaysSelectFullNamespace", "parent_source": "elttam", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "default-properties-devmode", "message": "default.properties struts.devMode = $MODE", "parent_source": "elttam", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "web-xml-devmode", "message": "web.xml devMode = $MODE", "parent_source": "elttam", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "struts-xml-devmode", "message": "struts.xml devMode = \"$...MODE\"", "parent_source": "elttam", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "struts-xml-action-dmi", "message": "struts.xml action $...NAME either using Dynamic Method Invocation or Wildcard Method feature", "parent_source": "elttam", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "taglib-action-dmi", "message": "JSTL taglib directive either Dynamic Method Invocation (DMI) or Wildcard Method feature prefix=\"$...PREFIX\" uri=\"$...URI\" action=\"$...ACTION\"", "parent_source": "elttam", "severity": "`INFO`", "languages": "Generic"}, {"identifier": "struts-xml-dmi", "message": "struts.xml Dynamic Method Invocation", "parent_source": "elttam", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "convention-annotation-class", "message": "Struts2 Convention plugin annotation $ANNOTATION params $...PARAMS class $CLASS", "parent_source": "elttam", "severity": "`INFO`", "languages": "Java"}, {"identifier": "execute-method", "message": "Struts2 Possible Action Handler class $CLASS has execute() method", "parent_source": "elttam", "severity": "`INFO`", "languages": "Java"}, {"identifier": "struts-xml-action-name", "message": "struts.xml action $...NAME", "parent_source": "elttam", "severity": "`INFO`", "languages": "Generic"}, {"identifier": "convention-annotation-class-method", "message": "Struts2 Convention plugin annotation $ANNOTATION params $...PARAMS class.method $CLASS.$METHOD", "parent_source": "elttam", "severity": "`INFO`", "languages": "Java"}, {"identifier": "convention-annotation-package-info", "message": "Struts2 Convention plugin annotation $ANNOTATION params $...PARAMS package $PACKAGE", "parent_source": "elttam", "severity": "`INFO`", "languages": "Java"}, {"identifier": "web-xml-url-pattern", "message": "web.xml Struts2 filter $FILTER_NAME class $...FILTER_CLASS url-pattern $...URL_PATTERN", "parent_source": "elttam", "severity": "`INFO`", "languages": "Generic"}, {"identifier": "taglib-directive", "message": "JSTL taglib directive prefix=\"$...PREFIX\" uri=\"$...URI\"", "parent_source": "elttam", "severity": "`INFO`", "languages": "Generic"}, {"identifier": "web-xml", "message": "web.xml Struts2 filter $FILTER_NAME class $...FILTER_CLASS", "parent_source": "elttam", "severity": "`INFO`", "languages": "Generic"}, {"identifier": "taglib-action", "message": "JSTL taglib directive prefix=\"$...PREFIX\" uri=\"$...URI\" action=\"$...ACTION\"", "parent_source": "elttam", "severity": "`INFO`", "languages": "Generic"}, {"identifier": "web-xml-listener", "message": "web.xml Struts2 listener-class $...LISTENER_CLASS", "parent_source": "elttam", "severity": "`INFO`", "languages": "Generic"}, {"identifier": "class-extends-action-support", "message": "Struts2 Action Handler class $CLASS extends ActionSupport", "parent_source": "elttam", "severity": "`INFO`", "languages": "Java"}, {"identifier": "aspnet-controller-entrypoint", "message": "HTTP endpoint $ROUTE$PATH will handle $METHOD requests", "parent_source": "elttam", "severity": "`INFO`", "languages": "C#"}, {"identifier": "rand-token-insecure-rng", "message": "rand-token defaults to using `crypto.pseudoRandomBytes`, insecure RNG", "parent_source": "elttam", "severity": "`WARNING`", "languages": "JavaScript"}, {"identifier": "express-mongodb-nosqli", "message": "Depending on the context, using (user-controlled) request data directly in a MongoDB query can lead to a NoSQLi vulnerability.", "parent_source": "elttam", "severity": "`WARNING`", "languages": "JavaScript, TypeScript"}, {"identifier": "express-app-router-handler", "message": "Express HTTP route $ROUTE will handle $METHOD requests", "parent_source": "elttam", "severity": "`INFO`", "languages": "JavaScript, TypeScript"}, {"identifier": "php-filter-chain-read-from-oracle", "message": "Detected possible file read caused by the the error-based oracle of PHP filter chains. It can be used to leak the content of a local file when passed to vulnerable functions even when the server does not return the file content.", "parent_source": "elttam", "severity": "`ERROR`", "languages": "PHP"}, {"identifier": "save-state", "message": "::save-state workflow command is deprecated, use GITHUB_STATE environment file instead.", "parent_source": "elttam", "severity": "`INFO`", "languages": "YAML"}, {"identifier": "set-output", "message": "::set-output workflow command is deprecated, use GITHUB_STATE environment file instead.", "parent_source": "elttam", "severity": "`INFO`", "languages": "YAML"}, {"identifier": "network-policy-ingress-any", "message": "NetworkPolicy with Ingress Permit ANY", "parent_source": "elttam", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "privileged-container", "message": "Privileged Container $IMAGE", "parent_source": "elttam", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "run-as-non-root", "message": "Container allows for running applications as root. This can result in privilege escalation attacks. Add 'runAsNonRoot: true' in 'securityContext' to prevent this.", "parent_source": "elttam", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "run-as-non-root-unsafe-value", "message": "Container allows for running applications as root. This can result in privilege escalation attacks. Change 'runAsNonRoot:' to 'true' in 'securityContext' to prevent this.", "parent_source": "elttam", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "allow-privilege-escalation", "message": "Container $NAME allows for privilege escalation via setuid or setgid binaries. Add 'allowPrivilegeEscalation: false' in 'securityContext' to prevent this.", "parent_source": "elttam", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "no-security-context", "message": "Container allows for running applications as root. This can result in privilege escalation attacks. Add 'runAsNonRoot: true' in 'securityContext' to prevent this.", "parent_source": "elttam", "severity": "`WARNING`", "languages": "YAML"}, {"identifier": "gcm-static-iv", "message": "GCM IV and key are both same source $KEY_BYTES", "parent_source": "elttam", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "randomstringutils-insecure-rng", "message": "RandomStringUtils uses java.util.Random by default which is not suitable for security", "parent_source": "elttam", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "UnsafeHttpInvokerServiceExporter-XML", "message": "Unsafe Spring Service Exporter XML", "parent_source": "elttam", "severity": "`INFO`", "languages": "Generic"}, {"identifier": "UnsafeHttpInvokerServiceExporter-func", "message": "Unsafe Spring Service Exporter func $FUNC", "parent_source": "elttam", "severity": "`INFO`", "languages": "Java"}, {"identifier": "UnsafeHttpInvokerServiceExporter-var", "message": "Unsafe Spring Service Exporter var $VAR", "parent_source": "elttam", "severity": "`INFO`", "languages": "Java"}, {"identifier": "UnsafeHttpInvokerServiceExporter-extends", "message": "Unsafe Spring Service Exporter $CLASS extends RemoteInvocationSerializingExporter", "parent_source": "elttam", "severity": "`INFO`", "languages": "Java"}, {"identifier": "potential-symlink-takeover-with-os.executable", "message": "os.Executable()s behaviour varies between operating systems. On Linux symlinks are followed, while on MacOS and Windows they are not. Depending on context, this could lead to file replacement attacks and local privilege escalation.", "parent_source": "elttam", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "non-atomic-use-of-converted-uintptr", "message": "An unsafe.Pointer converted to an uintptr must be used in an atomic step. Without this it is not guaranteed that the memory location uintptr points to will contain the intended structure.", "parent_source": "elttam", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "sprintf-unescaped-control-characters", "message": "fmt.Sprintf()'s %s formatting verb does not escape control characters in a string, such as \\u000a or backtick-enclosed multilines. This could lead to various vulnerabilities such as header injection, request smuggling, log injection, etc.", "parent_source": "elttam", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "unrestricted-file-upload", "message": "`$X` is saved without proper sanitization which could lead the client to uploading malicious\nfile(s) to the server.\n", "parent_source": "kondukto", "severity": "`WARNING`", "languages": "PHP"}, {"identifier": "insecure-deserialization", "message": "The software receives input from an upstream component that specifies multiple attributes, properties, or fields that are to be initialized or updated in an object, but it does not properly control which attributes can be modified.\n", "parent_source": "kondukto", "severity": "`ERROR`", "languages": "PHP"}, {"identifier": "simple-sql-injection", "message": "Without sufficient removal or quoting of SQL syntax in user-controllable inputs,\nthe generated SQL query can cause those inputs to be interpreted as SQL instead \nof ordinary user data. This can be used to alter query logic to bypass security checks,\nor to insert additional statements that modify the back-end database, possibly\nincluding execution of system commands.\n", "parent_source": "kondukto", "severity": "`ERROR`", "languages": "PHP"}, {"identifier": "getclientmimetype-used", "message": "For a trusted mime type, use `getMimeType()` instead (which guesses the mime\ntype based on the file content).\n", "parent_source": "kondukto", "severity": "`INFO`", "languages": "PHP"}, {"identifier": "insecure-deserialization", "message": "The software receives input from an upstream component that specifies multiple attributes, properties, or fields that are to be initialized or updated in an object, but it does not properly control which attributes can be modified.\n", "parent_source": "kondukto", "severity": "`ERROR`", "languages": "PHP"}, {"identifier": "stage-build", "message": "Missing multistage builds.", "parent_source": "kondukto", "severity": "`INFO`", "languages": "Dockerfile"}, {"identifier": "use-distroless-base-image", "message": "Distroless base image not found. Please use `gcr.io/distroless/static-debian10` as a base image.", "parent_source": "kondukto", "severity": "`ERROR`", "languages": "Dockerfile"}, {"identifier": "missing-user", "message": "By not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'.", "parent_source": "kondukto", "severity": "`ERROR`", "languages": "Dockerfile"}, {"identifier": "missing-healthcheck", "message": "Missing HEALTHCHECK instruction.", "parent_source": "kondukto", "severity": "`INFO`", "languages": "Dockerfile"}, {"identifier": "last-user-is-root", "message": "The last user in the container is 'root'. This is a security hazard because if an attacker gains control of the container they will have root access. Switch back to another user after running commands as 'root'.", "parent_source": "kondukto", "severity": "`ERROR`", "languages": "Dockerfile"}, {"identifier": "x-forwarded-for", "message": "The X-Forwarded-For (XFF) HTTP header field is a common method for identifying the originating\nIP address of a client connecting to a web server through an HTTP proxy or load balancer. Since this header \nis not set by server and can be easily spoofed by the client It may cause injection attacks if `$ADDR`\nis not filtered for properly.\n", "parent_source": "kondukto", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "log4j-message-lookup-injection", "message": "Possible Lookup injection into Log4j messages.  \n", "parent_source": "kondukto", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "XXE", "message": "Generic XXE in `$JC`. The 'javax.xml.bind.Unmarshaller' parses XML and does not support any flags for disabling XXE, it's imperative\nto parse the untrusted XML through a configurable secure parser first, generate a source object as a result, and pass the\nsource object to the Unmarshaller.\n", "parent_source": "kondukto", "severity": "`ERROR`", "languages": "Java"}, {"identifier": "go.gorilla.security.audit.websocket-checkorigin-missing", "message": "The 'Origin' header of the Websocket handshake request is not checked.\nThis could lead to Cross-Site WebSocket Hijacking vulnerability (CSWSH).\n", "parent_source": "kondukto", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "go.common.audit.go-routine-on-loop-iterator-variables", "message": "In the \"$LOOP\" iteration, \"$Y\" should be added as a parameter to the goroutine", "parent_source": "kondukto", "severity": "`INFO`", "languages": "Go"}, {"identifier": "go.lang.security.ldap-injection.ldap-inection", "message": "Detected non-constant data passed into an LDAP query. If this data can be\ncontrolled by an external user, this is an LDAP injection.\nEnsure data passed to an LDAP query is not controllable; or properly sanitize\nthe data.\n", "parent_source": "kondukto", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "use-hmac-equal", "message": "Comparing a MAC with bytes.Equal()", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "odd-bitwise", "message": "Odd bitwise expression", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "context-todo", "message": "Consider to use well-defined context", "parent_source": "dgryski", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "return-nil-err", "message": "return nil err instead of nil value", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "wrong-lock-unlock", "message": "Wrong lock/unlock pair?", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "http-request-go-context", "message": "passing an http-request scoped Context to a goroutine", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "go-fuzz-to-native-fuzzing", "message": "old-style go-fuzz fuzz function found", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "rows-not-closed", "message": "QueryxContext rows must be closed (or use ExecContext)", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "bad-exponentiation", "message": "Caret (^) is not exponentiation", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "return-nil", "message": "return nil instead of nil value", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "use-err-error", "message": "Use err.Error() instead", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "hmac-needs-new", "message": "calling hmac.New with unchanging hash.New", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "parseint-downcast", "message": "64-bit integer parsed and downcast to u/int32", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "hash-sum-without-write", "message": "odd hash.Sum call flow", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "marshal-json-pointer-receiver", "message": "MarshalJSON with a pointer receiver has surprising results: https://github.com/golang/go/issues/22967", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "marshal-json-misspell", "message": "Misspelling of MarshalJSON.\n", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "unmarshal-json-misspell", "message": "Misspelling of UnmarshalJSON.\n", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "sprintf-mail-address", "message": "use net/mail Address.String() instead of fmt.Sprintf()", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "json-encoder-needs-type", "message": "calling json.Encode() on an http.ResponseWriter will set Content-Type text/plain", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "newrelic-start-without-end", "message": "missing new relic end transaction", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "odd-bits-leadingzeros", "message": "Odd bits.LeadingZeros() expression should perhaps be bits.Len()", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "odd-sequence-ifs", "message": "Odd sequence of ifs", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "read-io-eof", "message": "Read() can return n bytes and io.EOF", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "use-writer-not-writestring", "message": "use $W.Write($VAR) instead of io.WriteString when $VAR is []byte", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "use-write-not-fprint", "message": "use $W.Write($VAR) instead of fmt.Fprint when $VAR is []byte", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "use-fprintf-not-write-fsprint", "message": "use fmt.Fprintf($W, $...VALS) instead of fmt.Sprintf and []byte conversion", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "err-todo", "message": "TODO in error handling code", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "bad-nil-guard", "message": "Bad nil guard", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "sprintf-host-port", "message": "use net.JoinHostPort instead of fmt.Sprintf($XX, $NET)\n", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "not-after", "message": "unless checking for wall clock inconsistencies, use !$T1.After($T2)\n", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "not-before", "message": "unless checking for wall clock inconsistencies, use !$T1.Before($T2)\n", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "maybe-wrong-err", "message": "maybe returning wrong error", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "os-error-is-exist", "message": "New code should use errors.Is with the appropriate error type", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "os-error-is-not-exist", "message": "New code should use errors.Is with the appropriate error type", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "os-error-is-permission", "message": "New code should use errors.Is with the appropriate error type", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "os-error-is-timeout", "message": "New code should use errors.Is with the appropriate error type", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "bad-sort-slice-function", "message": "Maybe bad sort.Slice() less function", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "use-math-bits", "message": "Try using math/bits instead", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "err-nil-check", "message": "superfluous nil err check before return", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "odd-compound-expression", "message": "Odd compound += or -= expression", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "io-readfull-n", "message": "io.ReadFull() returns err == nil iff n == len(slice)", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "cancelable-context-not-systematically-cancelled", "message": "it is good practice to call context cancellation function, $X(), in any case", "parent_source": "dgryski", "severity": "`WARNING`", "languages": "Go"}, {"identifier": "leaky-time-after", "message": "Leaky use of time.After in for-select, see: https://groups.google.com/g/golang-nuts/c/cCdm0Ixwi9A/m/jMiJJScAEAAJ", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "anonymous-struct-args", "message": "Odd use of anonymous structs for function arguments", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "marshal-yaml-misspell", "message": "Misspelling of MarshalYAML.\n", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "unmarshal-yaml-misspell", "message": "Misspelling of UnmarshalYAML.\n", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "use-strings-join-path", "message": "did you want path.Join() or filepath.Join()?", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "ctx-done-and-timers", "message": "ctx.Done() and time.After/time.NewTicker", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "deprecated-ioutil-nopcloser", "message": "ioutil.NopCloser is deprecated", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "deprecated-ioutil-readall", "message": "ioutil.ReadAll is deprecated", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "deprecated-ioutil-readdir", "message": "ioutil.ReadDir is deprecated", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "deprecated-ioutil-readfile", "message": "ioutil.ReadFile is deprecated", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "deprecated-ioutil-tempdir", "message": "ioutil.TempDir is deprecated", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "deprecated-ioutil-tempfile", "message": "ioutil.TempFile is deprecated", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "deprecated-ioutil-writefile", "message": "ioutil.WriteFile is deprecated", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "deprecated-ioutil-discard", "message": "ioutil.Discard is deprecated", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "use-net-errclosed", "message": "Use errors.Is($ERR, net.ErrClosed) instead", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "odd-comparison-subtract-eq-zero", "message": "Odd comparison", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "odd-comparison-subtract-neq-zero", "message": "Odd comparison", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "odd-comparison-subtract-lt-zero", "message": "Odd comparison", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "odd-comparison-subtract-lte-zero", "message": "Odd comparison", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "odd-comparison-subtract-gt-zero", "message": "Odd comparison", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "odd-comparison-subtract-gte-zero", "message": "Odd comparison", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "odd-comparison-xor-eq-zero", "message": "Odd comparison", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "odd-comparison-xor-neq-zero", "message": "Odd comparison", "parent_source": "dgryski", "severity": "`ERROR`", "languages": "Go"}, {"identifier": "sql-injection-php-apps3c", "message": "Detected a formatted string starting with a SQL operation with a concatenated  value that came from a function argument. This could lead to SQL injection if variables in the SQL statement are not properly sanitized.", "parent_source": "dotta", "severity": "`WARNING`", "languages": "PHP"}, {"identifier": "sql-injection-php-potential-apps3c", "message": "Detected a string starting with a SQL operation with a concatenated  value. This could lead to SQL injection if variables in the SQL  statement are not properly sanitized.", "parent_source": "dotta", "severity": "`INFO`", "languages": "PHP"}, {"identifier": "sql-injection-yii-framework-potential-apps3c", "message": "Detected a SQL operation with Yii framework with a concatenated  value. This could lead to SQL injection if variables in the SQL  statement are not properly sanitized.", "parent_source": "dotta", "severity": "`INFO`", "languages": "PHP"}, {"identifier": "xss-yii-framework-potential-apps3c", "message": "Detects potential XSS with YII framework when the content of PHP  variables is put in HTML code using <?= => blocks without making use of YII XSS-safe filters.", "parent_source": "dotta", "severity": "`WARNING`", "languages": "PHP"}, {"identifier": "sql-injection-yii-framework-apps3c", "message": "Detected a formatted string in a Yii SQL operation with a concatenated  value that came from a function argument. This could lead to SQL injection if variables in the SQL statement are not properly sanitized.", "parent_source": "dotta", "severity": "`WARNING`", "languages": "PHP"}, {"identifier": "auth-bypass-yii-framework-apps3c", "message": "Authentication and authorization checks are often implemented in  \"beforeAction\" functions in Yii framework. When an authentication or authorization check is failed, the user is usually redirected to  a login page or to an exception one. The \"beforeAction must return  \"false\" also if the user is redirected, otherwise the code protected  by the \"beforeAction\" function is executed before the redirection,  posing a secrious security risk.", "parent_source": "dotta", "severity": "`ERROR`", "languages": "PHP"}, {"identifier": "auth-bypass-yii-framework-potential-apps3c", "message": "Authentication and authorization checks are often implemented in  \"beforeAction\" functions in Yii framework. When an authentication or authorization check is failed, the user is usually redirected to  a login page or to an exception one. The \"beforeAction must return  \"false\" also if the user is redirected, otherwise the code protected  by the \"beforeAction\" function is executed before the redirection,  posing a secrious security risk.", "parent_source": "dotta", "severity": "`WARNING`", "languages": "PHP"}, {"identifier": "sql-injection-kotlin-apps3c", "message": "Detected a formatted string starting with a SQL operation with a concatenated  value that came from a function argument. This could lead to SQL injection if variables in the SQL statement are not properly sanitized.", "parent_source": "dotta", "severity": "`WARNING`", "languages": "Kotlin"}, {"identifier": "sql-injection-kotlin-potential-apps3c", "message": "Detected a string starting with a SQL operation with a concatenated  value. This could lead to SQL injection if variables in the SQL  statement are not properly sanitized.", "parent_source": "dotta", "severity": "`INFO`", "languages": "Kotlin"}, {"identifier": "android-webview-kotlin-apps3c", "message": "Detect portions of the Android Kotlin code that make use of WebView, in order to check for  insecure configurations. More details on vulnerable confiurations related to WebView can be  found in OWASP \"Android Platform APIs\" document: https://github.com/OWASP/owasp-mstg/blob/master/Document/0x05h-Testing-Platform-Interaction.md", "parent_source": "dotta", "severity": "`WARNING`", "languages": "Kotlin"}, {"identifier": "android-apps3c", "message": "Detect portions of the Android Java code that make use of WebView, in order to check for  insecure configurations. More details on vulnerable confiurations related to WebView can be  found in OWASP \"Android Platform APIs\" document: https://github.com/OWASP/owasp-mstg/blob/master/Document/0x05h-Testing-Platform-Interaction.md", "parent_source": "dotta", "severity": "`WARNING`", "languages": "Java"}, {"identifier": "aws-iam-policy-statement-duplicate-conditions", "message": "Usage of jsonencode() to define policy statements containing conditions with duplicate keys is prone to silent squashing during JSON serialization. While the `terraform plan` output will correctly reflect the end state, it may not match the intent of the configuration author.\n\nReview the guidance at https://developer.hashicorp.com/terraform/tutorials/aws/aws-iam-policy, and consider using the aws_iam_policy_document data source instead.\n", "parent_source": "hashicorp", "severity": "`ERROR`", "languages": "Terraform"}, {"identifier": "aws-iam-policy-document-duplicate-conditions", "message": "Usage of aws_iam_policy_document data source with duplicate condition test/variable values may result in unexpected behavior. While the `terraform plan` output will correctly reflect the end state, it may not match the intent of the configuration author.\n", "parent_source": "hashicorp", "severity": "`ERROR`", "languages": "Terraform"}, {"identifier": "general-invalid-module-identifier", "message": "This Terraform configuration uses a module name that is not a valid HCL identifier.\n\nThe HCL specification defines the identifier format at https://github.com/hashicorp/hcl/blob/main/hclsyntax/spec.md#identifiers.\n\nThis may have security implications related to https://discuss.hashicorp.com/t/hcsec-2023-27-terraform-allows-arbitrary-file-write-during-init-operation/58082, or may cause errors when run with Terraform 1.5.7 or newer.\n", "parent_source": "hashicorp", "severity": "`ERROR`", "languages": "Terraform"}, {"identifier": "aws-iam-policy-heredoc-usage", "message": "Usage of heredoc pattern for policy configurations may be prone to silent squashing of duplicate JSON keys. While the `terraform plan` output will correctly reflect the end state, it may not match the intent of the configuration author.\n\nReview the guidance at https://developer.hashicorp.com/terraform/tutorials/aws/aws-iam-policy, and consider using the aws_iam_policy_document data source instead.\n", "parent_source": "hashicorp", "severity": "`WARNING`", "languages": "Generic"}, {"identifier": "aws-iam-policy-jsonencode-usage", "message": "Usage of jsonencode() with IAM resource policy configurations may be prone to silent squashing of duplicate JSON keys. While the `terraform plan` output will correctly reflect the end state, it may not match the intent of the configuration author.\n\nReview the guidance at https://developer.hashicorp.com/terraform/tutorials/aws/aws-iam-policy, and consider using the aws_iam_policy_document data source instead.\n", "parent_source": "hashicorp", "severity": "`WARNING`", "languages": "Terraform"}]